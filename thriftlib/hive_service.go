// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package hive_service

import (
	"bytes"
	"database/sql/driver"
	"errors"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"github.com/ralphal/hive/thriftlib/fb303"
	"github.com/ralphal/hive/thriftlib/hive_metastore"
	"github.com/ralphal/hive/thriftlib/queryplan"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = fb303.GoUnusedProtection__
var _ = hive_metastore.GoUnusedProtection__
var _ = queryplan.GoUnusedProtection__
type JobTrackerState int64
const (
  JobTrackerState_INITIALIZING JobTrackerState = 1
  JobTrackerState_RUNNING JobTrackerState = 2
)

func (p JobTrackerState) String() string {
  switch p {
  case JobTrackerState_INITIALIZING: return "INITIALIZING"
  case JobTrackerState_RUNNING: return "RUNNING"
  }
  return "<UNSET>"
}

func JobTrackerStateFromString(s string) (JobTrackerState, error) {
  switch s {
  case "INITIALIZING": return JobTrackerState_INITIALIZING, nil 
  case "RUNNING": return JobTrackerState_RUNNING, nil 
  }
  return JobTrackerState(0), fmt.Errorf("not a valid JobTrackerState string")
}


func JobTrackerStatePtr(v JobTrackerState) *JobTrackerState { return &v }

func (p JobTrackerState) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *JobTrackerState) UnmarshalText(text []byte) error {
q, err := JobTrackerStateFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *JobTrackerState) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = JobTrackerState(v)
return nil
}

func (p * JobTrackerState) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - TaskTrackers
//  - MapTasks
//  - ReduceTasks
//  - MaxMapTasks
//  - MaxReduceTasks
//  - State
type HiveClusterStatus struct {
  TaskTrackers int32 `thrift:"taskTrackers,1" db:"taskTrackers" json:"taskTrackers"`
  MapTasks int32 `thrift:"mapTasks,2" db:"mapTasks" json:"mapTasks"`
  ReduceTasks int32 `thrift:"reduceTasks,3" db:"reduceTasks" json:"reduceTasks"`
  MaxMapTasks int32 `thrift:"maxMapTasks,4" db:"maxMapTasks" json:"maxMapTasks"`
  MaxReduceTasks int32 `thrift:"maxReduceTasks,5" db:"maxReduceTasks" json:"maxReduceTasks"`
  State JobTrackerState `thrift:"state,6" db:"state" json:"state"`
}

func NewHiveClusterStatus() *HiveClusterStatus {
  return &HiveClusterStatus{}
}


func (p *HiveClusterStatus) GetTaskTrackers() int32 {
  return p.TaskTrackers
}

func (p *HiveClusterStatus) GetMapTasks() int32 {
  return p.MapTasks
}

func (p *HiveClusterStatus) GetReduceTasks() int32 {
  return p.ReduceTasks
}

func (p *HiveClusterStatus) GetMaxMapTasks() int32 {
  return p.MaxMapTasks
}

func (p *HiveClusterStatus) GetMaxReduceTasks() int32 {
  return p.MaxReduceTasks
}

func (p *HiveClusterStatus) GetState() JobTrackerState {
  return p.State
}
func (p *HiveClusterStatus) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HiveClusterStatus)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TaskTrackers = v
}
  return nil
}

func (p *HiveClusterStatus)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MapTasks = v
}
  return nil
}

func (p *HiveClusterStatus)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ReduceTasks = v
}
  return nil
}

func (p *HiveClusterStatus)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.MaxMapTasks = v
}
  return nil
}

func (p *HiveClusterStatus)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.MaxReduceTasks = v
}
  return nil
}

func (p *HiveClusterStatus)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := JobTrackerState(v)
  p.State = temp
}
  return nil
}

func (p *HiveClusterStatus) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("HiveClusterStatus"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HiveClusterStatus) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("taskTrackers", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:taskTrackers: ", p), err) }
  if err := oprot.WriteI32(int32(p.TaskTrackers)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.taskTrackers (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:taskTrackers: ", p), err) }
  return err
}

func (p *HiveClusterStatus) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mapTasks", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mapTasks: ", p), err) }
  if err := oprot.WriteI32(int32(p.MapTasks)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mapTasks (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mapTasks: ", p), err) }
  return err
}

func (p *HiveClusterStatus) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reduceTasks", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:reduceTasks: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReduceTasks)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reduceTasks (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:reduceTasks: ", p), err) }
  return err
}

func (p *HiveClusterStatus) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("maxMapTasks", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:maxMapTasks: ", p), err) }
  if err := oprot.WriteI32(int32(p.MaxMapTasks)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.maxMapTasks (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:maxMapTasks: ", p), err) }
  return err
}

func (p *HiveClusterStatus) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("maxReduceTasks", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:maxReduceTasks: ", p), err) }
  if err := oprot.WriteI32(int32(p.MaxReduceTasks)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.maxReduceTasks (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:maxReduceTasks: ", p), err) }
  return err
}

func (p *HiveClusterStatus) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("state", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:state: ", p), err) }
  if err := oprot.WriteI32(int32(p.State)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.state (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:state: ", p), err) }
  return err
}

func (p *HiveClusterStatus) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HiveClusterStatus(%+v)", *p)
}

// Attributes:
//  - Message
//  - ErrorCode
//  - SQLState
type HiveServerException struct {
  Message string `thrift:"message,1" db:"message" json:"message"`
  ErrorCode int32 `thrift:"errorCode,2" db:"errorCode" json:"errorCode"`
  SQLState string `thrift:"SQLState,3" db:"SQLState" json:"SQLState"`
}

func NewHiveServerException() *HiveServerException {
  return &HiveServerException{}
}


func (p *HiveServerException) GetMessage() string {
  return p.Message
}

func (p *HiveServerException) GetErrorCode() int32 {
  return p.ErrorCode
}

func (p *HiveServerException) GetSQLState() string {
  return p.SQLState
}
func (p *HiveServerException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HiveServerException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *HiveServerException)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ErrorCode = v
}
  return nil
}

func (p *HiveServerException)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SQLState = v
}
  return nil
}

func (p *HiveServerException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("HiveServerException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HiveServerException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *HiveServerException) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("errorCode", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:errorCode: ", p), err) }
  if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.errorCode (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:errorCode: ", p), err) }
  return err
}

func (p *HiveServerException) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("SQLState", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:SQLState: ", p), err) }
  if err := oprot.WriteString(string(p.SQLState)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.SQLState (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:SQLState: ", p), err) }
  return err
}

func (p *HiveServerException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HiveServerException(%+v)", *p)
}

func (p *HiveServerException) Error() string {
  return p.String()
}

type ThriftHive interface {
  hive_metastore.ThriftHiveMetastore

  // Parameters:
  //  - Query
  Execute(query string) (err error)
  FetchOne() (r string, err error)
  // Parameters:
  //  - NumRows
  FetchN(numRows int32) (r []string, err error)
  FetchAll() (r []string, err error)
  GetThriftSchema() (r *hive_metastore.Schema, err error)
  GetClusterStatus() (r *HiveClusterStatus, err error)
  GetQueryPlan() (r *queryplan.QueryPlan, err error)
  Clean() (err error)
}

type ThriftHiveClient struct {
  *hive_metastore.ThriftHiveMetastoreClient
}

func NewThriftHiveClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ThriftHiveClient {
  return &ThriftHiveClient{ThriftHiveMetastoreClient: hive_metastore.NewThriftHiveMetastoreClientFactory(t, f)}}

func NewThriftHiveClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ThriftHiveClient {
  return &ThriftHiveClient{ThriftHiveMetastoreClient: hive_metastore.NewThriftHiveMetastoreClientProtocol(t, iprot, oprot)}
}

// Parameters:
//  - Query
func (p *ThriftHiveClient) Execute(query string) (err error) {
  if err = p.sendExecute(query); err != nil { return }
  return p.recvExecute()
}

func (p *ThriftHiveClient) sendExecute(query string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("execute", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ThriftHiveExecuteArgs{
  Query : query,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ThriftHiveClient) recvExecute() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "execute" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "execute failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "execute failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error1 error
    error1, err = error0.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error1
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "execute failed: invalid message type")
    return
  }
  result := ThriftHiveExecuteResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ex != nil {
    err = result.Ex
    return 
  }
  return
}

func (p *ThriftHiveClient) FetchOne() (r string, err error) {
  if err = p.sendFetchOne(); err != nil { return }
  return p.recvFetchOne()
}

func (p *ThriftHiveClient) sendFetchOne()(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("fetchOne", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ThriftHiveFetchOneArgs{
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ThriftHiveClient) recvFetchOne() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "fetchOne" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "fetchOne failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "fetchOne failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error3 error
    error3, err = error2.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error3
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "fetchOne failed: invalid message type")
    return
  }
  result := ThriftHiveFetchOneResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ex != nil {
    err = result.Ex
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - NumRows
func (p *ThriftHiveClient) FetchN(numRows int32) (r []string, err error) {
  if err = p.sendFetchN(numRows); err != nil { return }
  return p.recvFetchN()
}

func (p *ThriftHiveClient) sendFetchN(numRows int32)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("fetchN", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ThriftHiveFetchNArgs{
  NumRows : numRows,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ThriftHiveClient) recvFetchN() (value []string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "fetchN" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "fetchN failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "fetchN failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error5 error
    error5, err = error4.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error5
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "fetchN failed: invalid message type")
    return
  }
  result := ThriftHiveFetchNResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ex != nil {
    err = result.Ex
    return 
  }
  value = result.GetSuccess()
  return
}

func (p *ThriftHiveClient) FetchAll() (r []string, err error) {
  if err = p.sendFetchAll(); err != nil { return }
  return p.recvFetchAll()
}

func (p *ThriftHiveClient) sendFetchAll()(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("fetchAll", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ThriftHiveFetchAllArgs{
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ThriftHiveClient) recvFetchAll() (value []string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "fetchAll" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "fetchAll failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "fetchAll failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error7 error
    error7, err = error6.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error7
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "fetchAll failed: invalid message type")
    return
  }
  result := ThriftHiveFetchAllResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ex != nil {
    err = result.Ex
    return 
  }
  value = result.GetSuccess()
  return
}

func (p *ThriftHiveClient) GetThriftSchema() (r *hive_metastore.Schema, err error) {
  if err = p.sendGetThriftSchema(); err != nil { return }
  return p.recvGetThriftSchema()
}

func (p *ThriftHiveClient) sendGetThriftSchema()(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getThriftSchema", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ThriftHiveGetThriftSchemaArgs{
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ThriftHiveClient) recvGetThriftSchema() (value *hive_metastore.Schema, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getThriftSchema" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getThriftSchema failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getThriftSchema failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error8 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error9 error
    error9, err = error8.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error9
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getThriftSchema failed: invalid message type")
    return
  }
  result := ThriftHiveGetThriftSchemaResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ex != nil {
    err = result.Ex
    return 
  }
  value = result.GetSuccess()
  return
}

func (p *ThriftHiveClient) GetClusterStatus() (r *HiveClusterStatus, err error) {
  if err = p.sendGetClusterStatus(); err != nil { return }
  return p.recvGetClusterStatus()
}

func (p *ThriftHiveClient) sendGetClusterStatus()(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getClusterStatus", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ThriftHiveGetClusterStatusArgs{
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ThriftHiveClient) recvGetClusterStatus() (value *HiveClusterStatus, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getClusterStatus" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getClusterStatus failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getClusterStatus failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error10 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error11 error
    error11, err = error10.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error11
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getClusterStatus failed: invalid message type")
    return
  }
  result := ThriftHiveGetClusterStatusResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ex != nil {
    err = result.Ex
    return 
  }
  value = result.GetSuccess()
  return
}

func (p *ThriftHiveClient) GetQueryPlan() (r *queryplan.QueryPlan, err error) {
  if err = p.sendGetQueryPlan(); err != nil { return }
  return p.recvGetQueryPlan()
}

func (p *ThriftHiveClient) sendGetQueryPlan()(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getQueryPlan", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ThriftHiveGetQueryPlanArgs{
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ThriftHiveClient) recvGetQueryPlan() (value *queryplan.QueryPlan, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getQueryPlan" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getQueryPlan failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getQueryPlan failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error12 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error13 error
    error13, err = error12.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error13
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getQueryPlan failed: invalid message type")
    return
  }
  result := ThriftHiveGetQueryPlanResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ex != nil {
    err = result.Ex
    return 
  }
  value = result.GetSuccess()
  return
}

func (p *ThriftHiveClient) Clean() (err error) {
  if err = p.sendClean(); err != nil { return }
  return p.recvClean()
}

func (p *ThriftHiveClient) sendClean()(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("clean", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ThriftHiveCleanArgs{
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ThriftHiveClient) recvClean() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "clean" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "clean failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "clean failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error14 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error15 error
    error15, err = error14.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error15
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "clean failed: invalid message type")
    return
  }
  result := ThriftHiveCleanResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  return
}


type ThriftHiveProcessor struct {
  *hive_metastore.ThriftHiveMetastoreProcessor
}

func NewThriftHiveProcessor(handler ThriftHive) *ThriftHiveProcessor {
  self16 := &ThriftHiveProcessor{hive_metastore.NewThriftHiveMetastoreProcessor(handler)}
  self16.AddToProcessorMap("execute", &thriftHiveProcessorExecute{handler:handler})
  self16.AddToProcessorMap("fetchOne", &thriftHiveProcessorFetchOne{handler:handler})
  self16.AddToProcessorMap("fetchN", &thriftHiveProcessorFetchN{handler:handler})
  self16.AddToProcessorMap("fetchAll", &thriftHiveProcessorFetchAll{handler:handler})
  self16.AddToProcessorMap("getThriftSchema", &thriftHiveProcessorGetThriftSchema{handler:handler})
  self16.AddToProcessorMap("getClusterStatus", &thriftHiveProcessorGetClusterStatus{handler:handler})
  self16.AddToProcessorMap("getQueryPlan", &thriftHiveProcessorGetQueryPlan{handler:handler})
  self16.AddToProcessorMap("clean", &thriftHiveProcessorClean{handler:handler})
  return self16
}

type thriftHiveProcessorExecute struct {
  handler ThriftHive
}

func (p *thriftHiveProcessorExecute) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveExecuteArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("execute", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveExecuteResult{}
  var err2 error
  if err2 = p.handler.Execute(args.Query); err2 != nil {
  switch v := err2.(type) {
    case *HiveServerException:
  result.Ex = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing execute: " + err2.Error())
    oprot.WriteMessageBegin("execute", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("execute", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveProcessorFetchOne struct {
  handler ThriftHive
}

func (p *thriftHiveProcessorFetchOne) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveFetchOneArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("fetchOne", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveFetchOneResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.FetchOne(); err2 != nil {
  switch v := err2.(type) {
    case *HiveServerException:
  result.Ex = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing fetchOne: " + err2.Error())
    oprot.WriteMessageBegin("fetchOne", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("fetchOne", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveProcessorFetchN struct {
  handler ThriftHive
}

func (p *thriftHiveProcessorFetchN) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveFetchNArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("fetchN", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveFetchNResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.FetchN(args.NumRows); err2 != nil {
  switch v := err2.(type) {
    case *HiveServerException:
  result.Ex = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing fetchN: " + err2.Error())
    oprot.WriteMessageBegin("fetchN", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("fetchN", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveProcessorFetchAll struct {
  handler ThriftHive
}

func (p *thriftHiveProcessorFetchAll) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveFetchAllArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("fetchAll", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveFetchAllResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.FetchAll(); err2 != nil {
  switch v := err2.(type) {
    case *HiveServerException:
  result.Ex = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing fetchAll: " + err2.Error())
    oprot.WriteMessageBegin("fetchAll", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("fetchAll", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveProcessorGetThriftSchema struct {
  handler ThriftHive
}

func (p *thriftHiveProcessorGetThriftSchema) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveGetThriftSchemaArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getThriftSchema", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveGetThriftSchemaResult{}
var retval *hive_metastore.Schema
  var err2 error
  if retval, err2 = p.handler.GetThriftSchema(); err2 != nil {
  switch v := err2.(type) {
    case *HiveServerException:
  result.Ex = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getThriftSchema: " + err2.Error())
    oprot.WriteMessageBegin("getThriftSchema", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getThriftSchema", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveProcessorGetClusterStatus struct {
  handler ThriftHive
}

func (p *thriftHiveProcessorGetClusterStatus) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveGetClusterStatusArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getClusterStatus", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveGetClusterStatusResult{}
var retval *HiveClusterStatus
  var err2 error
  if retval, err2 = p.handler.GetClusterStatus(); err2 != nil {
  switch v := err2.(type) {
    case *HiveServerException:
  result.Ex = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getClusterStatus: " + err2.Error())
    oprot.WriteMessageBegin("getClusterStatus", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getClusterStatus", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveProcessorGetQueryPlan struct {
  handler ThriftHive
}

func (p *thriftHiveProcessorGetQueryPlan) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveGetQueryPlanArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getQueryPlan", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveGetQueryPlanResult{}
var retval *queryplan.QueryPlan
  var err2 error
  if retval, err2 = p.handler.GetQueryPlan(); err2 != nil {
  switch v := err2.(type) {
    case *HiveServerException:
  result.Ex = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getQueryPlan: " + err2.Error())
    oprot.WriteMessageBegin("getQueryPlan", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getQueryPlan", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thriftHiveProcessorClean struct {
  handler ThriftHive
}

func (p *thriftHiveProcessorClean) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThriftHiveCleanArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("clean", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThriftHiveCleanResult{}
  var err2 error
  if err2 = p.handler.Clean(); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing clean: " + err2.Error())
    oprot.WriteMessageBegin("clean", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("clean", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Query
type ThriftHiveExecuteArgs struct {
  Query string `thrift:"query,1" db:"query" json:"query"`
}

func NewThriftHiveExecuteArgs() *ThriftHiveExecuteArgs {
  return &ThriftHiveExecuteArgs{}
}


func (p *ThriftHiveExecuteArgs) GetQuery() string {
  return p.Query
}
func (p *ThriftHiveExecuteArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveExecuteArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Query = v
}
  return nil
}

func (p *ThriftHiveExecuteArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("execute_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveExecuteArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("query", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:query: ", p), err) }
  if err := oprot.WriteString(string(p.Query)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.query (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:query: ", p), err) }
  return err
}

func (p *ThriftHiveExecuteArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveExecuteArgs(%+v)", *p)
}

// Attributes:
//  - Ex
type ThriftHiveExecuteResult struct {
  Ex *HiveServerException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewThriftHiveExecuteResult() *ThriftHiveExecuteResult {
  return &ThriftHiveExecuteResult{}
}

var ThriftHiveExecuteResult_Ex_DEFAULT *HiveServerException
func (p *ThriftHiveExecuteResult) GetEx() *HiveServerException {
  if !p.IsSetEx() {
    return ThriftHiveExecuteResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *ThriftHiveExecuteResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *ThriftHiveExecuteResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveExecuteResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ex = &HiveServerException{}
  if err := p.Ex.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *ThriftHiveExecuteResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("execute_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveExecuteResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *ThriftHiveExecuteResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveExecuteResult(%+v)", *p)
}

type ThriftHiveFetchOneArgs struct {
}

func NewThriftHiveFetchOneArgs() *ThriftHiveFetchOneArgs {
  return &ThriftHiveFetchOneArgs{}
}

func (p *ThriftHiveFetchOneArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveFetchOneArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("fetchOne_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveFetchOneArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveFetchOneArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type ThriftHiveFetchOneResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *HiveServerException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewThriftHiveFetchOneResult() *ThriftHiveFetchOneResult {
  return &ThriftHiveFetchOneResult{}
}

var ThriftHiveFetchOneResult_Success_DEFAULT string
func (p *ThriftHiveFetchOneResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return ThriftHiveFetchOneResult_Success_DEFAULT
  }
return *p.Success
}
var ThriftHiveFetchOneResult_Ex_DEFAULT *HiveServerException
func (p *ThriftHiveFetchOneResult) GetEx() *HiveServerException {
  if !p.IsSetEx() {
    return ThriftHiveFetchOneResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *ThriftHiveFetchOneResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveFetchOneResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *ThriftHiveFetchOneResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveFetchOneResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ThriftHiveFetchOneResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ex = &HiveServerException{}
  if err := p.Ex.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *ThriftHiveFetchOneResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("fetchOne_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveFetchOneResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveFetchOneResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *ThriftHiveFetchOneResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveFetchOneResult(%+v)", *p)
}

// Attributes:
//  - NumRows
type ThriftHiveFetchNArgs struct {
  NumRows int32 `thrift:"numRows,1" db:"numRows" json:"numRows"`
}

func NewThriftHiveFetchNArgs() *ThriftHiveFetchNArgs {
  return &ThriftHiveFetchNArgs{}
}


func (p *ThriftHiveFetchNArgs) GetNumRows() int32 {
  return p.NumRows
}
func (p *ThriftHiveFetchNArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveFetchNArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.NumRows = v
}
  return nil
}

func (p *ThriftHiveFetchNArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("fetchN_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveFetchNArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("numRows", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:numRows: ", p), err) }
  if err := oprot.WriteI32(int32(p.NumRows)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numRows (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:numRows: ", p), err) }
  return err
}

func (p *ThriftHiveFetchNArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveFetchNArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type ThriftHiveFetchNResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *HiveServerException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewThriftHiveFetchNResult() *ThriftHiveFetchNResult {
  return &ThriftHiveFetchNResult{}
}

var ThriftHiveFetchNResult_Success_DEFAULT []string

func (p *ThriftHiveFetchNResult) GetSuccess() []string {
  return p.Success
}
var ThriftHiveFetchNResult_Ex_DEFAULT *HiveServerException
func (p *ThriftHiveFetchNResult) GetEx() *HiveServerException {
  if !p.IsSetEx() {
    return ThriftHiveFetchNResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *ThriftHiveFetchNResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveFetchNResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *ThriftHiveFetchNResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveFetchNResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem17 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem17 = v
}
    p.Success = append(p.Success, _elem17)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveFetchNResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ex = &HiveServerException{}
  if err := p.Ex.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *ThriftHiveFetchNResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("fetchN_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveFetchNResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveFetchNResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *ThriftHiveFetchNResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveFetchNResult(%+v)", *p)
}

type ThriftHiveFetchAllArgs struct {
}

func NewThriftHiveFetchAllArgs() *ThriftHiveFetchAllArgs {
  return &ThriftHiveFetchAllArgs{}
}

func (p *ThriftHiveFetchAllArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveFetchAllArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("fetchAll_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveFetchAllArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveFetchAllArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type ThriftHiveFetchAllResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *HiveServerException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewThriftHiveFetchAllResult() *ThriftHiveFetchAllResult {
  return &ThriftHiveFetchAllResult{}
}

var ThriftHiveFetchAllResult_Success_DEFAULT []string

func (p *ThriftHiveFetchAllResult) GetSuccess() []string {
  return p.Success
}
var ThriftHiveFetchAllResult_Ex_DEFAULT *HiveServerException
func (p *ThriftHiveFetchAllResult) GetEx() *HiveServerException {
  if !p.IsSetEx() {
    return ThriftHiveFetchAllResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *ThriftHiveFetchAllResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveFetchAllResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *ThriftHiveFetchAllResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveFetchAllResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem18 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem18 = v
}
    p.Success = append(p.Success, _elem18)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ThriftHiveFetchAllResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ex = &HiveServerException{}
  if err := p.Ex.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *ThriftHiveFetchAllResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("fetchAll_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveFetchAllResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveFetchAllResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *ThriftHiveFetchAllResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveFetchAllResult(%+v)", *p)
}

type ThriftHiveGetThriftSchemaArgs struct {
}

func NewThriftHiveGetThriftSchemaArgs() *ThriftHiveGetThriftSchemaArgs {
  return &ThriftHiveGetThriftSchemaArgs{}
}

func (p *ThriftHiveGetThriftSchemaArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveGetThriftSchemaArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getThriftSchema_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveGetThriftSchemaArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveGetThriftSchemaArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type ThriftHiveGetThriftSchemaResult struct {
  Success *hive_metastore.Schema `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *HiveServerException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewThriftHiveGetThriftSchemaResult() *ThriftHiveGetThriftSchemaResult {
  return &ThriftHiveGetThriftSchemaResult{}
}

var ThriftHiveGetThriftSchemaResult_Success_DEFAULT *hive_metastore.Schema
func (p *ThriftHiveGetThriftSchemaResult) GetSuccess() *hive_metastore.Schema {
  if !p.IsSetSuccess() {
    return ThriftHiveGetThriftSchemaResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveGetThriftSchemaResult_Ex_DEFAULT *HiveServerException
func (p *ThriftHiveGetThriftSchemaResult) GetEx() *HiveServerException {
  if !p.IsSetEx() {
    return ThriftHiveGetThriftSchemaResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *ThriftHiveGetThriftSchemaResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveGetThriftSchemaResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *ThriftHiveGetThriftSchemaResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveGetThriftSchemaResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &hive_metastore.Schema{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveGetThriftSchemaResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ex = &HiveServerException{}
  if err := p.Ex.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *ThriftHiveGetThriftSchemaResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getThriftSchema_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveGetThriftSchemaResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveGetThriftSchemaResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *ThriftHiveGetThriftSchemaResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveGetThriftSchemaResult(%+v)", *p)
}

type ThriftHiveGetClusterStatusArgs struct {
}

func NewThriftHiveGetClusterStatusArgs() *ThriftHiveGetClusterStatusArgs {
  return &ThriftHiveGetClusterStatusArgs{}
}

func (p *ThriftHiveGetClusterStatusArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveGetClusterStatusArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getClusterStatus_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveGetClusterStatusArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveGetClusterStatusArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type ThriftHiveGetClusterStatusResult struct {
  Success *HiveClusterStatus `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *HiveServerException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewThriftHiveGetClusterStatusResult() *ThriftHiveGetClusterStatusResult {
  return &ThriftHiveGetClusterStatusResult{}
}

var ThriftHiveGetClusterStatusResult_Success_DEFAULT *HiveClusterStatus
func (p *ThriftHiveGetClusterStatusResult) GetSuccess() *HiveClusterStatus {
  if !p.IsSetSuccess() {
    return ThriftHiveGetClusterStatusResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveGetClusterStatusResult_Ex_DEFAULT *HiveServerException
func (p *ThriftHiveGetClusterStatusResult) GetEx() *HiveServerException {
  if !p.IsSetEx() {
    return ThriftHiveGetClusterStatusResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *ThriftHiveGetClusterStatusResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveGetClusterStatusResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *ThriftHiveGetClusterStatusResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveGetClusterStatusResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &HiveClusterStatus{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveGetClusterStatusResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ex = &HiveServerException{}
  if err := p.Ex.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *ThriftHiveGetClusterStatusResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getClusterStatus_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveGetClusterStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveGetClusterStatusResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *ThriftHiveGetClusterStatusResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveGetClusterStatusResult(%+v)", *p)
}

type ThriftHiveGetQueryPlanArgs struct {
}

func NewThriftHiveGetQueryPlanArgs() *ThriftHiveGetQueryPlanArgs {
  return &ThriftHiveGetQueryPlanArgs{}
}

func (p *ThriftHiveGetQueryPlanArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveGetQueryPlanArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getQueryPlan_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveGetQueryPlanArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveGetQueryPlanArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type ThriftHiveGetQueryPlanResult struct {
  Success *queryplan.QueryPlan `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex *HiveServerException `thrift:"ex,1" db:"ex" json:"ex,omitempty"`
}

func NewThriftHiveGetQueryPlanResult() *ThriftHiveGetQueryPlanResult {
  return &ThriftHiveGetQueryPlanResult{}
}

var ThriftHiveGetQueryPlanResult_Success_DEFAULT *queryplan.QueryPlan
func (p *ThriftHiveGetQueryPlanResult) GetSuccess() *queryplan.QueryPlan {
  if !p.IsSetSuccess() {
    return ThriftHiveGetQueryPlanResult_Success_DEFAULT
  }
return p.Success
}
var ThriftHiveGetQueryPlanResult_Ex_DEFAULT *HiveServerException
func (p *ThriftHiveGetQueryPlanResult) GetEx() *HiveServerException {
  if !p.IsSetEx() {
    return ThriftHiveGetQueryPlanResult_Ex_DEFAULT
  }
return p.Ex
}
func (p *ThriftHiveGetQueryPlanResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThriftHiveGetQueryPlanResult) IsSetEx() bool {
  return p.Ex != nil
}

func (p *ThriftHiveGetQueryPlanResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveGetQueryPlanResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &queryplan.QueryPlan{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThriftHiveGetQueryPlanResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ex = &HiveServerException{}
  if err := p.Ex.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
  }
  return nil
}

func (p *ThriftHiveGetQueryPlanResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getQueryPlan_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveGetQueryPlanResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThriftHiveGetQueryPlanResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEx() {
    if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err) }
    if err := p.Ex.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err) }
  }
  return err
}

func (p *ThriftHiveGetQueryPlanResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveGetQueryPlanResult(%+v)", *p)
}

type ThriftHiveCleanArgs struct {
}

func NewThriftHiveCleanArgs() *ThriftHiveCleanArgs {
  return &ThriftHiveCleanArgs{}
}

func (p *ThriftHiveCleanArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveCleanArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("clean_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveCleanArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveCleanArgs(%+v)", *p)
}

type ThriftHiveCleanResult struct {
}

func NewThriftHiveCleanResult() *ThriftHiveCleanResult {
  return &ThriftHiveCleanResult{}
}

func (p *ThriftHiveCleanResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThriftHiveCleanResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("clean_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThriftHiveCleanResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThriftHiveCleanResult(%+v)", *p)
}


