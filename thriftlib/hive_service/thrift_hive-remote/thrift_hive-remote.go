// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
        "flag"
        "fmt"
        "math"
        "net"
        "net/url"
        "os"
        "strconv"
        "strings"
        "git.apache.org/thrift.git/lib/go/thrift"
	"fb303"
	"hive_metastore"
	"queryplan"
        "hive_service"
)

var _ = fb303.GoUnusedProtection__
var _ = hive_metastore.GoUnusedProtection__
var _ = queryplan.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  void execute(string query)")
  fmt.Fprintln(os.Stderr, "  string fetchOne()")
  fmt.Fprintln(os.Stderr, "   fetchN(i32 numRows)")
  fmt.Fprintln(os.Stderr, "   fetchAll()")
  fmt.Fprintln(os.Stderr, "  Schema getThriftSchema()")
  fmt.Fprintln(os.Stderr, "  HiveClusterStatus getClusterStatus()")
  fmt.Fprintln(os.Stderr, "  QueryPlan getQueryPlan()")
  fmt.Fprintln(os.Stderr, "  void clean()")
  fmt.Fprintln(os.Stderr, "  void create_database(Database database)")
  fmt.Fprintln(os.Stderr, "  Database get_database(string name)")
  fmt.Fprintln(os.Stderr, "  void drop_database(string name, bool deleteData)")
  fmt.Fprintln(os.Stderr, "   get_databases(string pattern)")
  fmt.Fprintln(os.Stderr, "   get_all_databases()")
  fmt.Fprintln(os.Stderr, "  void alter_database(string dbname, Database db)")
  fmt.Fprintln(os.Stderr, "  Type get_type(string name)")
  fmt.Fprintln(os.Stderr, "  bool create_type(Type type)")
  fmt.Fprintln(os.Stderr, "  bool drop_type(string type)")
  fmt.Fprintln(os.Stderr, "   get_type_all(string name)")
  fmt.Fprintln(os.Stderr, "   get_fields(string db_name, string table_name)")
  fmt.Fprintln(os.Stderr, "   get_schema(string db_name, string table_name)")
  fmt.Fprintln(os.Stderr, "  void create_table(Table tbl)")
  fmt.Fprintln(os.Stderr, "  void drop_table(string dbname, string name, bool deleteData)")
  fmt.Fprintln(os.Stderr, "   get_tables(string db_name, string pattern)")
  fmt.Fprintln(os.Stderr, "   get_all_tables(string db_name)")
  fmt.Fprintln(os.Stderr, "  Table get_table(string dbname, string tbl_name)")
  fmt.Fprintln(os.Stderr, "  void alter_table(string dbname, string tbl_name, Table new_tbl)")
  fmt.Fprintln(os.Stderr, "  Partition add_partition(Partition new_part)")
  fmt.Fprintln(os.Stderr, "  Partition append_partition(string db_name, string tbl_name,  part_vals)")
  fmt.Fprintln(os.Stderr, "  Partition append_partition_by_name(string db_name, string tbl_name, string part_name)")
  fmt.Fprintln(os.Stderr, "  bool drop_partition(string db_name, string tbl_name,  part_vals, bool deleteData)")
  fmt.Fprintln(os.Stderr, "  bool drop_partition_by_name(string db_name, string tbl_name, string part_name, bool deleteData)")
  fmt.Fprintln(os.Stderr, "  Partition get_partition(string db_name, string tbl_name,  part_vals)")
  fmt.Fprintln(os.Stderr, "  Partition get_partition_with_auth(string db_name, string tbl_name,  part_vals, string user_name,  group_names)")
  fmt.Fprintln(os.Stderr, "  Partition get_partition_by_name(string db_name, string tbl_name, string part_name)")
  fmt.Fprintln(os.Stderr, "   get_partitions(string db_name, string tbl_name, i16 max_parts)")
  fmt.Fprintln(os.Stderr, "   get_partitions_with_auth(string db_name, string tbl_name, i16 max_parts, string user_name,  group_names)")
  fmt.Fprintln(os.Stderr, "   get_partition_names(string db_name, string tbl_name, i16 max_parts)")
  fmt.Fprintln(os.Stderr, "   get_partitions_ps(string db_name, string tbl_name,  part_vals, i16 max_parts)")
  fmt.Fprintln(os.Stderr, "   get_partitions_ps_with_auth(string db_name, string tbl_name,  part_vals, i16 max_parts, string user_name,  group_names)")
  fmt.Fprintln(os.Stderr, "   get_partition_names_ps(string db_name, string tbl_name,  part_vals, i16 max_parts)")
  fmt.Fprintln(os.Stderr, "   get_partitions_by_filter(string db_name, string tbl_name, string filter, i16 max_parts)")
  fmt.Fprintln(os.Stderr, "  void alter_partition(string db_name, string tbl_name, Partition new_part)")
  fmt.Fprintln(os.Stderr, "  string get_config_value(string name, string defaultValue)")
  fmt.Fprintln(os.Stderr, "   partition_name_to_vals(string part_name)")
  fmt.Fprintln(os.Stderr, "   partition_name_to_spec(string part_name)")
  fmt.Fprintln(os.Stderr, "  Index add_index(Index new_index, Table index_table)")
  fmt.Fprintln(os.Stderr, "  void alter_index(string dbname, string base_tbl_name, string idx_name, Index new_idx)")
  fmt.Fprintln(os.Stderr, "  bool drop_index_by_name(string db_name, string tbl_name, string index_name, bool deleteData)")
  fmt.Fprintln(os.Stderr, "  Index get_index_by_name(string db_name, string tbl_name, string index_name)")
  fmt.Fprintln(os.Stderr, "   get_indexes(string db_name, string tbl_name, i16 max_indexes)")
  fmt.Fprintln(os.Stderr, "   get_index_names(string db_name, string tbl_name, i16 max_indexes)")
  fmt.Fprintln(os.Stderr, "  bool create_role(Role role)")
  fmt.Fprintln(os.Stderr, "  bool drop_role(string role_name)")
  fmt.Fprintln(os.Stderr, "   get_role_names()")
  fmt.Fprintln(os.Stderr, "  bool grant_role(string role_name, string principal_name, PrincipalType principal_type, string grantor, PrincipalType grantorType, bool grant_option)")
  fmt.Fprintln(os.Stderr, "  bool revoke_role(string role_name, string principal_name, PrincipalType principal_type)")
  fmt.Fprintln(os.Stderr, "   list_roles(string principal_name, PrincipalType principal_type)")
  fmt.Fprintln(os.Stderr, "  PrincipalPrivilegeSet get_privilege_set(HiveObjectRef hiveObject, string user_name,  group_names)")
  fmt.Fprintln(os.Stderr, "   list_privileges(string principal_name, PrincipalType principal_type, HiveObjectRef hiveObject)")
  fmt.Fprintln(os.Stderr, "  bool grant_privileges(PrivilegeBag privileges)")
  fmt.Fprintln(os.Stderr, "  bool revoke_privileges(PrivilegeBag privileges)")
  fmt.Fprintln(os.Stderr, "  string get_delegation_token(string renewer_kerberos_principal_name)")
  fmt.Fprintln(os.Stderr, "  string get_delegation_token_with_signature(string renewer_kerberos_principal_name, string token_signature)")
  fmt.Fprintln(os.Stderr, "  i64 renew_delegation_token(string token_str_form)")
  fmt.Fprintln(os.Stderr, "  void cancel_delegation_token(string token_str_form)")
  fmt.Fprintln(os.Stderr, "  string getName()")
  fmt.Fprintln(os.Stderr, "  string getVersion()")
  fmt.Fprintln(os.Stderr, "  fb_status getStatus()")
  fmt.Fprintln(os.Stderr, "  string getStatusDetails()")
  fmt.Fprintln(os.Stderr, "   getCounters()")
  fmt.Fprintln(os.Stderr, "  i64 getCounter(string key)")
  fmt.Fprintln(os.Stderr, "  void setOption(string key, string value)")
  fmt.Fprintln(os.Stderr, "  string getOption(string key)")
  fmt.Fprintln(os.Stderr, "   getOptions()")
  fmt.Fprintln(os.Stderr, "  string getCpuProfile(i32 profileDurationInSec)")
  fmt.Fprintln(os.Stderr, "  i64 aliveSince()")
  fmt.Fprintln(os.Stderr, "  void reinitialize()")
  fmt.Fprintln(os.Stderr, "  void shutdown()")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var parsedUrl url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Parse()
  
  if len(urlString) > 0 {
    parsedUrl, err := url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  client := hive_service.NewThriftHiveClientFactory(trans, protocolFactory)
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "execute":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Execute requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.Execute(value0))
    fmt.Print("\n")
    break
  case "fetchOne":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "FetchOne requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.FetchOne())
    fmt.Print("\n")
    break
  case "fetchN":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FetchN requires 1 args")
      flag.Usage()
    }
    tmp0, err20 := (strconv.Atoi(flag.Arg(1)))
    if err20 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.FetchN(value0))
    fmt.Print("\n")
    break
  case "fetchAll":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "FetchAll requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.FetchAll())
    fmt.Print("\n")
    break
  case "getThriftSchema":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetThriftSchema requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetThriftSchema())
    fmt.Print("\n")
    break
  case "getClusterStatus":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetClusterStatus requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetClusterStatus())
    fmt.Print("\n")
    break
  case "getQueryPlan":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetQueryPlan requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetQueryPlan())
    fmt.Print("\n")
    break
  case "clean":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "Clean requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.Clean())
    fmt.Print("\n")
    break
  case "create_database":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateDatabase requires 1 args")
      flag.Usage()
    }
    arg21 := flag.Arg(1)
    mbTrans22 := thrift.NewTMemoryBufferLen(len(arg21))
    defer mbTrans22.Close()
    _, err23 := mbTrans22.WriteString(arg21)
    if err23 != nil {
      Usage()
      return
    }
    factory24 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt25 := factory24.GetProtocol(mbTrans22)
    argvalue0 := hive_metastore.NewDatabase()
    err26 := argvalue0.Read(jsProt25)
    if err26 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateDatabase(value0))
    fmt.Print("\n")
    break
  case "get_database":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetDatabase requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetDatabase(value0))
    fmt.Print("\n")
    break
  case "drop_database":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "DropDatabase requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.DropDatabase(value0, value1))
    fmt.Print("\n")
    break
  case "get_databases":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetDatabases requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetDatabases(value0))
    fmt.Print("\n")
    break
  case "get_all_databases":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetAllDatabases requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetAllDatabases())
    fmt.Print("\n")
    break
  case "alter_database":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AlterDatabase requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg32 := flag.Arg(2)
    mbTrans33 := thrift.NewTMemoryBufferLen(len(arg32))
    defer mbTrans33.Close()
    _, err34 := mbTrans33.WriteString(arg32)
    if err34 != nil {
      Usage()
      return
    }
    factory35 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt36 := factory35.GetProtocol(mbTrans33)
    argvalue1 := hive_metastore.NewDatabase()
    err37 := argvalue1.Read(jsProt36)
    if err37 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.AlterDatabase(value0, value1))
    fmt.Print("\n")
    break
  case "get_type":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetType requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetType(value0))
    fmt.Print("\n")
    break
  case "create_type":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateType requires 1 args")
      flag.Usage()
    }
    arg39 := flag.Arg(1)
    mbTrans40 := thrift.NewTMemoryBufferLen(len(arg39))
    defer mbTrans40.Close()
    _, err41 := mbTrans40.WriteString(arg39)
    if err41 != nil {
      Usage()
      return
    }
    factory42 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt43 := factory42.GetProtocol(mbTrans40)
    argvalue0 := hive_metastore.NewType()
    err44 := argvalue0.Read(jsProt43)
    if err44 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateType(value0))
    fmt.Print("\n")
    break
  case "drop_type":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropType requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.DropType(value0))
    fmt.Print("\n")
    break
  case "get_type_all":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTypeAll requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetTypeAll(value0))
    fmt.Print("\n")
    break
  case "get_fields":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetFields requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetFields(value0, value1))
    fmt.Print("\n")
    break
  case "get_schema":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetSchema requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetSchema(value0, value1))
    fmt.Print("\n")
    break
  case "create_table":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateTable requires 1 args")
      flag.Usage()
    }
    arg51 := flag.Arg(1)
    mbTrans52 := thrift.NewTMemoryBufferLen(len(arg51))
    defer mbTrans52.Close()
    _, err53 := mbTrans52.WriteString(arg51)
    if err53 != nil {
      Usage()
      return
    }
    factory54 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt55 := factory54.GetProtocol(mbTrans52)
    argvalue0 := hive_metastore.NewTable()
    err56 := argvalue0.Read(jsProt55)
    if err56 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateTable(value0))
    fmt.Print("\n")
    break
  case "drop_table":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DropTable requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.DropTable(value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_tables":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetTables requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetTables(value0, value1))
    fmt.Print("\n")
    break
  case "get_all_tables":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetAllTables requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetAllTables(value0))
    fmt.Print("\n")
    break
  case "get_table":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetTable requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetTable(value0, value1))
    fmt.Print("\n")
    break
  case "alter_table":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AlterTable requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg67 := flag.Arg(3)
    mbTrans68 := thrift.NewTMemoryBufferLen(len(arg67))
    defer mbTrans68.Close()
    _, err69 := mbTrans68.WriteString(arg67)
    if err69 != nil {
      Usage()
      return
    }
    factory70 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt71 := factory70.GetProtocol(mbTrans68)
    argvalue2 := hive_metastore.NewTable()
    err72 := argvalue2.Read(jsProt71)
    if err72 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.AlterTable(value0, value1, value2))
    fmt.Print("\n")
    break
  case "add_partition":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddPartition requires 1 args")
      flag.Usage()
    }
    arg73 := flag.Arg(1)
    mbTrans74 := thrift.NewTMemoryBufferLen(len(arg73))
    defer mbTrans74.Close()
    _, err75 := mbTrans74.WriteString(arg73)
    if err75 != nil {
      Usage()
      return
    }
    factory76 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt77 := factory76.GetProtocol(mbTrans74)
    argvalue0 := hive_metastore.NewPartition()
    err78 := argvalue0.Read(jsProt77)
    if err78 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddPartition(value0))
    fmt.Print("\n")
    break
  case "append_partition":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AppendPartition requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg81 := flag.Arg(3)
    mbTrans82 := thrift.NewTMemoryBufferLen(len(arg81))
    defer mbTrans82.Close()
    _, err83 := mbTrans82.WriteString(arg81)
    if err83 != nil { 
      Usage()
      return
    }
    factory84 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt85 := factory84.GetProtocol(mbTrans82)
    containerStruct2 := hive_service.NewThriftHiveAppendPartitionArgs()
    err86 := containerStruct2.ReadField3(jsProt85)
    if err86 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    fmt.Print(client.AppendPartition(value0, value1, value2))
    fmt.Print("\n")
    break
  case "append_partition_by_name":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AppendPartitionByName requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.AppendPartitionByName(value0, value1, value2))
    fmt.Print("\n")
    break
  case "drop_partition":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DropPartition requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg92 := flag.Arg(3)
    mbTrans93 := thrift.NewTMemoryBufferLen(len(arg92))
    defer mbTrans93.Close()
    _, err94 := mbTrans93.WriteString(arg92)
    if err94 != nil { 
      Usage()
      return
    }
    factory95 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt96 := factory95.GetProtocol(mbTrans93)
    containerStruct2 := hive_service.NewThriftHiveDropPartitionArgs()
    err97 := containerStruct2.ReadField3(jsProt96)
    if err97 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    fmt.Print(client.DropPartition(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "drop_partition_by_name":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DropPartitionByName requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    fmt.Print(client.DropPartitionByName(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "get_partition":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPartition requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg105 := flag.Arg(3)
    mbTrans106 := thrift.NewTMemoryBufferLen(len(arg105))
    defer mbTrans106.Close()
    _, err107 := mbTrans106.WriteString(arg105)
    if err107 != nil { 
      Usage()
      return
    }
    factory108 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt109 := factory108.GetProtocol(mbTrans106)
    containerStruct2 := hive_service.NewThriftHiveGetPartitionArgs()
    err110 := containerStruct2.ReadField3(jsProt109)
    if err110 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    fmt.Print(client.GetPartition(value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_partition_with_auth":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "GetPartitionWithAuth requires 5 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg113 := flag.Arg(3)
    mbTrans114 := thrift.NewTMemoryBufferLen(len(arg113))
    defer mbTrans114.Close()
    _, err115 := mbTrans114.WriteString(arg113)
    if err115 != nil { 
      Usage()
      return
    }
    factory116 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt117 := factory116.GetProtocol(mbTrans114)
    containerStruct2 := hive_service.NewThriftHiveGetPartitionWithAuthArgs()
    err118 := containerStruct2.ReadField3(jsProt117)
    if err118 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    arg120 := flag.Arg(5)
    mbTrans121 := thrift.NewTMemoryBufferLen(len(arg120))
    defer mbTrans121.Close()
    _, err122 := mbTrans121.WriteString(arg120)
    if err122 != nil { 
      Usage()
      return
    }
    factory123 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt124 := factory123.GetProtocol(mbTrans121)
    containerStruct4 := hive_service.NewThriftHiveGetPartitionWithAuthArgs()
    err125 := containerStruct4.ReadField5(jsProt124)
    if err125 != nil {
      Usage()
      return
    }
    argvalue4 := containerStruct4.GroupNames
    value4 := argvalue4
    fmt.Print(client.GetPartitionWithAuth(value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "get_partition_by_name":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPartitionByName requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.GetPartitionByName(value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_partitions":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPartitions requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err131 := (strconv.Atoi(flag.Arg(3)))
    if err131 != nil {
      Usage()
      return
    }
    argvalue2 := int16(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetPartitions(value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_partitions_with_auth":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "GetPartitionsWithAuth requires 5 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err134 := (strconv.Atoi(flag.Arg(3)))
    if err134 != nil {
      Usage()
      return
    }
    argvalue2 := int16(tmp2)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    arg136 := flag.Arg(5)
    mbTrans137 := thrift.NewTMemoryBufferLen(len(arg136))
    defer mbTrans137.Close()
    _, err138 := mbTrans137.WriteString(arg136)
    if err138 != nil { 
      Usage()
      return
    }
    factory139 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt140 := factory139.GetProtocol(mbTrans137)
    containerStruct4 := hive_service.NewThriftHiveGetPartitionsWithAuthArgs()
    err141 := containerStruct4.ReadField5(jsProt140)
    if err141 != nil {
      Usage()
      return
    }
    argvalue4 := containerStruct4.GroupNames
    value4 := argvalue4
    fmt.Print(client.GetPartitionsWithAuth(value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "get_partition_names":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPartitionNames requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err144 := (strconv.Atoi(flag.Arg(3)))
    if err144 != nil {
      Usage()
      return
    }
    argvalue2 := int16(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetPartitionNames(value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_partitions_ps":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetPartitionsPs requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg147 := flag.Arg(3)
    mbTrans148 := thrift.NewTMemoryBufferLen(len(arg147))
    defer mbTrans148.Close()
    _, err149 := mbTrans148.WriteString(arg147)
    if err149 != nil { 
      Usage()
      return
    }
    factory150 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt151 := factory150.GetProtocol(mbTrans148)
    containerStruct2 := hive_service.NewThriftHiveGetPartitionsPsArgs()
    err152 := containerStruct2.ReadField3(jsProt151)
    if err152 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    tmp3, err153 := (strconv.Atoi(flag.Arg(4)))
    if err153 != nil {
      Usage()
      return
    }
    argvalue3 := int16(tmp3)
    value3 := argvalue3
    fmt.Print(client.GetPartitionsPs(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "get_partitions_ps_with_auth":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "GetPartitionsPsWithAuth requires 6 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg156 := flag.Arg(3)
    mbTrans157 := thrift.NewTMemoryBufferLen(len(arg156))
    defer mbTrans157.Close()
    _, err158 := mbTrans157.WriteString(arg156)
    if err158 != nil { 
      Usage()
      return
    }
    factory159 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt160 := factory159.GetProtocol(mbTrans157)
    containerStruct2 := hive_service.NewThriftHiveGetPartitionsPsWithAuthArgs()
    err161 := containerStruct2.ReadField3(jsProt160)
    if err161 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    tmp3, err162 := (strconv.Atoi(flag.Arg(4)))
    if err162 != nil {
      Usage()
      return
    }
    argvalue3 := int16(tmp3)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    arg164 := flag.Arg(6)
    mbTrans165 := thrift.NewTMemoryBufferLen(len(arg164))
    defer mbTrans165.Close()
    _, err166 := mbTrans165.WriteString(arg164)
    if err166 != nil { 
      Usage()
      return
    }
    factory167 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt168 := factory167.GetProtocol(mbTrans165)
    containerStruct5 := hive_service.NewThriftHiveGetPartitionsPsWithAuthArgs()
    err169 := containerStruct5.ReadField6(jsProt168)
    if err169 != nil {
      Usage()
      return
    }
    argvalue5 := containerStruct5.GroupNames
    value5 := argvalue5
    fmt.Print(client.GetPartitionsPsWithAuth(value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "get_partition_names_ps":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetPartitionNamesPs requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg172 := flag.Arg(3)
    mbTrans173 := thrift.NewTMemoryBufferLen(len(arg172))
    defer mbTrans173.Close()
    _, err174 := mbTrans173.WriteString(arg172)
    if err174 != nil { 
      Usage()
      return
    }
    factory175 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt176 := factory175.GetProtocol(mbTrans173)
    containerStruct2 := hive_service.NewThriftHiveGetPartitionNamesPsArgs()
    err177 := containerStruct2.ReadField3(jsProt176)
    if err177 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    tmp3, err178 := (strconv.Atoi(flag.Arg(4)))
    if err178 != nil {
      Usage()
      return
    }
    argvalue3 := int16(tmp3)
    value3 := argvalue3
    fmt.Print(client.GetPartitionNamesPs(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "get_partitions_by_filter":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetPartitionsByFilter requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    tmp3, err182 := (strconv.Atoi(flag.Arg(4)))
    if err182 != nil {
      Usage()
      return
    }
    argvalue3 := int16(tmp3)
    value3 := argvalue3
    fmt.Print(client.GetPartitionsByFilter(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "alter_partition":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AlterPartition requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg185 := flag.Arg(3)
    mbTrans186 := thrift.NewTMemoryBufferLen(len(arg185))
    defer mbTrans186.Close()
    _, err187 := mbTrans186.WriteString(arg185)
    if err187 != nil {
      Usage()
      return
    }
    factory188 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt189 := factory188.GetProtocol(mbTrans186)
    argvalue2 := hive_metastore.NewPartition()
    err190 := argvalue2.Read(jsProt189)
    if err190 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.AlterPartition(value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_config_value":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetConfigValue requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetConfigValue(value0, value1))
    fmt.Print("\n")
    break
  case "partition_name_to_vals":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PartitionNameToVals requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.PartitionNameToVals(value0))
    fmt.Print("\n")
    break
  case "partition_name_to_spec":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PartitionNameToSpec requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.PartitionNameToSpec(value0))
    fmt.Print("\n")
    break
  case "add_index":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AddIndex requires 2 args")
      flag.Usage()
    }
    arg195 := flag.Arg(1)
    mbTrans196 := thrift.NewTMemoryBufferLen(len(arg195))
    defer mbTrans196.Close()
    _, err197 := mbTrans196.WriteString(arg195)
    if err197 != nil {
      Usage()
      return
    }
    factory198 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt199 := factory198.GetProtocol(mbTrans196)
    argvalue0 := hive_metastore.NewIndex()
    err200 := argvalue0.Read(jsProt199)
    if err200 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg201 := flag.Arg(2)
    mbTrans202 := thrift.NewTMemoryBufferLen(len(arg201))
    defer mbTrans202.Close()
    _, err203 := mbTrans202.WriteString(arg201)
    if err203 != nil {
      Usage()
      return
    }
    factory204 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt205 := factory204.GetProtocol(mbTrans202)
    argvalue1 := hive_metastore.NewTable()
    err206 := argvalue1.Read(jsProt205)
    if err206 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.AddIndex(value0, value1))
    fmt.Print("\n")
    break
  case "alter_index":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AlterIndex requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    arg210 := flag.Arg(4)
    mbTrans211 := thrift.NewTMemoryBufferLen(len(arg210))
    defer mbTrans211.Close()
    _, err212 := mbTrans211.WriteString(arg210)
    if err212 != nil {
      Usage()
      return
    }
    factory213 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt214 := factory213.GetProtocol(mbTrans211)
    argvalue3 := hive_metastore.NewIndex()
    err215 := argvalue3.Read(jsProt214)
    if err215 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.AlterIndex(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "drop_index_by_name":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DropIndexByName requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    fmt.Print(client.DropIndexByName(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "get_index_by_name":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetIndexByName requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.GetIndexByName(value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_indexes":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetIndexes requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err225 := (strconv.Atoi(flag.Arg(3)))
    if err225 != nil {
      Usage()
      return
    }
    argvalue2 := int16(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetIndexes(value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_index_names":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetIndexNames requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err228 := (strconv.Atoi(flag.Arg(3)))
    if err228 != nil {
      Usage()
      return
    }
    argvalue2 := int16(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetIndexNames(value0, value1, value2))
    fmt.Print("\n")
    break
  case "create_role":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateRole requires 1 args")
      flag.Usage()
    }
    arg229 := flag.Arg(1)
    mbTrans230 := thrift.NewTMemoryBufferLen(len(arg229))
    defer mbTrans230.Close()
    _, err231 := mbTrans230.WriteString(arg229)
    if err231 != nil {
      Usage()
      return
    }
    factory232 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt233 := factory232.GetProtocol(mbTrans230)
    argvalue0 := hive_metastore.NewRole()
    err234 := argvalue0.Read(jsProt233)
    if err234 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateRole(value0))
    fmt.Print("\n")
    break
  case "drop_role":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropRole requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.DropRole(value0))
    fmt.Print("\n")
    break
  case "get_role_names":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetRoleNames requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetRoleNames())
    fmt.Print("\n")
    break
  case "grant_role":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "GrantRole requires 6 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := hive_service.PrincipalType(tmp2)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    tmp4, err := (strconv.Atoi(flag.Arg(5)))
    if err != nil {
      Usage()
     return
    }
    argvalue4 := hive_service.PrincipalType(tmp4)
    value4 := argvalue4
    argvalue5 := flag.Arg(6) == "true"
    value5 := argvalue5
    fmt.Print(client.GrantRole(value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "revoke_role":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "RevokeRole requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := hive_service.PrincipalType(tmp2)
    value2 := argvalue2
    fmt.Print(client.RevokeRole(value0, value1, value2))
    fmt.Print("\n")
    break
  case "list_roles":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ListRoles requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := hive_service.PrincipalType(tmp1)
    value1 := argvalue1
    fmt.Print(client.ListRoles(value0, value1))
    fmt.Print("\n")
    break
  case "get_privilege_set":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPrivilegeSet requires 3 args")
      flag.Usage()
    }
    arg243 := flag.Arg(1)
    mbTrans244 := thrift.NewTMemoryBufferLen(len(arg243))
    defer mbTrans244.Close()
    _, err245 := mbTrans244.WriteString(arg243)
    if err245 != nil {
      Usage()
      return
    }
    factory246 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt247 := factory246.GetProtocol(mbTrans244)
    argvalue0 := hive_metastore.NewHiveObjectRef()
    err248 := argvalue0.Read(jsProt247)
    if err248 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg250 := flag.Arg(3)
    mbTrans251 := thrift.NewTMemoryBufferLen(len(arg250))
    defer mbTrans251.Close()
    _, err252 := mbTrans251.WriteString(arg250)
    if err252 != nil { 
      Usage()
      return
    }
    factory253 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt254 := factory253.GetProtocol(mbTrans251)
    containerStruct2 := hive_service.NewThriftHiveGetPrivilegeSetArgs()
    err255 := containerStruct2.ReadField3(jsProt254)
    if err255 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.GroupNames
    value2 := argvalue2
    fmt.Print(client.GetPrivilegeSet(value0, value1, value2))
    fmt.Print("\n")
    break
  case "list_privileges":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "ListPrivileges requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := hive_service.PrincipalType(tmp1)
    value1 := argvalue1
    arg257 := flag.Arg(3)
    mbTrans258 := thrift.NewTMemoryBufferLen(len(arg257))
    defer mbTrans258.Close()
    _, err259 := mbTrans258.WriteString(arg257)
    if err259 != nil {
      Usage()
      return
    }
    factory260 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt261 := factory260.GetProtocol(mbTrans258)
    argvalue2 := hive_metastore.NewHiveObjectRef()
    err262 := argvalue2.Read(jsProt261)
    if err262 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.ListPrivileges(value0, value1, value2))
    fmt.Print("\n")
    break
  case "grant_privileges":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GrantPrivileges requires 1 args")
      flag.Usage()
    }
    arg263 := flag.Arg(1)
    mbTrans264 := thrift.NewTMemoryBufferLen(len(arg263))
    defer mbTrans264.Close()
    _, err265 := mbTrans264.WriteString(arg263)
    if err265 != nil {
      Usage()
      return
    }
    factory266 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt267 := factory266.GetProtocol(mbTrans264)
    argvalue0 := hive_metastore.NewPrivilegeBag()
    err268 := argvalue0.Read(jsProt267)
    if err268 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GrantPrivileges(value0))
    fmt.Print("\n")
    break
  case "revoke_privileges":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RevokePrivileges requires 1 args")
      flag.Usage()
    }
    arg269 := flag.Arg(1)
    mbTrans270 := thrift.NewTMemoryBufferLen(len(arg269))
    defer mbTrans270.Close()
    _, err271 := mbTrans270.WriteString(arg269)
    if err271 != nil {
      Usage()
      return
    }
    factory272 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt273 := factory272.GetProtocol(mbTrans270)
    argvalue0 := hive_metastore.NewPrivilegeBag()
    err274 := argvalue0.Read(jsProt273)
    if err274 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RevokePrivileges(value0))
    fmt.Print("\n")
    break
  case "get_delegation_token":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetDelegationToken requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetDelegationToken(value0))
    fmt.Print("\n")
    break
  case "get_delegation_token_with_signature":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetDelegationTokenWithSignature requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetDelegationTokenWithSignature(value0, value1))
    fmt.Print("\n")
    break
  case "renew_delegation_token":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RenewDelegationToken requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.RenewDelegationToken(value0))
    fmt.Print("\n")
    break
  case "cancel_delegation_token":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CancelDelegationToken requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.CancelDelegationToken(value0))
    fmt.Print("\n")
    break
  case "getName":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetName requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetName())
    fmt.Print("\n")
    break
  case "getVersion":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetVersion requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetVersion())
    fmt.Print("\n")
    break
  case "getStatus":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetStatus requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetStatus())
    fmt.Print("\n")
    break
  case "getStatusDetails":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetStatusDetails requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetStatusDetails())
    fmt.Print("\n")
    break
  case "getCounters":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetCounters requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetCounters())
    fmt.Print("\n")
    break
  case "getCounter":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetCounter requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetCounter(value0))
    fmt.Print("\n")
    break
  case "setOption":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SetOption requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetOption(value0, value1))
    fmt.Print("\n")
    break
  case "getOption":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetOption requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetOption(value0))
    fmt.Print("\n")
    break
  case "getOptions":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetOptions requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetOptions())
    fmt.Print("\n")
    break
  case "getCpuProfile":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetCpuProfile requires 1 args")
      flag.Usage()
    }
    tmp0, err284 := (strconv.Atoi(flag.Arg(1)))
    if err284 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetCpuProfile(value0))
    fmt.Print("\n")
    break
  case "aliveSince":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "AliveSince requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.AliveSince())
    fmt.Print("\n")
    break
  case "reinitialize":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "Reinitialize requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.Reinitialize())
    fmt.Print("\n")
    break
  case "shutdown":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "Shutdown requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.Shutdown())
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
