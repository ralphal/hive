// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package queryplan

import (
	"bytes"
	"database/sql/driver"
	"errors"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type AdjacencyType int64
const (
  AdjacencyType_CONJUNCTIVE AdjacencyType = 0
  AdjacencyType_DISJUNCTIVE AdjacencyType = 1
)

func (p AdjacencyType) String() string {
  switch p {
  case AdjacencyType_CONJUNCTIVE: return "CONJUNCTIVE"
  case AdjacencyType_DISJUNCTIVE: return "DISJUNCTIVE"
  }
  return "<UNSET>"
}

func AdjacencyTypeFromString(s string) (AdjacencyType, error) {
  switch s {
  case "CONJUNCTIVE": return AdjacencyType_CONJUNCTIVE, nil 
  case "DISJUNCTIVE": return AdjacencyType_DISJUNCTIVE, nil 
  }
  return AdjacencyType(0), fmt.Errorf("not a valid AdjacencyType string")
}


func AdjacencyTypePtr(v AdjacencyType) *AdjacencyType { return &v }

func (p AdjacencyType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *AdjacencyType) UnmarshalText(text []byte) error {
q, err := AdjacencyTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *AdjacencyType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = AdjacencyType(v)
return nil
}

func (p * AdjacencyType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type NodeType int64
const (
  NodeType_OPERATOR NodeType = 0
  NodeType_STAGE NodeType = 1
)

func (p NodeType) String() string {
  switch p {
  case NodeType_OPERATOR: return "OPERATOR"
  case NodeType_STAGE: return "STAGE"
  }
  return "<UNSET>"
}

func NodeTypeFromString(s string) (NodeType, error) {
  switch s {
  case "OPERATOR": return NodeType_OPERATOR, nil 
  case "STAGE": return NodeType_STAGE, nil 
  }
  return NodeType(0), fmt.Errorf("not a valid NodeType string")
}


func NodeTypePtr(v NodeType) *NodeType { return &v }

func (p NodeType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *NodeType) UnmarshalText(text []byte) error {
q, err := NodeTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *NodeType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = NodeType(v)
return nil
}

func (p * NodeType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type OperatorType int64
const (
  OperatorType_JOIN OperatorType = 0
  OperatorType_MAPJOIN OperatorType = 1
  OperatorType_EXTRACT OperatorType = 2
  OperatorType_FILTER OperatorType = 3
  OperatorType_FORWARD OperatorType = 4
  OperatorType_GROUPBY OperatorType = 5
  OperatorType_LIMIT OperatorType = 6
  OperatorType_SCRIPT OperatorType = 7
  OperatorType_SELECT OperatorType = 8
  OperatorType_TABLESCAN OperatorType = 9
  OperatorType_FILESINK OperatorType = 10
  OperatorType_REDUCESINK OperatorType = 11
  OperatorType_UNION OperatorType = 12
  OperatorType_UDTF OperatorType = 13
  OperatorType_LATERALVIEWJOIN OperatorType = 14
  OperatorType_LATERALVIEWFORWARD OperatorType = 15
  OperatorType_HASHTABLESINK OperatorType = 16
  OperatorType_HASHTABLEDUMMY OperatorType = 17
)

func (p OperatorType) String() string {
  switch p {
  case OperatorType_JOIN: return "JOIN"
  case OperatorType_MAPJOIN: return "MAPJOIN"
  case OperatorType_EXTRACT: return "EXTRACT"
  case OperatorType_FILTER: return "FILTER"
  case OperatorType_FORWARD: return "FORWARD"
  case OperatorType_GROUPBY: return "GROUPBY"
  case OperatorType_LIMIT: return "LIMIT"
  case OperatorType_SCRIPT: return "SCRIPT"
  case OperatorType_SELECT: return "SELECT"
  case OperatorType_TABLESCAN: return "TABLESCAN"
  case OperatorType_FILESINK: return "FILESINK"
  case OperatorType_REDUCESINK: return "REDUCESINK"
  case OperatorType_UNION: return "UNION"
  case OperatorType_UDTF: return "UDTF"
  case OperatorType_LATERALVIEWJOIN: return "LATERALVIEWJOIN"
  case OperatorType_LATERALVIEWFORWARD: return "LATERALVIEWFORWARD"
  case OperatorType_HASHTABLESINK: return "HASHTABLESINK"
  case OperatorType_HASHTABLEDUMMY: return "HASHTABLEDUMMY"
  }
  return "<UNSET>"
}

func OperatorTypeFromString(s string) (OperatorType, error) {
  switch s {
  case "JOIN": return OperatorType_JOIN, nil 
  case "MAPJOIN": return OperatorType_MAPJOIN, nil 
  case "EXTRACT": return OperatorType_EXTRACT, nil 
  case "FILTER": return OperatorType_FILTER, nil 
  case "FORWARD": return OperatorType_FORWARD, nil 
  case "GROUPBY": return OperatorType_GROUPBY, nil 
  case "LIMIT": return OperatorType_LIMIT, nil 
  case "SCRIPT": return OperatorType_SCRIPT, nil 
  case "SELECT": return OperatorType_SELECT, nil 
  case "TABLESCAN": return OperatorType_TABLESCAN, nil 
  case "FILESINK": return OperatorType_FILESINK, nil 
  case "REDUCESINK": return OperatorType_REDUCESINK, nil 
  case "UNION": return OperatorType_UNION, nil 
  case "UDTF": return OperatorType_UDTF, nil 
  case "LATERALVIEWJOIN": return OperatorType_LATERALVIEWJOIN, nil 
  case "LATERALVIEWFORWARD": return OperatorType_LATERALVIEWFORWARD, nil 
  case "HASHTABLESINK": return OperatorType_HASHTABLESINK, nil 
  case "HASHTABLEDUMMY": return OperatorType_HASHTABLEDUMMY, nil 
  }
  return OperatorType(0), fmt.Errorf("not a valid OperatorType string")
}


func OperatorTypePtr(v OperatorType) *OperatorType { return &v }

func (p OperatorType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *OperatorType) UnmarshalText(text []byte) error {
q, err := OperatorTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *OperatorType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = OperatorType(v)
return nil
}

func (p * OperatorType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type TaskType int64
const (
  TaskType_MAP TaskType = 0
  TaskType_REDUCE TaskType = 1
  TaskType_OTHER TaskType = 2
)

func (p TaskType) String() string {
  switch p {
  case TaskType_MAP: return "MAP"
  case TaskType_REDUCE: return "REDUCE"
  case TaskType_OTHER: return "OTHER"
  }
  return "<UNSET>"
}

func TaskTypeFromString(s string) (TaskType, error) {
  switch s {
  case "MAP": return TaskType_MAP, nil 
  case "REDUCE": return TaskType_REDUCE, nil 
  case "OTHER": return TaskType_OTHER, nil 
  }
  return TaskType(0), fmt.Errorf("not a valid TaskType string")
}


func TaskTypePtr(v TaskType) *TaskType { return &v }

func (p TaskType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TaskType) UnmarshalText(text []byte) error {
q, err := TaskTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TaskType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TaskType(v)
return nil
}

func (p * TaskType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type StageType int64
const (
  StageType_CONDITIONAL StageType = 0
  StageType_COPY StageType = 1
  StageType_DDL StageType = 2
  StageType_MAPRED StageType = 3
  StageType_EXPLAIN StageType = 4
  StageType_FETCH StageType = 5
  StageType_FUNC StageType = 6
  StageType_MAPREDLOCAL StageType = 7
  StageType_MOVE StageType = 8
  StageType_STATS StageType = 9
)

func (p StageType) String() string {
  switch p {
  case StageType_CONDITIONAL: return "CONDITIONAL"
  case StageType_COPY: return "COPY"
  case StageType_DDL: return "DDL"
  case StageType_MAPRED: return "MAPRED"
  case StageType_EXPLAIN: return "EXPLAIN"
  case StageType_FETCH: return "FETCH"
  case StageType_FUNC: return "FUNC"
  case StageType_MAPREDLOCAL: return "MAPREDLOCAL"
  case StageType_MOVE: return "MOVE"
  case StageType_STATS: return "STATS"
  }
  return "<UNSET>"
}

func StageTypeFromString(s string) (StageType, error) {
  switch s {
  case "CONDITIONAL": return StageType_CONDITIONAL, nil 
  case "COPY": return StageType_COPY, nil 
  case "DDL": return StageType_DDL, nil 
  case "MAPRED": return StageType_MAPRED, nil 
  case "EXPLAIN": return StageType_EXPLAIN, nil 
  case "FETCH": return StageType_FETCH, nil 
  case "FUNC": return StageType_FUNC, nil 
  case "MAPREDLOCAL": return StageType_MAPREDLOCAL, nil 
  case "MOVE": return StageType_MOVE, nil 
  case "STATS": return StageType_STATS, nil 
  }
  return StageType(0), fmt.Errorf("not a valid StageType string")
}


func StageTypePtr(v StageType) *StageType { return &v }

func (p StageType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *StageType) UnmarshalText(text []byte) error {
q, err := StageTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *StageType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = StageType(v)
return nil
}

func (p * StageType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - Node
//  - Children
//  - AdjacencyType
type Adjacency struct {
  Node string `thrift:"node,1" db:"node" json:"node"`
  Children []string `thrift:"children,2" db:"children" json:"children"`
  AdjacencyType AdjacencyType `thrift:"adjacencyType,3" db:"adjacencyType" json:"adjacencyType"`
}

func NewAdjacency() *Adjacency {
  return &Adjacency{}
}


func (p *Adjacency) GetNode() string {
  return p.Node
}

func (p *Adjacency) GetChildren() []string {
  return p.Children
}

func (p *Adjacency) GetAdjacencyType() AdjacencyType {
  return p.AdjacencyType
}
func (p *Adjacency) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Adjacency)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Node = v
}
  return nil
}

func (p *Adjacency)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Children =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.Children = append(p.Children, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Adjacency)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := AdjacencyType(v)
  p.AdjacencyType = temp
}
  return nil
}

func (p *Adjacency) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Adjacency"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Adjacency) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("node", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:node: ", p), err) }
  if err := oprot.WriteString(string(p.Node)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.node (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:node: ", p), err) }
  return err
}

func (p *Adjacency) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("children", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:children: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Children)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Children {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:children: ", p), err) }
  return err
}

func (p *Adjacency) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("adjacencyType", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:adjacencyType: ", p), err) }
  if err := oprot.WriteI32(int32(p.AdjacencyType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.adjacencyType (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:adjacencyType: ", p), err) }
  return err
}

func (p *Adjacency) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Adjacency(%+v)", *p)
}

// Attributes:
//  - NodeType
//  - Roots
//  - AdjacencyList
type Graph struct {
  NodeType NodeType `thrift:"nodeType,1" db:"nodeType" json:"nodeType"`
  Roots []string `thrift:"roots,2" db:"roots" json:"roots"`
  AdjacencyList []*Adjacency `thrift:"adjacencyList,3" db:"adjacencyList" json:"adjacencyList"`
}

func NewGraph() *Graph {
  return &Graph{}
}


func (p *Graph) GetNodeType() NodeType {
  return p.NodeType
}

func (p *Graph) GetRoots() []string {
  return p.Roots
}

func (p *Graph) GetAdjacencyList() []*Adjacency {
  return p.AdjacencyList
}
func (p *Graph) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Graph)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := NodeType(v)
  p.NodeType = temp
}
  return nil
}

func (p *Graph)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Roots =  tSlice
  for i := 0; i < size; i ++ {
var _elem1 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem1 = v
}
    p.Roots = append(p.Roots, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Graph)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Adjacency, 0, size)
  p.AdjacencyList =  tSlice
  for i := 0; i < size; i ++ {
    _elem2 := &Adjacency{}
    if err := _elem2.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
    }
    p.AdjacencyList = append(p.AdjacencyList, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Graph) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Graph"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Graph) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nodeType", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nodeType: ", p), err) }
  if err := oprot.WriteI32(int32(p.NodeType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nodeType (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nodeType: ", p), err) }
  return err
}

func (p *Graph) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("roots", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:roots: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Roots)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Roots {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:roots: ", p), err) }
  return err
}

func (p *Graph) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("adjacencyList", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:adjacencyList: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.AdjacencyList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.AdjacencyList {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:adjacencyList: ", p), err) }
  return err
}

func (p *Graph) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Graph(%+v)", *p)
}

// Attributes:
//  - OperatorId
//  - OperatorType
//  - OperatorAttributes
//  - OperatorCounters
//  - Done
//  - Started
type Operator struct {
  OperatorId string `thrift:"operatorId,1" db:"operatorId" json:"operatorId"`
  OperatorType OperatorType `thrift:"operatorType,2" db:"operatorType" json:"operatorType"`
  OperatorAttributes map[string]string `thrift:"operatorAttributes,3" db:"operatorAttributes" json:"operatorAttributes"`
  OperatorCounters map[string]int64 `thrift:"operatorCounters,4" db:"operatorCounters" json:"operatorCounters"`
  Done bool `thrift:"done,5" db:"done" json:"done"`
  Started bool `thrift:"started,6" db:"started" json:"started"`
}

func NewOperator() *Operator {
  return &Operator{}
}


func (p *Operator) GetOperatorId() string {
  return p.OperatorId
}

func (p *Operator) GetOperatorType() OperatorType {
  return p.OperatorType
}

func (p *Operator) GetOperatorAttributes() map[string]string {
  return p.OperatorAttributes
}

func (p *Operator) GetOperatorCounters() map[string]int64 {
  return p.OperatorCounters
}

func (p *Operator) GetDone() bool {
  return p.Done
}

func (p *Operator) GetStarted() bool {
  return p.Started
}
func (p *Operator) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Operator)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.OperatorId = v
}
  return nil
}

func (p *Operator)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := OperatorType(v)
  p.OperatorType = temp
}
  return nil
}

func (p *Operator)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.OperatorAttributes =  tMap
  for i := 0; i < size; i ++ {
var _key3 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key3 = v
}
var _val4 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val4 = v
}
    p.OperatorAttributes[_key3] = _val4
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Operator)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]int64, size)
  p.OperatorCounters =  tMap
  for i := 0; i < size; i ++ {
var _key5 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key5 = v
}
var _val6 int64
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val6 = v
}
    p.OperatorCounters[_key5] = _val6
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Operator)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Done = v
}
  return nil
}

func (p *Operator)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Started = v
}
  return nil
}

func (p *Operator) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Operator"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Operator) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("operatorId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:operatorId: ", p), err) }
  if err := oprot.WriteString(string(p.OperatorId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.operatorId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:operatorId: ", p), err) }
  return err
}

func (p *Operator) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("operatorType", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:operatorType: ", p), err) }
  if err := oprot.WriteI32(int32(p.OperatorType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.operatorType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:operatorType: ", p), err) }
  return err
}

func (p *Operator) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("operatorAttributes", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:operatorAttributes: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.OperatorAttributes)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.OperatorAttributes {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:operatorAttributes: ", p), err) }
  return err
}

func (p *Operator) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("operatorCounters", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:operatorCounters: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.I64, len(p.OperatorCounters)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.OperatorCounters {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteI64(int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:operatorCounters: ", p), err) }
  return err
}

func (p *Operator) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("done", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:done: ", p), err) }
  if err := oprot.WriteBool(bool(p.Done)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.done (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:done: ", p), err) }
  return err
}

func (p *Operator) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("started", thrift.BOOL, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:started: ", p), err) }
  if err := oprot.WriteBool(bool(p.Started)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.started (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:started: ", p), err) }
  return err
}

func (p *Operator) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Operator(%+v)", *p)
}

// Attributes:
//  - TaskId
//  - TaskType
//  - TaskAttributes
//  - TaskCounters
//  - OperatorGraph
//  - OperatorList
//  - Done
//  - Started
type Task struct {
  TaskId string `thrift:"taskId,1" db:"taskId" json:"taskId"`
  TaskType TaskType `thrift:"taskType,2" db:"taskType" json:"taskType"`
  TaskAttributes map[string]string `thrift:"taskAttributes,3" db:"taskAttributes" json:"taskAttributes"`
  TaskCounters map[string]int64 `thrift:"taskCounters,4" db:"taskCounters" json:"taskCounters"`
  OperatorGraph *Graph `thrift:"operatorGraph,5" db:"operatorGraph" json:"operatorGraph,omitempty"`
  OperatorList []*Operator `thrift:"operatorList,6" db:"operatorList" json:"operatorList,omitempty"`
  Done bool `thrift:"done,7" db:"done" json:"done"`
  Started bool `thrift:"started,8" db:"started" json:"started"`
}

func NewTask() *Task {
  return &Task{}
}


func (p *Task) GetTaskId() string {
  return p.TaskId
}

func (p *Task) GetTaskType() TaskType {
  return p.TaskType
}

func (p *Task) GetTaskAttributes() map[string]string {
  return p.TaskAttributes
}

func (p *Task) GetTaskCounters() map[string]int64 {
  return p.TaskCounters
}
var Task_OperatorGraph_DEFAULT *Graph
func (p *Task) GetOperatorGraph() *Graph {
  if !p.IsSetOperatorGraph() {
    return Task_OperatorGraph_DEFAULT
  }
return p.OperatorGraph
}
var Task_OperatorList_DEFAULT []*Operator

func (p *Task) GetOperatorList() []*Operator {
  return p.OperatorList
}

func (p *Task) GetDone() bool {
  return p.Done
}

func (p *Task) GetStarted() bool {
  return p.Started
}
func (p *Task) IsSetOperatorGraph() bool {
  return p.OperatorGraph != nil
}

func (p *Task) IsSetOperatorList() bool {
  return p.OperatorList != nil
}

func (p *Task) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Task)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TaskId = v
}
  return nil
}

func (p *Task)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TaskType(v)
  p.TaskType = temp
}
  return nil
}

func (p *Task)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.TaskAttributes =  tMap
  for i := 0; i < size; i ++ {
var _key7 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key7 = v
}
var _val8 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val8 = v
}
    p.TaskAttributes[_key7] = _val8
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Task)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]int64, size)
  p.TaskCounters =  tMap
  for i := 0; i < size; i ++ {
var _key9 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key9 = v
}
var _val10 int64
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val10 = v
}
    p.TaskCounters[_key9] = _val10
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Task)  ReadField5(iprot thrift.TProtocol) error {
  p.OperatorGraph = &Graph{}
  if err := p.OperatorGraph.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OperatorGraph), err)
  }
  return nil
}

func (p *Task)  ReadField6(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Operator, 0, size)
  p.OperatorList =  tSlice
  for i := 0; i < size; i ++ {
    _elem11 := &Operator{}
    if err := _elem11.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem11), err)
    }
    p.OperatorList = append(p.OperatorList, _elem11)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Task)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Done = v
}
  return nil
}

func (p *Task)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Started = v
}
  return nil
}

func (p *Task) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Task"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Task) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("taskId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:taskId: ", p), err) }
  if err := oprot.WriteString(string(p.TaskId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.taskId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:taskId: ", p), err) }
  return err
}

func (p *Task) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("taskType", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:taskType: ", p), err) }
  if err := oprot.WriteI32(int32(p.TaskType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.taskType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:taskType: ", p), err) }
  return err
}

func (p *Task) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("taskAttributes", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:taskAttributes: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.TaskAttributes)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.TaskAttributes {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:taskAttributes: ", p), err) }
  return err
}

func (p *Task) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("taskCounters", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:taskCounters: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.I64, len(p.TaskCounters)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.TaskCounters {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteI64(int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:taskCounters: ", p), err) }
  return err
}

func (p *Task) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetOperatorGraph() {
    if err := oprot.WriteFieldBegin("operatorGraph", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:operatorGraph: ", p), err) }
    if err := p.OperatorGraph.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OperatorGraph), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:operatorGraph: ", p), err) }
  }
  return err
}

func (p *Task) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetOperatorList() {
    if err := oprot.WriteFieldBegin("operatorList", thrift.LIST, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:operatorList: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.OperatorList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.OperatorList {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:operatorList: ", p), err) }
  }
  return err
}

func (p *Task) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("done", thrift.BOOL, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:done: ", p), err) }
  if err := oprot.WriteBool(bool(p.Done)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.done (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:done: ", p), err) }
  return err
}

func (p *Task) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("started", thrift.BOOL, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:started: ", p), err) }
  if err := oprot.WriteBool(bool(p.Started)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.started (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:started: ", p), err) }
  return err
}

func (p *Task) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Task(%+v)", *p)
}

// Attributes:
//  - StageId
//  - StageType
//  - StageAttributes
//  - StageCounters
//  - TaskList
//  - Done
//  - Started
type Stage struct {
  StageId string `thrift:"stageId,1" db:"stageId" json:"stageId"`
  StageType StageType `thrift:"stageType,2" db:"stageType" json:"stageType"`
  StageAttributes map[string]string `thrift:"stageAttributes,3" db:"stageAttributes" json:"stageAttributes"`
  StageCounters map[string]int64 `thrift:"stageCounters,4" db:"stageCounters" json:"stageCounters"`
  TaskList []*Task `thrift:"taskList,5" db:"taskList" json:"taskList"`
  Done bool `thrift:"done,6" db:"done" json:"done"`
  Started bool `thrift:"started,7" db:"started" json:"started"`
}

func NewStage() *Stage {
  return &Stage{}
}


func (p *Stage) GetStageId() string {
  return p.StageId
}

func (p *Stage) GetStageType() StageType {
  return p.StageType
}

func (p *Stage) GetStageAttributes() map[string]string {
  return p.StageAttributes
}

func (p *Stage) GetStageCounters() map[string]int64 {
  return p.StageCounters
}

func (p *Stage) GetTaskList() []*Task {
  return p.TaskList
}

func (p *Stage) GetDone() bool {
  return p.Done
}

func (p *Stage) GetStarted() bool {
  return p.Started
}
func (p *Stage) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Stage)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.StageId = v
}
  return nil
}

func (p *Stage)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := StageType(v)
  p.StageType = temp
}
  return nil
}

func (p *Stage)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.StageAttributes =  tMap
  for i := 0; i < size; i ++ {
var _key12 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key12 = v
}
var _val13 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val13 = v
}
    p.StageAttributes[_key12] = _val13
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Stage)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]int64, size)
  p.StageCounters =  tMap
  for i := 0; i < size; i ++ {
var _key14 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key14 = v
}
var _val15 int64
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val15 = v
}
    p.StageCounters[_key14] = _val15
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Stage)  ReadField5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Task, 0, size)
  p.TaskList =  tSlice
  for i := 0; i < size; i ++ {
    _elem16 := &Task{}
    if err := _elem16.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem16), err)
    }
    p.TaskList = append(p.TaskList, _elem16)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Stage)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Done = v
}
  return nil
}

func (p *Stage)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Started = v
}
  return nil
}

func (p *Stage) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Stage"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Stage) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("stageId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:stageId: ", p), err) }
  if err := oprot.WriteString(string(p.StageId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stageId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:stageId: ", p), err) }
  return err
}

func (p *Stage) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("stageType", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:stageType: ", p), err) }
  if err := oprot.WriteI32(int32(p.StageType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stageType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:stageType: ", p), err) }
  return err
}

func (p *Stage) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("stageAttributes", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:stageAttributes: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.StageAttributes)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.StageAttributes {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:stageAttributes: ", p), err) }
  return err
}

func (p *Stage) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("stageCounters", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:stageCounters: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.I64, len(p.StageCounters)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.StageCounters {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteI64(int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:stageCounters: ", p), err) }
  return err
}

func (p *Stage) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("taskList", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:taskList: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TaskList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.TaskList {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:taskList: ", p), err) }
  return err
}

func (p *Stage) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("done", thrift.BOOL, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:done: ", p), err) }
  if err := oprot.WriteBool(bool(p.Done)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.done (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:done: ", p), err) }
  return err
}

func (p *Stage) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("started", thrift.BOOL, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:started: ", p), err) }
  if err := oprot.WriteBool(bool(p.Started)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.started (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:started: ", p), err) }
  return err
}

func (p *Stage) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Stage(%+v)", *p)
}

// Attributes:
//  - QueryId
//  - QueryType
//  - QueryAttributes
//  - QueryCounters
//  - StageGraph
//  - StageList
//  - Done
//  - Started
type Query struct {
  QueryId string `thrift:"queryId,1" db:"queryId" json:"queryId"`
  QueryType string `thrift:"queryType,2" db:"queryType" json:"queryType"`
  QueryAttributes map[string]string `thrift:"queryAttributes,3" db:"queryAttributes" json:"queryAttributes"`
  QueryCounters map[string]int64 `thrift:"queryCounters,4" db:"queryCounters" json:"queryCounters"`
  StageGraph *Graph `thrift:"stageGraph,5" db:"stageGraph" json:"stageGraph"`
  StageList []*Stage `thrift:"stageList,6" db:"stageList" json:"stageList"`
  Done bool `thrift:"done,7" db:"done" json:"done"`
  Started bool `thrift:"started,8" db:"started" json:"started"`
}

func NewQuery() *Query {
  return &Query{}
}


func (p *Query) GetQueryId() string {
  return p.QueryId
}

func (p *Query) GetQueryType() string {
  return p.QueryType
}

func (p *Query) GetQueryAttributes() map[string]string {
  return p.QueryAttributes
}

func (p *Query) GetQueryCounters() map[string]int64 {
  return p.QueryCounters
}
var Query_StageGraph_DEFAULT *Graph
func (p *Query) GetStageGraph() *Graph {
  if !p.IsSetStageGraph() {
    return Query_StageGraph_DEFAULT
  }
return p.StageGraph
}

func (p *Query) GetStageList() []*Stage {
  return p.StageList
}

func (p *Query) GetDone() bool {
  return p.Done
}

func (p *Query) GetStarted() bool {
  return p.Started
}
func (p *Query) IsSetStageGraph() bool {
  return p.StageGraph != nil
}

func (p *Query) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Query)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.QueryId = v
}
  return nil
}

func (p *Query)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.QueryType = v
}
  return nil
}

func (p *Query)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.QueryAttributes =  tMap
  for i := 0; i < size; i ++ {
var _key17 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key17 = v
}
var _val18 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val18 = v
}
    p.QueryAttributes[_key17] = _val18
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Query)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]int64, size)
  p.QueryCounters =  tMap
  for i := 0; i < size; i ++ {
var _key19 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key19 = v
}
var _val20 int64
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val20 = v
}
    p.QueryCounters[_key19] = _val20
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Query)  ReadField5(iprot thrift.TProtocol) error {
  p.StageGraph = &Graph{}
  if err := p.StageGraph.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StageGraph), err)
  }
  return nil
}

func (p *Query)  ReadField6(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Stage, 0, size)
  p.StageList =  tSlice
  for i := 0; i < size; i ++ {
    _elem21 := &Stage{}
    if err := _elem21.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem21), err)
    }
    p.StageList = append(p.StageList, _elem21)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Query)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Done = v
}
  return nil
}

func (p *Query)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Started = v
}
  return nil
}

func (p *Query) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Query"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Query) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("queryId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:queryId: ", p), err) }
  if err := oprot.WriteString(string(p.QueryId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.queryId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:queryId: ", p), err) }
  return err
}

func (p *Query) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("queryType", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:queryType: ", p), err) }
  if err := oprot.WriteString(string(p.QueryType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.queryType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:queryType: ", p), err) }
  return err
}

func (p *Query) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("queryAttributes", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:queryAttributes: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.QueryAttributes)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.QueryAttributes {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:queryAttributes: ", p), err) }
  return err
}

func (p *Query) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("queryCounters", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:queryCounters: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.I64, len(p.QueryCounters)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.QueryCounters {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteI64(int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:queryCounters: ", p), err) }
  return err
}

func (p *Query) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("stageGraph", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:stageGraph: ", p), err) }
  if err := p.StageGraph.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StageGraph), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:stageGraph: ", p), err) }
  return err
}

func (p *Query) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("stageList", thrift.LIST, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:stageList: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.StageList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.StageList {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:stageList: ", p), err) }
  return err
}

func (p *Query) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("done", thrift.BOOL, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:done: ", p), err) }
  if err := oprot.WriteBool(bool(p.Done)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.done (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:done: ", p), err) }
  return err
}

func (p *Query) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("started", thrift.BOOL, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:started: ", p), err) }
  if err := oprot.WriteBool(bool(p.Started)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.started (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:started: ", p), err) }
  return err
}

func (p *Query) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Query(%+v)", *p)
}

// Attributes:
//  - Queries
//  - Done
//  - Started
type QueryPlan struct {
  Queries []*Query `thrift:"queries,1" db:"queries" json:"queries"`
  Done bool `thrift:"done,2" db:"done" json:"done"`
  Started bool `thrift:"started,3" db:"started" json:"started"`
}

func NewQueryPlan() *QueryPlan {
  return &QueryPlan{}
}


func (p *QueryPlan) GetQueries() []*Query {
  return p.Queries
}

func (p *QueryPlan) GetDone() bool {
  return p.Done
}

func (p *QueryPlan) GetStarted() bool {
  return p.Started
}
func (p *QueryPlan) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *QueryPlan)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Query, 0, size)
  p.Queries =  tSlice
  for i := 0; i < size; i ++ {
    _elem22 := &Query{}
    if err := _elem22.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem22), err)
    }
    p.Queries = append(p.Queries, _elem22)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *QueryPlan)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Done = v
}
  return nil
}

func (p *QueryPlan)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Started = v
}
  return nil
}

func (p *QueryPlan) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("QueryPlan"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *QueryPlan) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("queries", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:queries: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Queries)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Queries {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:queries: ", p), err) }
  return err
}

func (p *QueryPlan) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("done", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:done: ", p), err) }
  if err := oprot.WriteBool(bool(p.Done)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.done (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:done: ", p), err) }
  return err
}

func (p *QueryPlan) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("started", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:started: ", p), err) }
  if err := oprot.WriteBool(bool(p.Started)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.started (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:started: ", p), err) }
  return err
}

func (p *QueryPlan) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("QueryPlan(%+v)", *p)
}

