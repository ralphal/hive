// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package hive_service

import (
	"bytes"
	"fb303"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"hive_metastore"
	"queryplan"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = fb303.GoUnusedProtection__
var _ = hive_metastore.GoUnusedProtection__
var _ = queryplan.GoUnusedProtection__
var GoUnusedProtection__ int

type JobTrackerState int64

const (
	JobTrackerState_INITIALIZING JobTrackerState = 1
	JobTrackerState_RUNNING      JobTrackerState = 2
)

func (p JobTrackerState) String() string {
	switch p {
	case JobTrackerState_INITIALIZING:
		return "JobTrackerState_INITIALIZING"
	case JobTrackerState_RUNNING:
		return "JobTrackerState_RUNNING"
	}
	return "<UNSET>"
}

func JobTrackerStateFromString(s string) (JobTrackerState, error) {
	switch s {
	case "JobTrackerState_INITIALIZING":
		return JobTrackerState_INITIALIZING, nil
	case "JobTrackerState_RUNNING":
		return JobTrackerState_RUNNING, nil
	}
	return JobTrackerState(0), fmt.Errorf("not a valid JobTrackerState string")
}

func JobTrackerStatePtr(v JobTrackerState) *JobTrackerState { return &v }

type HiveClusterStatus struct {
	TaskTrackers   int32           `thrift:"taskTrackers,1" json:"taskTrackers"`
	MapTasks       int32           `thrift:"mapTasks,2" json:"mapTasks"`
	ReduceTasks    int32           `thrift:"reduceTasks,3" json:"reduceTasks"`
	MaxMapTasks    int32           `thrift:"maxMapTasks,4" json:"maxMapTasks"`
	MaxReduceTasks int32           `thrift:"maxReduceTasks,5" json:"maxReduceTasks"`
	State          JobTrackerState `thrift:"state,6" json:"state"`
}

func NewHiveClusterStatus() *HiveClusterStatus {
	return &HiveClusterStatus{}
}

func (p *HiveClusterStatus) GetTaskTrackers() int32 {
	return p.TaskTrackers
}

func (p *HiveClusterStatus) GetMapTasks() int32 {
	return p.MapTasks
}

func (p *HiveClusterStatus) GetReduceTasks() int32 {
	return p.ReduceTasks
}

func (p *HiveClusterStatus) GetMaxMapTasks() int32 {
	return p.MaxMapTasks
}

func (p *HiveClusterStatus) GetMaxReduceTasks() int32 {
	return p.MaxReduceTasks
}

func (p *HiveClusterStatus) GetState() JobTrackerState {
	return p.State
}
func (p *HiveClusterStatus) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *HiveClusterStatus) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TaskTrackers = v
	}
	return nil
}

func (p *HiveClusterStatus) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.MapTasks = v
	}
	return nil
}

func (p *HiveClusterStatus) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.ReduceTasks = v
	}
	return nil
}

func (p *HiveClusterStatus) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.MaxMapTasks = v
	}
	return nil
}

func (p *HiveClusterStatus) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.MaxReduceTasks = v
	}
	return nil
}

func (p *HiveClusterStatus) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		temp := JobTrackerState(v)
		p.State = temp
	}
	return nil
}

func (p *HiveClusterStatus) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("HiveClusterStatus"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *HiveClusterStatus) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("taskTrackers", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:taskTrackers: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.TaskTrackers)); err != nil {
		return fmt.Errorf("%T.taskTrackers (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:taskTrackers: %s", p, err)
	}
	return err
}

func (p *HiveClusterStatus) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mapTasks", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:mapTasks: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.MapTasks)); err != nil {
		return fmt.Errorf("%T.mapTasks (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:mapTasks: %s", p, err)
	}
	return err
}

func (p *HiveClusterStatus) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reduceTasks", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:reduceTasks: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ReduceTasks)); err != nil {
		return fmt.Errorf("%T.reduceTasks (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:reduceTasks: %s", p, err)
	}
	return err
}

func (p *HiveClusterStatus) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maxMapTasks", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:maxMapTasks: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.MaxMapTasks)); err != nil {
		return fmt.Errorf("%T.maxMapTasks (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:maxMapTasks: %s", p, err)
	}
	return err
}

func (p *HiveClusterStatus) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maxReduceTasks", thrift.I32, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:maxReduceTasks: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.MaxReduceTasks)); err != nil {
		return fmt.Errorf("%T.maxReduceTasks (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:maxReduceTasks: %s", p, err)
	}
	return err
}

func (p *HiveClusterStatus) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("state", thrift.I32, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:state: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.State)); err != nil {
		return fmt.Errorf("%T.state (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:state: %s", p, err)
	}
	return err
}

func (p *HiveClusterStatus) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HiveClusterStatus(%+v)", *p)
}

type HiveServerException struct {
	Message   string `thrift:"message,1" json:"message"`
	ErrorCode int32  `thrift:"errorCode,2" json:"errorCode"`
	SQLState  string `thrift:"SQLState,3" json:"SQLState"`
}

func NewHiveServerException() *HiveServerException {
	return &HiveServerException{}
}

func (p *HiveServerException) GetMessage() string {
	return p.Message
}

func (p *HiveServerException) GetErrorCode() int32 {
	return p.ErrorCode
}

func (p *HiveServerException) GetSQLState() string {
	return p.SQLState
}
func (p *HiveServerException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *HiveServerException) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *HiveServerException) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ErrorCode = v
	}
	return nil
}

func (p *HiveServerException) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.SQLState = v
	}
	return nil
}

func (p *HiveServerException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("HiveServerException"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *HiveServerException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:message: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return fmt.Errorf("%T.message (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:message: %s", p, err)
	}
	return err
}

func (p *HiveServerException) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("errorCode", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:errorCode: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
		return fmt.Errorf("%T.errorCode (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:errorCode: %s", p, err)
	}
	return err
}

func (p *HiveServerException) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SQLState", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:SQLState: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SQLState)); err != nil {
		return fmt.Errorf("%T.SQLState (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:SQLState: %s", p, err)
	}
	return err
}

func (p *HiveServerException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HiveServerException(%+v)", *p)
}

func (p *HiveServerException) Error() string {
	return p.String()
}
