// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package hive_metastore

import (
	"bytes"
	"fb303"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = fb303.GoUnusedProtection__
var GoUnusedProtection__ int

type HiveObjectType int64

const (
	HiveObjectType_GLOBAL    HiveObjectType = 1
	HiveObjectType_DATABASE  HiveObjectType = 2
	HiveObjectType_TABLE     HiveObjectType = 3
	HiveObjectType_PARTITION HiveObjectType = 4
	HiveObjectType_COLUMN    HiveObjectType = 5
)

func (p HiveObjectType) String() string {
	switch p {
	case HiveObjectType_GLOBAL:
		return "HiveObjectType_GLOBAL"
	case HiveObjectType_DATABASE:
		return "HiveObjectType_DATABASE"
	case HiveObjectType_TABLE:
		return "HiveObjectType_TABLE"
	case HiveObjectType_PARTITION:
		return "HiveObjectType_PARTITION"
	case HiveObjectType_COLUMN:
		return "HiveObjectType_COLUMN"
	}
	return "<UNSET>"
}

func HiveObjectTypeFromString(s string) (HiveObjectType, error) {
	switch s {
	case "HiveObjectType_GLOBAL":
		return HiveObjectType_GLOBAL, nil
	case "HiveObjectType_DATABASE":
		return HiveObjectType_DATABASE, nil
	case "HiveObjectType_TABLE":
		return HiveObjectType_TABLE, nil
	case "HiveObjectType_PARTITION":
		return HiveObjectType_PARTITION, nil
	case "HiveObjectType_COLUMN":
		return HiveObjectType_COLUMN, nil
	}
	return HiveObjectType(0), fmt.Errorf("not a valid HiveObjectType string")
}

func HiveObjectTypePtr(v HiveObjectType) *HiveObjectType { return &v }

type PrincipalType int64

const (
	PrincipalType_USER  PrincipalType = 1
	PrincipalType_ROLE  PrincipalType = 2
	PrincipalType_GROUP PrincipalType = 3
)

func (p PrincipalType) String() string {
	switch p {
	case PrincipalType_USER:
		return "PrincipalType_USER"
	case PrincipalType_ROLE:
		return "PrincipalType_ROLE"
	case PrincipalType_GROUP:
		return "PrincipalType_GROUP"
	}
	return "<UNSET>"
}

func PrincipalTypeFromString(s string) (PrincipalType, error) {
	switch s {
	case "PrincipalType_USER":
		return PrincipalType_USER, nil
	case "PrincipalType_ROLE":
		return PrincipalType_ROLE, nil
	case "PrincipalType_GROUP":
		return PrincipalType_GROUP, nil
	}
	return PrincipalType(0), fmt.Errorf("not a valid PrincipalType string")
}

func PrincipalTypePtr(v PrincipalType) *PrincipalType { return &v }

type Version struct {
	Version  string `thrift:"version,1" json:"version"`
	Comments string `thrift:"comments,2" json:"comments"`
}

func NewVersion() *Version {
	return &Version{}
}

func (p *Version) GetVersion() string {
	return p.Version
}

func (p *Version) GetComments() string {
	return p.Comments
}
func (p *Version) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Version) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Version = v
	}
	return nil
}

func (p *Version) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Comments = v
	}
	return nil
}

func (p *Version) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Version"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Version) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("version", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:version: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Version)); err != nil {
		return fmt.Errorf("%T.version (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:version: %s", p, err)
	}
	return err
}

func (p *Version) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("comments", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:comments: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Comments)); err != nil {
		return fmt.Errorf("%T.comments (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:comments: %s", p, err)
	}
	return err
}

func (p *Version) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Version(%+v)", *p)
}

type FieldSchema struct {
	Name    string `thrift:"name,1" json:"name"`
	TypeA1  string `thrift:"type,2" json:"type"`
	Comment string `thrift:"comment,3" json:"comment"`
}

func NewFieldSchema() *FieldSchema {
	return &FieldSchema{}
}

func (p *FieldSchema) GetName() string {
	return p.Name
}

func (p *FieldSchema) GetTypeA1() string {
	return p.TypeA1
}

func (p *FieldSchema) GetComment() string {
	return p.Comment
}
func (p *FieldSchema) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FieldSchema) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *FieldSchema) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TypeA1 = v
	}
	return nil
}

func (p *FieldSchema) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Comment = v
	}
	return nil
}

func (p *FieldSchema) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FieldSchema"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FieldSchema) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:name: %s", p, err)
	}
	return err
}

func (p *FieldSchema) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:type: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TypeA1)); err != nil {
		return fmt.Errorf("%T.type (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:type: %s", p, err)
	}
	return err
}

func (p *FieldSchema) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("comment", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:comment: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Comment)); err != nil {
		return fmt.Errorf("%T.comment (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:comment: %s", p, err)
	}
	return err
}

func (p *FieldSchema) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FieldSchema(%+v)", *p)
}

type Type struct {
	Name   string         `thrift:"name,1" json:"name"`
	Type1  *string        `thrift:"type1,2" json:"type1"`
	Type2  *string        `thrift:"type2,3" json:"type2"`
	Fields []*FieldSchema `thrift:"fields,4" json:"fields"`
}

func NewType() *Type {
	return &Type{}
}

func (p *Type) GetName() string {
	return p.Name
}

var Type_Type1_DEFAULT string

func (p *Type) GetType1() string {
	if !p.IsSetType1() {
		return Type_Type1_DEFAULT
	}
	return *p.Type1
}

var Type_Type2_DEFAULT string

func (p *Type) GetType2() string {
	if !p.IsSetType2() {
		return Type_Type2_DEFAULT
	}
	return *p.Type2
}

var Type_Fields_DEFAULT []*FieldSchema

func (p *Type) GetFields() []*FieldSchema {
	return p.Fields
}
func (p *Type) IsSetType1() bool {
	return p.Type1 != nil
}

func (p *Type) IsSetType2() bool {
	return p.Type2 != nil
}

func (p *Type) IsSetFields() bool {
	return p.Fields != nil
}

func (p *Type) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Type) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *Type) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Type1 = &v
	}
	return nil
}

func (p *Type) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Type2 = &v
	}
	return nil
}

func (p *Type) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*FieldSchema, 0, size)
	p.Fields = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &FieldSchema{}
		if err := _elem0.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem0, err)
		}
		p.Fields = append(p.Fields, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *Type) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Type"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Type) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:name: %s", p, err)
	}
	return err
}

func (p *Type) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetType1() {
		if err := oprot.WriteFieldBegin("type1", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:type1: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Type1)); err != nil {
			return fmt.Errorf("%T.type1 (2) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:type1: %s", p, err)
		}
	}
	return err
}

func (p *Type) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetType2() {
		if err := oprot.WriteFieldBegin("type2", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:type2: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Type2)); err != nil {
			return fmt.Errorf("%T.type2 (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:type2: %s", p, err)
		}
	}
	return err
}

func (p *Type) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetFields() {
		if err := oprot.WriteFieldBegin("fields", thrift.LIST, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:fields: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Fields)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Fields {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:fields: %s", p, err)
		}
	}
	return err
}

func (p *Type) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Type(%+v)", *p)
}

type HiveObjectRef struct {
	ObjectType HiveObjectType `thrift:"objectType,1" json:"objectType"`
	DbName     string         `thrift:"dbName,2" json:"dbName"`
	ObjectName string         `thrift:"objectName,3" json:"objectName"`
	PartValues []string       `thrift:"partValues,4" json:"partValues"`
	ColumnName string         `thrift:"columnName,5" json:"columnName"`
}

func NewHiveObjectRef() *HiveObjectRef {
	return &HiveObjectRef{}
}

func (p *HiveObjectRef) GetObjectType() HiveObjectType {
	return p.ObjectType
}

func (p *HiveObjectRef) GetDbName() string {
	return p.DbName
}

func (p *HiveObjectRef) GetObjectName() string {
	return p.ObjectName
}

func (p *HiveObjectRef) GetPartValues() []string {
	return p.PartValues
}

func (p *HiveObjectRef) GetColumnName() string {
	return p.ColumnName
}
func (p *HiveObjectRef) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *HiveObjectRef) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		temp := HiveObjectType(v)
		p.ObjectType = temp
	}
	return nil
}

func (p *HiveObjectRef) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *HiveObjectRef) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.ObjectName = v
	}
	return nil
}

func (p *HiveObjectRef) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.PartValues = tSlice
	for i := 0; i < size; i++ {
		var _elem1 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem1 = v
		}
		p.PartValues = append(p.PartValues, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *HiveObjectRef) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.ColumnName = v
	}
	return nil
}

func (p *HiveObjectRef) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("HiveObjectRef"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *HiveObjectRef) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("objectType", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:objectType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ObjectType)); err != nil {
		return fmt.Errorf("%T.objectType (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:objectType: %s", p, err)
	}
	return err
}

func (p *HiveObjectRef) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dbName", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:dbName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.dbName (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:dbName: %s", p, err)
	}
	return err
}

func (p *HiveObjectRef) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("objectName", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:objectName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ObjectName)); err != nil {
		return fmt.Errorf("%T.objectName (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:objectName: %s", p, err)
	}
	return err
}

func (p *HiveObjectRef) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("partValues", thrift.LIST, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:partValues: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.PartValues)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.PartValues {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:partValues: %s", p, err)
	}
	return err
}

func (p *HiveObjectRef) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("columnName", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:columnName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ColumnName)); err != nil {
		return fmt.Errorf("%T.columnName (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:columnName: %s", p, err)
	}
	return err
}

func (p *HiveObjectRef) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HiveObjectRef(%+v)", *p)
}

type PrivilegeGrantInfo struct {
	Privilege   string        `thrift:"privilege,1" json:"privilege"`
	CreateTime  int32         `thrift:"createTime,2" json:"createTime"`
	Grantor     string        `thrift:"grantor,3" json:"grantor"`
	GrantorType PrincipalType `thrift:"grantorType,4" json:"grantorType"`
	GrantOption bool          `thrift:"grantOption,5" json:"grantOption"`
}

func NewPrivilegeGrantInfo() *PrivilegeGrantInfo {
	return &PrivilegeGrantInfo{}
}

func (p *PrivilegeGrantInfo) GetPrivilege() string {
	return p.Privilege
}

func (p *PrivilegeGrantInfo) GetCreateTime() int32 {
	return p.CreateTime
}

func (p *PrivilegeGrantInfo) GetGrantor() string {
	return p.Grantor
}

func (p *PrivilegeGrantInfo) GetGrantorType() PrincipalType {
	return p.GrantorType
}

func (p *PrivilegeGrantInfo) GetGrantOption() bool {
	return p.GrantOption
}
func (p *PrivilegeGrantInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PrivilegeGrantInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Privilege = v
	}
	return nil
}

func (p *PrivilegeGrantInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *PrivilegeGrantInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Grantor = v
	}
	return nil
}

func (p *PrivilegeGrantInfo) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		temp := PrincipalType(v)
		p.GrantorType = temp
	}
	return nil
}

func (p *PrivilegeGrantInfo) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.GrantOption = v
	}
	return nil
}

func (p *PrivilegeGrantInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PrivilegeGrantInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PrivilegeGrantInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privilege", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:privilege: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Privilege)); err != nil {
		return fmt.Errorf("%T.privilege (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:privilege: %s", p, err)
	}
	return err
}

func (p *PrivilegeGrantInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createTime", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:createTime: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.CreateTime)); err != nil {
		return fmt.Errorf("%T.createTime (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:createTime: %s", p, err)
	}
	return err
}

func (p *PrivilegeGrantInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("grantor", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:grantor: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Grantor)); err != nil {
		return fmt.Errorf("%T.grantor (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:grantor: %s", p, err)
	}
	return err
}

func (p *PrivilegeGrantInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("grantorType", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:grantorType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.GrantorType)); err != nil {
		return fmt.Errorf("%T.grantorType (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:grantorType: %s", p, err)
	}
	return err
}

func (p *PrivilegeGrantInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("grantOption", thrift.BOOL, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:grantOption: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.GrantOption)); err != nil {
		return fmt.Errorf("%T.grantOption (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:grantOption: %s", p, err)
	}
	return err
}

func (p *PrivilegeGrantInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PrivilegeGrantInfo(%+v)", *p)
}

type HiveObjectPrivilege struct {
	HiveObject    *HiveObjectRef      `thrift:"hiveObject,1" json:"hiveObject"`
	PrincipalName string              `thrift:"principalName,2" json:"principalName"`
	PrincipalType PrincipalType       `thrift:"principalType,3" json:"principalType"`
	GrantInfo     *PrivilegeGrantInfo `thrift:"grantInfo,4" json:"grantInfo"`
}

func NewHiveObjectPrivilege() *HiveObjectPrivilege {
	return &HiveObjectPrivilege{}
}

var HiveObjectPrivilege_HiveObject_DEFAULT *HiveObjectRef

func (p *HiveObjectPrivilege) GetHiveObject() *HiveObjectRef {
	if !p.IsSetHiveObject() {
		return HiveObjectPrivilege_HiveObject_DEFAULT
	}
	return p.HiveObject
}

func (p *HiveObjectPrivilege) GetPrincipalName() string {
	return p.PrincipalName
}

func (p *HiveObjectPrivilege) GetPrincipalType() PrincipalType {
	return p.PrincipalType
}

var HiveObjectPrivilege_GrantInfo_DEFAULT *PrivilegeGrantInfo

func (p *HiveObjectPrivilege) GetGrantInfo() *PrivilegeGrantInfo {
	if !p.IsSetGrantInfo() {
		return HiveObjectPrivilege_GrantInfo_DEFAULT
	}
	return p.GrantInfo
}
func (p *HiveObjectPrivilege) IsSetHiveObject() bool {
	return p.HiveObject != nil
}

func (p *HiveObjectPrivilege) IsSetGrantInfo() bool {
	return p.GrantInfo != nil
}

func (p *HiveObjectPrivilege) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *HiveObjectPrivilege) ReadField1(iprot thrift.TProtocol) error {
	p.HiveObject = &HiveObjectRef{}
	if err := p.HiveObject.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.HiveObject, err)
	}
	return nil
}

func (p *HiveObjectPrivilege) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.PrincipalName = v
	}
	return nil
}

func (p *HiveObjectPrivilege) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		temp := PrincipalType(v)
		p.PrincipalType = temp
	}
	return nil
}

func (p *HiveObjectPrivilege) ReadField4(iprot thrift.TProtocol) error {
	p.GrantInfo = &PrivilegeGrantInfo{}
	if err := p.GrantInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.GrantInfo, err)
	}
	return nil
}

func (p *HiveObjectPrivilege) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("HiveObjectPrivilege"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *HiveObjectPrivilege) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hiveObject", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:hiveObject: %s", p, err)
	}
	if err := p.HiveObject.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.HiveObject, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:hiveObject: %s", p, err)
	}
	return err
}

func (p *HiveObjectPrivilege) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("principalName", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:principalName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PrincipalName)); err != nil {
		return fmt.Errorf("%T.principalName (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:principalName: %s", p, err)
	}
	return err
}

func (p *HiveObjectPrivilege) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("principalType", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:principalType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.PrincipalType)); err != nil {
		return fmt.Errorf("%T.principalType (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:principalType: %s", p, err)
	}
	return err
}

func (p *HiveObjectPrivilege) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("grantInfo", thrift.STRUCT, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:grantInfo: %s", p, err)
	}
	if err := p.GrantInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.GrantInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:grantInfo: %s", p, err)
	}
	return err
}

func (p *HiveObjectPrivilege) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HiveObjectPrivilege(%+v)", *p)
}

type PrivilegeBag struct {
	Privileges []*HiveObjectPrivilege `thrift:"privileges,1" json:"privileges"`
}

func NewPrivilegeBag() *PrivilegeBag {
	return &PrivilegeBag{}
}

func (p *PrivilegeBag) GetPrivileges() []*HiveObjectPrivilege {
	return p.Privileges
}
func (p *PrivilegeBag) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PrivilegeBag) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*HiveObjectPrivilege, 0, size)
	p.Privileges = tSlice
	for i := 0; i < size; i++ {
		_elem2 := &HiveObjectPrivilege{}
		if err := _elem2.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem2, err)
		}
		p.Privileges = append(p.Privileges, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *PrivilegeBag) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PrivilegeBag"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PrivilegeBag) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privileges", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:privileges: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Privileges)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Privileges {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:privileges: %s", p, err)
	}
	return err
}

func (p *PrivilegeBag) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PrivilegeBag(%+v)", *p)
}

type PrincipalPrivilegeSet struct {
	UserPrivileges  map[string][]*PrivilegeGrantInfo `thrift:"userPrivileges,1" json:"userPrivileges"`
	GroupPrivileges map[string][]*PrivilegeGrantInfo `thrift:"groupPrivileges,2" json:"groupPrivileges"`
	RolePrivileges  map[string][]*PrivilegeGrantInfo `thrift:"rolePrivileges,3" json:"rolePrivileges"`
}

func NewPrincipalPrivilegeSet() *PrincipalPrivilegeSet {
	return &PrincipalPrivilegeSet{}
}

func (p *PrincipalPrivilegeSet) GetUserPrivileges() map[string][]*PrivilegeGrantInfo {
	return p.UserPrivileges
}

func (p *PrincipalPrivilegeSet) GetGroupPrivileges() map[string][]*PrivilegeGrantInfo {
	return p.GroupPrivileges
}

func (p *PrincipalPrivilegeSet) GetRolePrivileges() map[string][]*PrivilegeGrantInfo {
	return p.RolePrivileges
}
func (p *PrincipalPrivilegeSet) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PrincipalPrivilegeSet) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string][]*PrivilegeGrantInfo, size)
	p.UserPrivileges = tMap
	for i := 0; i < size; i++ {
		var _key3 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key3 = v
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return fmt.Errorf("error reading list begin: %s", err)
		}
		tSlice := make([]*PrivilegeGrantInfo, 0, size)
		_val4 := tSlice
		for i := 0; i < size; i++ {
			_elem5 := &PrivilegeGrantInfo{}
			if err := _elem5.Read(iprot); err != nil {
				return fmt.Errorf("%T error reading struct: %s", _elem5, err)
			}
			_val4 = append(_val4, _elem5)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return fmt.Errorf("error reading list end: %s", err)
		}
		p.UserPrivileges[_key3] = _val4
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *PrincipalPrivilegeSet) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string][]*PrivilegeGrantInfo, size)
	p.GroupPrivileges = tMap
	for i := 0; i < size; i++ {
		var _key6 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key6 = v
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return fmt.Errorf("error reading list begin: %s", err)
		}
		tSlice := make([]*PrivilegeGrantInfo, 0, size)
		_val7 := tSlice
		for i := 0; i < size; i++ {
			_elem8 := &PrivilegeGrantInfo{}
			if err := _elem8.Read(iprot); err != nil {
				return fmt.Errorf("%T error reading struct: %s", _elem8, err)
			}
			_val7 = append(_val7, _elem8)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return fmt.Errorf("error reading list end: %s", err)
		}
		p.GroupPrivileges[_key6] = _val7
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *PrincipalPrivilegeSet) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string][]*PrivilegeGrantInfo, size)
	p.RolePrivileges = tMap
	for i := 0; i < size; i++ {
		var _key9 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key9 = v
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return fmt.Errorf("error reading list begin: %s", err)
		}
		tSlice := make([]*PrivilegeGrantInfo, 0, size)
		_val10 := tSlice
		for i := 0; i < size; i++ {
			_elem11 := &PrivilegeGrantInfo{}
			if err := _elem11.Read(iprot); err != nil {
				return fmt.Errorf("%T error reading struct: %s", _elem11, err)
			}
			_val10 = append(_val10, _elem11)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return fmt.Errorf("error reading list end: %s", err)
		}
		p.RolePrivileges[_key9] = _val10
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *PrincipalPrivilegeSet) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PrincipalPrivilegeSet"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PrincipalPrivilegeSet) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userPrivileges", thrift.MAP, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:userPrivileges: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.UserPrivileges)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.UserPrivileges {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range v {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:userPrivileges: %s", p, err)
	}
	return err
}

func (p *PrincipalPrivilegeSet) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupPrivileges", thrift.MAP, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:groupPrivileges: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.GroupPrivileges)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.GroupPrivileges {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range v {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:groupPrivileges: %s", p, err)
	}
	return err
}

func (p *PrincipalPrivilegeSet) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rolePrivileges", thrift.MAP, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:rolePrivileges: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.RolePrivileges)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.RolePrivileges {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range v {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:rolePrivileges: %s", p, err)
	}
	return err
}

func (p *PrincipalPrivilegeSet) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PrincipalPrivilegeSet(%+v)", *p)
}

type Role struct {
	RoleName   string `thrift:"roleName,1" json:"roleName"`
	CreateTime int32  `thrift:"createTime,2" json:"createTime"`
	OwnerName  string `thrift:"ownerName,3" json:"ownerName"`
}

func NewRole() *Role {
	return &Role{}
}

func (p *Role) GetRoleName() string {
	return p.RoleName
}

func (p *Role) GetCreateTime() int32 {
	return p.CreateTime
}

func (p *Role) GetOwnerName() string {
	return p.OwnerName
}
func (p *Role) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Role) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.RoleName = v
	}
	return nil
}

func (p *Role) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *Role) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.OwnerName = v
	}
	return nil
}

func (p *Role) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Role"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Role) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("roleName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:roleName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.RoleName)); err != nil {
		return fmt.Errorf("%T.roleName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:roleName: %s", p, err)
	}
	return err
}

func (p *Role) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createTime", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:createTime: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.CreateTime)); err != nil {
		return fmt.Errorf("%T.createTime (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:createTime: %s", p, err)
	}
	return err
}

func (p *Role) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ownerName", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:ownerName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.OwnerName)); err != nil {
		return fmt.Errorf("%T.ownerName (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:ownerName: %s", p, err)
	}
	return err
}

func (p *Role) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Role(%+v)", *p)
}

type Database struct {
	Name        string                 `thrift:"name,1" json:"name"`
	Description string                 `thrift:"description,2" json:"description"`
	LocationUri string                 `thrift:"locationUri,3" json:"locationUri"`
	Parameters  map[string]string      `thrift:"parameters,4" json:"parameters"`
	Privileges  *PrincipalPrivilegeSet `thrift:"privileges,5" json:"privileges"`
}

func NewDatabase() *Database {
	return &Database{}
}

func (p *Database) GetName() string {
	return p.Name
}

func (p *Database) GetDescription() string {
	return p.Description
}

func (p *Database) GetLocationUri() string {
	return p.LocationUri
}

func (p *Database) GetParameters() map[string]string {
	return p.Parameters
}

var Database_Privileges_DEFAULT *PrincipalPrivilegeSet

func (p *Database) GetPrivileges() *PrincipalPrivilegeSet {
	if !p.IsSetPrivileges() {
		return Database_Privileges_DEFAULT
	}
	return p.Privileges
}
func (p *Database) IsSetPrivileges() bool {
	return p.Privileges != nil
}

func (p *Database) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Database) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *Database) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Description = v
	}
	return nil
}

func (p *Database) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.LocationUri = v
	}
	return nil
}

func (p *Database) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.Parameters = tMap
	for i := 0; i < size; i++ {
		var _key12 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key12 = v
		}
		var _val13 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val13 = v
		}
		p.Parameters[_key12] = _val13
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *Database) ReadField5(iprot thrift.TProtocol) error {
	p.Privileges = &PrincipalPrivilegeSet{}
	if err := p.Privileges.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Privileges, err)
	}
	return nil
}

func (p *Database) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Database"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Database) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:name: %s", p, err)
	}
	return err
}

func (p *Database) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("description", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:description: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Description)); err != nil {
		return fmt.Errorf("%T.description (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:description: %s", p, err)
	}
	return err
}

func (p *Database) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("locationUri", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:locationUri: %s", p, err)
	}
	if err := oprot.WriteString(string(p.LocationUri)); err != nil {
		return fmt.Errorf("%T.locationUri (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:locationUri: %s", p, err)
	}
	return err
}

func (p *Database) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("parameters", thrift.MAP, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:parameters: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Parameters)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.Parameters {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:parameters: %s", p, err)
	}
	return err
}

func (p *Database) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrivileges() {
		if err := oprot.WriteFieldBegin("privileges", thrift.STRUCT, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:privileges: %s", p, err)
		}
		if err := p.Privileges.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Privileges, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:privileges: %s", p, err)
		}
	}
	return err
}

func (p *Database) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Database(%+v)", *p)
}

type SerDeInfo struct {
	Name             string            `thrift:"name,1" json:"name"`
	SerializationLib string            `thrift:"serializationLib,2" json:"serializationLib"`
	Parameters       map[string]string `thrift:"parameters,3" json:"parameters"`
}

func NewSerDeInfo() *SerDeInfo {
	return &SerDeInfo{}
}

func (p *SerDeInfo) GetName() string {
	return p.Name
}

func (p *SerDeInfo) GetSerializationLib() string {
	return p.SerializationLib
}

func (p *SerDeInfo) GetParameters() map[string]string {
	return p.Parameters
}
func (p *SerDeInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SerDeInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *SerDeInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.SerializationLib = v
	}
	return nil
}

func (p *SerDeInfo) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.Parameters = tMap
	for i := 0; i < size; i++ {
		var _key14 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key14 = v
		}
		var _val15 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val15 = v
		}
		p.Parameters[_key14] = _val15
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *SerDeInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SerDeInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SerDeInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:name: %s", p, err)
	}
	return err
}

func (p *SerDeInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("serializationLib", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:serializationLib: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SerializationLib)); err != nil {
		return fmt.Errorf("%T.serializationLib (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:serializationLib: %s", p, err)
	}
	return err
}

func (p *SerDeInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("parameters", thrift.MAP, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:parameters: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Parameters)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.Parameters {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:parameters: %s", p, err)
	}
	return err
}

func (p *SerDeInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SerDeInfo(%+v)", *p)
}

type Order struct {
	Col   string `thrift:"col,1" json:"col"`
	Order int32  `thrift:"order,2" json:"order"`
}

func NewOrder() *Order {
	return &Order{}
}

func (p *Order) GetCol() string {
	return p.Col
}

func (p *Order) GetOrder() int32 {
	return p.Order
}
func (p *Order) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Order) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Col = v
	}
	return nil
}

func (p *Order) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Order = v
	}
	return nil
}

func (p *Order) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Order"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Order) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("col", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:col: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Col)); err != nil {
		return fmt.Errorf("%T.col (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:col: %s", p, err)
	}
	return err
}

func (p *Order) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("order", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:order: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Order)); err != nil {
		return fmt.Errorf("%T.order (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:order: %s", p, err)
	}
	return err
}

func (p *Order) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Order(%+v)", *p)
}

type StorageDescriptor struct {
	Cols         []*FieldSchema    `thrift:"cols,1" json:"cols"`
	Location     string            `thrift:"location,2" json:"location"`
	InputFormat  string            `thrift:"inputFormat,3" json:"inputFormat"`
	OutputFormat string            `thrift:"outputFormat,4" json:"outputFormat"`
	Compressed   bool              `thrift:"compressed,5" json:"compressed"`
	NumBuckets   int32             `thrift:"numBuckets,6" json:"numBuckets"`
	SerdeInfo    *SerDeInfo        `thrift:"serdeInfo,7" json:"serdeInfo"`
	BucketCols   []string          `thrift:"bucketCols,8" json:"bucketCols"`
	SortCols     []*Order          `thrift:"sortCols,9" json:"sortCols"`
	Parameters   map[string]string `thrift:"parameters,10" json:"parameters"`
}

func NewStorageDescriptor() *StorageDescriptor {
	return &StorageDescriptor{}
}

func (p *StorageDescriptor) GetCols() []*FieldSchema {
	return p.Cols
}

func (p *StorageDescriptor) GetLocation() string {
	return p.Location
}

func (p *StorageDescriptor) GetInputFormat() string {
	return p.InputFormat
}

func (p *StorageDescriptor) GetOutputFormat() string {
	return p.OutputFormat
}

func (p *StorageDescriptor) GetCompressed() bool {
	return p.Compressed
}

func (p *StorageDescriptor) GetNumBuckets() int32 {
	return p.NumBuckets
}

var StorageDescriptor_SerdeInfo_DEFAULT *SerDeInfo

func (p *StorageDescriptor) GetSerdeInfo() *SerDeInfo {
	if !p.IsSetSerdeInfo() {
		return StorageDescriptor_SerdeInfo_DEFAULT
	}
	return p.SerdeInfo
}

func (p *StorageDescriptor) GetBucketCols() []string {
	return p.BucketCols
}

func (p *StorageDescriptor) GetSortCols() []*Order {
	return p.SortCols
}

func (p *StorageDescriptor) GetParameters() map[string]string {
	return p.Parameters
}
func (p *StorageDescriptor) IsSetSerdeInfo() bool {
	return p.SerdeInfo != nil
}

func (p *StorageDescriptor) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *StorageDescriptor) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*FieldSchema, 0, size)
	p.Cols = tSlice
	for i := 0; i < size; i++ {
		_elem16 := &FieldSchema{}
		if err := _elem16.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem16, err)
		}
		p.Cols = append(p.Cols, _elem16)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *StorageDescriptor) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Location = v
	}
	return nil
}

func (p *StorageDescriptor) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.InputFormat = v
	}
	return nil
}

func (p *StorageDescriptor) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.OutputFormat = v
	}
	return nil
}

func (p *StorageDescriptor) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Compressed = v
	}
	return nil
}

func (p *StorageDescriptor) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.NumBuckets = v
	}
	return nil
}

func (p *StorageDescriptor) ReadField7(iprot thrift.TProtocol) error {
	p.SerdeInfo = &SerDeInfo{}
	if err := p.SerdeInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.SerdeInfo, err)
	}
	return nil
}

func (p *StorageDescriptor) ReadField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.BucketCols = tSlice
	for i := 0; i < size; i++ {
		var _elem17 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem17 = v
		}
		p.BucketCols = append(p.BucketCols, _elem17)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *StorageDescriptor) ReadField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Order, 0, size)
	p.SortCols = tSlice
	for i := 0; i < size; i++ {
		_elem18 := &Order{}
		if err := _elem18.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem18, err)
		}
		p.SortCols = append(p.SortCols, _elem18)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *StorageDescriptor) ReadField10(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.Parameters = tMap
	for i := 0; i < size; i++ {
		var _key19 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key19 = v
		}
		var _val20 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val20 = v
		}
		p.Parameters[_key19] = _val20
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *StorageDescriptor) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("StorageDescriptor"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *StorageDescriptor) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("cols", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:cols: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Cols)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Cols {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:cols: %s", p, err)
	}
	return err
}

func (p *StorageDescriptor) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("location", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:location: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Location)); err != nil {
		return fmt.Errorf("%T.location (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:location: %s", p, err)
	}
	return err
}

func (p *StorageDescriptor) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("inputFormat", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:inputFormat: %s", p, err)
	}
	if err := oprot.WriteString(string(p.InputFormat)); err != nil {
		return fmt.Errorf("%T.inputFormat (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:inputFormat: %s", p, err)
	}
	return err
}

func (p *StorageDescriptor) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("outputFormat", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:outputFormat: %s", p, err)
	}
	if err := oprot.WriteString(string(p.OutputFormat)); err != nil {
		return fmt.Errorf("%T.outputFormat (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:outputFormat: %s", p, err)
	}
	return err
}

func (p *StorageDescriptor) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("compressed", thrift.BOOL, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:compressed: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Compressed)); err != nil {
		return fmt.Errorf("%T.compressed (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:compressed: %s", p, err)
	}
	return err
}

func (p *StorageDescriptor) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("numBuckets", thrift.I32, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:numBuckets: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.NumBuckets)); err != nil {
		return fmt.Errorf("%T.numBuckets (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:numBuckets: %s", p, err)
	}
	return err
}

func (p *StorageDescriptor) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("serdeInfo", thrift.STRUCT, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:serdeInfo: %s", p, err)
	}
	if err := p.SerdeInfo.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.SerdeInfo, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:serdeInfo: %s", p, err)
	}
	return err
}

func (p *StorageDescriptor) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bucketCols", thrift.LIST, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:bucketCols: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.BucketCols)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.BucketCols {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:bucketCols: %s", p, err)
	}
	return err
}

func (p *StorageDescriptor) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sortCols", thrift.LIST, 9); err != nil {
		return fmt.Errorf("%T write field begin error 9:sortCols: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SortCols)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.SortCols {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 9:sortCols: %s", p, err)
	}
	return err
}

func (p *StorageDescriptor) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("parameters", thrift.MAP, 10); err != nil {
		return fmt.Errorf("%T write field begin error 10:parameters: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Parameters)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.Parameters {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 10:parameters: %s", p, err)
	}
	return err
}

func (p *StorageDescriptor) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StorageDescriptor(%+v)", *p)
}

type Table struct {
	TableName        string                 `thrift:"tableName,1" json:"tableName"`
	DbName           string                 `thrift:"dbName,2" json:"dbName"`
	Owner            string                 `thrift:"owner,3" json:"owner"`
	CreateTime       int32                  `thrift:"createTime,4" json:"createTime"`
	LastAccessTime   int32                  `thrift:"lastAccessTime,5" json:"lastAccessTime"`
	Retention        int32                  `thrift:"retention,6" json:"retention"`
	Sd               *StorageDescriptor     `thrift:"sd,7" json:"sd"`
	PartitionKeys    []*FieldSchema         `thrift:"partitionKeys,8" json:"partitionKeys"`
	Parameters       map[string]string      `thrift:"parameters,9" json:"parameters"`
	ViewOriginalText string                 `thrift:"viewOriginalText,10" json:"viewOriginalText"`
	ViewExpandedText string                 `thrift:"viewExpandedText,11" json:"viewExpandedText"`
	TableType        string                 `thrift:"tableType,12" json:"tableType"`
	Privileges       *PrincipalPrivilegeSet `thrift:"privileges,13" json:"privileges"`
}

func NewTable() *Table {
	return &Table{}
}

func (p *Table) GetTableName() string {
	return p.TableName
}

func (p *Table) GetDbName() string {
	return p.DbName
}

func (p *Table) GetOwner() string {
	return p.Owner
}

func (p *Table) GetCreateTime() int32 {
	return p.CreateTime
}

func (p *Table) GetLastAccessTime() int32 {
	return p.LastAccessTime
}

func (p *Table) GetRetention() int32 {
	return p.Retention
}

var Table_Sd_DEFAULT *StorageDescriptor

func (p *Table) GetSd() *StorageDescriptor {
	if !p.IsSetSd() {
		return Table_Sd_DEFAULT
	}
	return p.Sd
}

func (p *Table) GetPartitionKeys() []*FieldSchema {
	return p.PartitionKeys
}

func (p *Table) GetParameters() map[string]string {
	return p.Parameters
}

func (p *Table) GetViewOriginalText() string {
	return p.ViewOriginalText
}

func (p *Table) GetViewExpandedText() string {
	return p.ViewExpandedText
}

func (p *Table) GetTableType() string {
	return p.TableType
}

var Table_Privileges_DEFAULT *PrincipalPrivilegeSet

func (p *Table) GetPrivileges() *PrincipalPrivilegeSet {
	if !p.IsSetPrivileges() {
		return Table_Privileges_DEFAULT
	}
	return p.Privileges
}
func (p *Table) IsSetSd() bool {
	return p.Sd != nil
}

func (p *Table) IsSetPrivileges() bool {
	return p.Privileges != nil
}

func (p *Table) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.ReadField13(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Table) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *Table) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *Table) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Owner = v
	}
	return nil
}

func (p *Table) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *Table) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.LastAccessTime = v
	}
	return nil
}

func (p *Table) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Retention = v
	}
	return nil
}

func (p *Table) ReadField7(iprot thrift.TProtocol) error {
	p.Sd = &StorageDescriptor{}
	if err := p.Sd.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Sd, err)
	}
	return nil
}

func (p *Table) ReadField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*FieldSchema, 0, size)
	p.PartitionKeys = tSlice
	for i := 0; i < size; i++ {
		_elem21 := &FieldSchema{}
		if err := _elem21.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem21, err)
		}
		p.PartitionKeys = append(p.PartitionKeys, _elem21)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *Table) ReadField9(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.Parameters = tMap
	for i := 0; i < size; i++ {
		var _key22 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key22 = v
		}
		var _val23 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val23 = v
		}
		p.Parameters[_key22] = _val23
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *Table) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		p.ViewOriginalText = v
	}
	return nil
}

func (p *Table) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 11: %s", err)
	} else {
		p.ViewExpandedText = v
	}
	return nil
}

func (p *Table) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 12: %s", err)
	} else {
		p.TableType = v
	}
	return nil
}

func (p *Table) ReadField13(iprot thrift.TProtocol) error {
	p.Privileges = &PrincipalPrivilegeSet{}
	if err := p.Privileges.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Privileges, err)
	}
	return nil
}

func (p *Table) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Table"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Table) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:tableName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return fmt.Errorf("%T.tableName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:tableName: %s", p, err)
	}
	return err
}

func (p *Table) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dbName", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:dbName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.dbName (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:dbName: %s", p, err)
	}
	return err
}

func (p *Table) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("owner", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:owner: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Owner)); err != nil {
		return fmt.Errorf("%T.owner (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:owner: %s", p, err)
	}
	return err
}

func (p *Table) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createTime", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:createTime: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.CreateTime)); err != nil {
		return fmt.Errorf("%T.createTime (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:createTime: %s", p, err)
	}
	return err
}

func (p *Table) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lastAccessTime", thrift.I32, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:lastAccessTime: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.LastAccessTime)); err != nil {
		return fmt.Errorf("%T.lastAccessTime (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:lastAccessTime: %s", p, err)
	}
	return err
}

func (p *Table) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("retention", thrift.I32, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:retention: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Retention)); err != nil {
		return fmt.Errorf("%T.retention (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:retention: %s", p, err)
	}
	return err
}

func (p *Table) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sd", thrift.STRUCT, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:sd: %s", p, err)
	}
	if err := p.Sd.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Sd, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:sd: %s", p, err)
	}
	return err
}

func (p *Table) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("partitionKeys", thrift.LIST, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:partitionKeys: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PartitionKeys)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.PartitionKeys {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:partitionKeys: %s", p, err)
	}
	return err
}

func (p *Table) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("parameters", thrift.MAP, 9); err != nil {
		return fmt.Errorf("%T write field begin error 9:parameters: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Parameters)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.Parameters {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 9:parameters: %s", p, err)
	}
	return err
}

func (p *Table) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("viewOriginalText", thrift.STRING, 10); err != nil {
		return fmt.Errorf("%T write field begin error 10:viewOriginalText: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ViewOriginalText)); err != nil {
		return fmt.Errorf("%T.viewOriginalText (10) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 10:viewOriginalText: %s", p, err)
	}
	return err
}

func (p *Table) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("viewExpandedText", thrift.STRING, 11); err != nil {
		return fmt.Errorf("%T write field begin error 11:viewExpandedText: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ViewExpandedText)); err != nil {
		return fmt.Errorf("%T.viewExpandedText (11) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 11:viewExpandedText: %s", p, err)
	}
	return err
}

func (p *Table) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableType", thrift.STRING, 12); err != nil {
		return fmt.Errorf("%T write field begin error 12:tableType: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TableType)); err != nil {
		return fmt.Errorf("%T.tableType (12) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 12:tableType: %s", p, err)
	}
	return err
}

func (p *Table) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrivileges() {
		if err := oprot.WriteFieldBegin("privileges", thrift.STRUCT, 13); err != nil {
			return fmt.Errorf("%T write field begin error 13:privileges: %s", p, err)
		}
		if err := p.Privileges.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Privileges, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 13:privileges: %s", p, err)
		}
	}
	return err
}

func (p *Table) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Table(%+v)", *p)
}

type Partition struct {
	Values         []string               `thrift:"values,1" json:"values"`
	DbName         string                 `thrift:"dbName,2" json:"dbName"`
	TableName      string                 `thrift:"tableName,3" json:"tableName"`
	CreateTime     int32                  `thrift:"createTime,4" json:"createTime"`
	LastAccessTime int32                  `thrift:"lastAccessTime,5" json:"lastAccessTime"`
	Sd             *StorageDescriptor     `thrift:"sd,6" json:"sd"`
	Parameters     map[string]string      `thrift:"parameters,7" json:"parameters"`
	Privileges     *PrincipalPrivilegeSet `thrift:"privileges,8" json:"privileges"`
}

func NewPartition() *Partition {
	return &Partition{}
}

func (p *Partition) GetValues() []string {
	return p.Values
}

func (p *Partition) GetDbName() string {
	return p.DbName
}

func (p *Partition) GetTableName() string {
	return p.TableName
}

func (p *Partition) GetCreateTime() int32 {
	return p.CreateTime
}

func (p *Partition) GetLastAccessTime() int32 {
	return p.LastAccessTime
}

var Partition_Sd_DEFAULT *StorageDescriptor

func (p *Partition) GetSd() *StorageDescriptor {
	if !p.IsSetSd() {
		return Partition_Sd_DEFAULT
	}
	return p.Sd
}

func (p *Partition) GetParameters() map[string]string {
	return p.Parameters
}

var Partition_Privileges_DEFAULT *PrincipalPrivilegeSet

func (p *Partition) GetPrivileges() *PrincipalPrivilegeSet {
	if !p.IsSetPrivileges() {
		return Partition_Privileges_DEFAULT
	}
	return p.Privileges
}
func (p *Partition) IsSetSd() bool {
	return p.Sd != nil
}

func (p *Partition) IsSetPrivileges() bool {
	return p.Privileges != nil
}

func (p *Partition) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Partition) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Values = tSlice
	for i := 0; i < size; i++ {
		var _elem24 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem24 = v
		}
		p.Values = append(p.Values, _elem24)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *Partition) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *Partition) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *Partition) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *Partition) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.LastAccessTime = v
	}
	return nil
}

func (p *Partition) ReadField6(iprot thrift.TProtocol) error {
	p.Sd = &StorageDescriptor{}
	if err := p.Sd.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Sd, err)
	}
	return nil
}

func (p *Partition) ReadField7(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.Parameters = tMap
	for i := 0; i < size; i++ {
		var _key25 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key25 = v
		}
		var _val26 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val26 = v
		}
		p.Parameters[_key25] = _val26
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *Partition) ReadField8(iprot thrift.TProtocol) error {
	p.Privileges = &PrincipalPrivilegeSet{}
	if err := p.Privileges.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Privileges, err)
	}
	return nil
}

func (p *Partition) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Partition"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Partition) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("values", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:values: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Values)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Values {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:values: %s", p, err)
	}
	return err
}

func (p *Partition) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dbName", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:dbName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.dbName (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:dbName: %s", p, err)
	}
	return err
}

func (p *Partition) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:tableName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return fmt.Errorf("%T.tableName (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:tableName: %s", p, err)
	}
	return err
}

func (p *Partition) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createTime", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:createTime: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.CreateTime)); err != nil {
		return fmt.Errorf("%T.createTime (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:createTime: %s", p, err)
	}
	return err
}

func (p *Partition) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lastAccessTime", thrift.I32, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:lastAccessTime: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.LastAccessTime)); err != nil {
		return fmt.Errorf("%T.lastAccessTime (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:lastAccessTime: %s", p, err)
	}
	return err
}

func (p *Partition) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sd", thrift.STRUCT, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:sd: %s", p, err)
	}
	if err := p.Sd.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Sd, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:sd: %s", p, err)
	}
	return err
}

func (p *Partition) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("parameters", thrift.MAP, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:parameters: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Parameters)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.Parameters {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:parameters: %s", p, err)
	}
	return err
}

func (p *Partition) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrivileges() {
		if err := oprot.WriteFieldBegin("privileges", thrift.STRUCT, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:privileges: %s", p, err)
		}
		if err := p.Privileges.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Privileges, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:privileges: %s", p, err)
		}
	}
	return err
}

func (p *Partition) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Partition(%+v)", *p)
}

type Index struct {
	IndexName         string             `thrift:"indexName,1" json:"indexName"`
	IndexHandlerClass string             `thrift:"indexHandlerClass,2" json:"indexHandlerClass"`
	DbName            string             `thrift:"dbName,3" json:"dbName"`
	OrigTableName     string             `thrift:"origTableName,4" json:"origTableName"`
	CreateTime        int32              `thrift:"createTime,5" json:"createTime"`
	LastAccessTime    int32              `thrift:"lastAccessTime,6" json:"lastAccessTime"`
	IndexTableName    string             `thrift:"indexTableName,7" json:"indexTableName"`
	Sd                *StorageDescriptor `thrift:"sd,8" json:"sd"`
	Parameters        map[string]string  `thrift:"parameters,9" json:"parameters"`
	DeferredRebuild   bool               `thrift:"deferredRebuild,10" json:"deferredRebuild"`
}

func NewIndex() *Index {
	return &Index{}
}

func (p *Index) GetIndexName() string {
	return p.IndexName
}

func (p *Index) GetIndexHandlerClass() string {
	return p.IndexHandlerClass
}

func (p *Index) GetDbName() string {
	return p.DbName
}

func (p *Index) GetOrigTableName() string {
	return p.OrigTableName
}

func (p *Index) GetCreateTime() int32 {
	return p.CreateTime
}

func (p *Index) GetLastAccessTime() int32 {
	return p.LastAccessTime
}

func (p *Index) GetIndexTableName() string {
	return p.IndexTableName
}

var Index_Sd_DEFAULT *StorageDescriptor

func (p *Index) GetSd() *StorageDescriptor {
	if !p.IsSetSd() {
		return Index_Sd_DEFAULT
	}
	return p.Sd
}

func (p *Index) GetParameters() map[string]string {
	return p.Parameters
}

func (p *Index) GetDeferredRebuild() bool {
	return p.DeferredRebuild
}
func (p *Index) IsSetSd() bool {
	return p.Sd != nil
}

func (p *Index) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Index) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.IndexName = v
	}
	return nil
}

func (p *Index) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.IndexHandlerClass = v
	}
	return nil
}

func (p *Index) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *Index) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.OrigTableName = v
	}
	return nil
}

func (p *Index) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *Index) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.LastAccessTime = v
	}
	return nil
}

func (p *Index) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.IndexTableName = v
	}
	return nil
}

func (p *Index) ReadField8(iprot thrift.TProtocol) error {
	p.Sd = &StorageDescriptor{}
	if err := p.Sd.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Sd, err)
	}
	return nil
}

func (p *Index) ReadField9(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.Parameters = tMap
	for i := 0; i < size; i++ {
		var _key27 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key27 = v
		}
		var _val28 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val28 = v
		}
		p.Parameters[_key27] = _val28
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *Index) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		p.DeferredRebuild = v
	}
	return nil
}

func (p *Index) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Index"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Index) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("indexName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:indexName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.IndexName)); err != nil {
		return fmt.Errorf("%T.indexName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:indexName: %s", p, err)
	}
	return err
}

func (p *Index) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("indexHandlerClass", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:indexHandlerClass: %s", p, err)
	}
	if err := oprot.WriteString(string(p.IndexHandlerClass)); err != nil {
		return fmt.Errorf("%T.indexHandlerClass (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:indexHandlerClass: %s", p, err)
	}
	return err
}

func (p *Index) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dbName", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:dbName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.dbName (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:dbName: %s", p, err)
	}
	return err
}

func (p *Index) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("origTableName", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:origTableName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.OrigTableName)); err != nil {
		return fmt.Errorf("%T.origTableName (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:origTableName: %s", p, err)
	}
	return err
}

func (p *Index) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("createTime", thrift.I32, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:createTime: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.CreateTime)); err != nil {
		return fmt.Errorf("%T.createTime (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:createTime: %s", p, err)
	}
	return err
}

func (p *Index) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lastAccessTime", thrift.I32, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:lastAccessTime: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.LastAccessTime)); err != nil {
		return fmt.Errorf("%T.lastAccessTime (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:lastAccessTime: %s", p, err)
	}
	return err
}

func (p *Index) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("indexTableName", thrift.STRING, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:indexTableName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.IndexTableName)); err != nil {
		return fmt.Errorf("%T.indexTableName (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:indexTableName: %s", p, err)
	}
	return err
}

func (p *Index) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sd", thrift.STRUCT, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:sd: %s", p, err)
	}
	if err := p.Sd.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Sd, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:sd: %s", p, err)
	}
	return err
}

func (p *Index) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("parameters", thrift.MAP, 9); err != nil {
		return fmt.Errorf("%T write field begin error 9:parameters: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Parameters)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.Parameters {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 9:parameters: %s", p, err)
	}
	return err
}

func (p *Index) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deferredRebuild", thrift.BOOL, 10); err != nil {
		return fmt.Errorf("%T write field begin error 10:deferredRebuild: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.DeferredRebuild)); err != nil {
		return fmt.Errorf("%T.deferredRebuild (10) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 10:deferredRebuild: %s", p, err)
	}
	return err
}

func (p *Index) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Index(%+v)", *p)
}

type Schema struct {
	FieldSchemas []*FieldSchema    `thrift:"fieldSchemas,1" json:"fieldSchemas"`
	Properties   map[string]string `thrift:"properties,2" json:"properties"`
}

func NewSchema() *Schema {
	return &Schema{}
}

func (p *Schema) GetFieldSchemas() []*FieldSchema {
	return p.FieldSchemas
}

func (p *Schema) GetProperties() map[string]string {
	return p.Properties
}
func (p *Schema) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Schema) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*FieldSchema, 0, size)
	p.FieldSchemas = tSlice
	for i := 0; i < size; i++ {
		_elem29 := &FieldSchema{}
		if err := _elem29.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem29, err)
		}
		p.FieldSchemas = append(p.FieldSchemas, _elem29)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *Schema) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.Properties = tMap
	for i := 0; i < size; i++ {
		var _key30 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key30 = v
		}
		var _val31 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val31 = v
		}
		p.Properties[_key30] = _val31
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *Schema) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Schema"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Schema) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fieldSchemas", thrift.LIST, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:fieldSchemas: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.FieldSchemas)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.FieldSchemas {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:fieldSchemas: %s", p, err)
	}
	return err
}

func (p *Schema) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("properties", thrift.MAP, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:properties: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Properties)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.Properties {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:properties: %s", p, err)
	}
	return err
}

func (p *Schema) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Schema(%+v)", *p)
}

type MetaException struct {
	Message string `thrift:"message,1" json:"message"`
}

func NewMetaException() *MetaException {
	return &MetaException{}
}

func (p *MetaException) GetMessage() string {
	return p.Message
}
func (p *MetaException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MetaException) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *MetaException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MetaException"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *MetaException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:message: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return fmt.Errorf("%T.message (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:message: %s", p, err)
	}
	return err
}

func (p *MetaException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetaException(%+v)", *p)
}

func (p *MetaException) Error() string {
	return p.String()
}

type UnknownTableException struct {
	Message string `thrift:"message,1" json:"message"`
}

func NewUnknownTableException() *UnknownTableException {
	return &UnknownTableException{}
}

func (p *UnknownTableException) GetMessage() string {
	return p.Message
}
func (p *UnknownTableException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UnknownTableException) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *UnknownTableException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UnknownTableException"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UnknownTableException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:message: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return fmt.Errorf("%T.message (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:message: %s", p, err)
	}
	return err
}

func (p *UnknownTableException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UnknownTableException(%+v)", *p)
}

func (p *UnknownTableException) Error() string {
	return p.String()
}

type UnknownDBException struct {
	Message string `thrift:"message,1" json:"message"`
}

func NewUnknownDBException() *UnknownDBException {
	return &UnknownDBException{}
}

func (p *UnknownDBException) GetMessage() string {
	return p.Message
}
func (p *UnknownDBException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UnknownDBException) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *UnknownDBException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UnknownDBException"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UnknownDBException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:message: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return fmt.Errorf("%T.message (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:message: %s", p, err)
	}
	return err
}

func (p *UnknownDBException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UnknownDBException(%+v)", *p)
}

func (p *UnknownDBException) Error() string {
	return p.String()
}

type AlreadyExistsException struct {
	Message string `thrift:"message,1" json:"message"`
}

func NewAlreadyExistsException() *AlreadyExistsException {
	return &AlreadyExistsException{}
}

func (p *AlreadyExistsException) GetMessage() string {
	return p.Message
}
func (p *AlreadyExistsException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AlreadyExistsException) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *AlreadyExistsException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AlreadyExistsException"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AlreadyExistsException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:message: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return fmt.Errorf("%T.message (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:message: %s", p, err)
	}
	return err
}

func (p *AlreadyExistsException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AlreadyExistsException(%+v)", *p)
}

func (p *AlreadyExistsException) Error() string {
	return p.String()
}

type InvalidObjectException struct {
	Message string `thrift:"message,1" json:"message"`
}

func NewInvalidObjectException() *InvalidObjectException {
	return &InvalidObjectException{}
}

func (p *InvalidObjectException) GetMessage() string {
	return p.Message
}
func (p *InvalidObjectException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *InvalidObjectException) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *InvalidObjectException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("InvalidObjectException"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *InvalidObjectException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:message: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return fmt.Errorf("%T.message (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:message: %s", p, err)
	}
	return err
}

func (p *InvalidObjectException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InvalidObjectException(%+v)", *p)
}

func (p *InvalidObjectException) Error() string {
	return p.String()
}

type NoSuchObjectException struct {
	Message string `thrift:"message,1" json:"message"`
}

func NewNoSuchObjectException() *NoSuchObjectException {
	return &NoSuchObjectException{}
}

func (p *NoSuchObjectException) GetMessage() string {
	return p.Message
}
func (p *NoSuchObjectException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *NoSuchObjectException) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *NoSuchObjectException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NoSuchObjectException"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *NoSuchObjectException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:message: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return fmt.Errorf("%T.message (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:message: %s", p, err)
	}
	return err
}

func (p *NoSuchObjectException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoSuchObjectException(%+v)", *p)
}

func (p *NoSuchObjectException) Error() string {
	return p.String()
}

type IndexAlreadyExistsException struct {
	Message string `thrift:"message,1" json:"message"`
}

func NewIndexAlreadyExistsException() *IndexAlreadyExistsException {
	return &IndexAlreadyExistsException{}
}

func (p *IndexAlreadyExistsException) GetMessage() string {
	return p.Message
}
func (p *IndexAlreadyExistsException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *IndexAlreadyExistsException) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *IndexAlreadyExistsException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("IndexAlreadyExistsException"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *IndexAlreadyExistsException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:message: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return fmt.Errorf("%T.message (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:message: %s", p, err)
	}
	return err
}

func (p *IndexAlreadyExistsException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IndexAlreadyExistsException(%+v)", *p)
}

func (p *IndexAlreadyExistsException) Error() string {
	return p.String()
}

type InvalidOperationException struct {
	Message string `thrift:"message,1" json:"message"`
}

func NewInvalidOperationException() *InvalidOperationException {
	return &InvalidOperationException{}
}

func (p *InvalidOperationException) GetMessage() string {
	return p.Message
}
func (p *InvalidOperationException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *InvalidOperationException) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *InvalidOperationException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("InvalidOperationException"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *InvalidOperationException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:message: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return fmt.Errorf("%T.message (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:message: %s", p, err)
	}
	return err
}

func (p *InvalidOperationException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InvalidOperationException(%+v)", *p)
}

func (p *InvalidOperationException) Error() string {
	return p.String()
}

type ConfigValSecurityException struct {
	Message string `thrift:"message,1" json:"message"`
}

func NewConfigValSecurityException() *ConfigValSecurityException {
	return &ConfigValSecurityException{}
}

func (p *ConfigValSecurityException) GetMessage() string {
	return p.Message
}
func (p *ConfigValSecurityException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ConfigValSecurityException) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *ConfigValSecurityException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ConfigValSecurityException"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ConfigValSecurityException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:message: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return fmt.Errorf("%T.message (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:message: %s", p, err)
	}
	return err
}

func (p *ConfigValSecurityException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ConfigValSecurityException(%+v)", *p)
}

func (p *ConfigValSecurityException) Error() string {
	return p.String()
}
