// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package hive_metastore

import (
	"bytes"
	"fb303"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = fb303.GoUnusedProtection__

type ThriftHiveMetastore interface {
	fb303.FacebookService
	//This interface is live.

	// Parameters:
	//  - Database
	CreateDatabase(database *Database) (err error)
	// Parameters:
	//  - Name
	GetDatabase(name string) (r *Database, err error)
	// Parameters:
	//  - Name
	//  - DeleteData
	DropDatabase(name string, deleteData bool) (err error)
	// Parameters:
	//  - Pattern
	GetDatabases(pattern string) (r []string, err error)
	GetAllDatabases() (r []string, err error)
	// Parameters:
	//  - Dbname
	//  - Db
	AlterDatabase(dbname string, db *Database) (err error)
	// Parameters:
	//  - Name
	GetType(name string) (r *Type, err error)
	// Parameters:
	//  - TypeA1
	CreateType(type_a1 *Type) (r bool, err error)
	// Parameters:
	//  - TypeA1
	DropType(type_a1 string) (r bool, err error)
	// Parameters:
	//  - Name
	GetTypeAll(name string) (r map[string]*Type, err error)
	// Parameters:
	//  - DbName
	//  - TableName
	GetFields(db_name string, table_name string) (r []*FieldSchema, err error)
	// Parameters:
	//  - DbName
	//  - TableName
	GetSchema(db_name string, table_name string) (r []*FieldSchema, err error)
	// Parameters:
	//  - Tbl
	CreateTable(tbl *Table) (err error)
	// Parameters:
	//  - Dbname
	//  - Name
	//  - DeleteData
	DropTable(dbname string, name string, deleteData bool) (err error)
	// Parameters:
	//  - DbName
	//  - Pattern
	GetTables(db_name string, pattern string) (r []string, err error)
	// Parameters:
	//  - DbName
	GetAllTables(db_name string) (r []string, err error)
	// Parameters:
	//  - Dbname
	//  - TblName
	GetTable(dbname string, tbl_name string) (r *Table, err error)
	// Parameters:
	//  - Dbname
	//  - TblName
	//  - NewTbl_
	AlterTable(dbname string, tbl_name string, new_tbl *Table) (err error)
	// Parameters:
	//  - NewPart_
	AddPartition(new_part *Partition) (r *Partition, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - PartVals
	AppendPartition(db_name string, tbl_name string, part_vals []string) (r *Partition, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - PartName
	AppendPartitionByName(db_name string, tbl_name string, part_name string) (r *Partition, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - PartVals
	//  - DeleteData
	DropPartition(db_name string, tbl_name string, part_vals []string, deleteData bool) (r bool, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - PartName
	//  - DeleteData
	DropPartitionByName(db_name string, tbl_name string, part_name string, deleteData bool) (r bool, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - PartVals
	GetPartition(db_name string, tbl_name string, part_vals []string) (r *Partition, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - PartVals
	//  - UserName
	//  - GroupNames
	GetPartitionWithAuth(db_name string, tbl_name string, part_vals []string, user_name string, group_names []string) (r *Partition, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - PartName
	GetPartitionByName(db_name string, tbl_name string, part_name string) (r *Partition, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - MaxParts
	GetPartitions(db_name string, tbl_name string, max_parts int16) (r []*Partition, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - MaxParts
	//  - UserName
	//  - GroupNames
	GetPartitionsWithAuth(db_name string, tbl_name string, max_parts int16, user_name string, group_names []string) (r []*Partition, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - MaxParts
	GetPartitionNames(db_name string, tbl_name string, max_parts int16) (r []string, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - PartVals
	//  - MaxParts
	GetPartitionsPs(db_name string, tbl_name string, part_vals []string, max_parts int16) (r []*Partition, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - PartVals
	//  - MaxParts
	//  - UserName
	//  - GroupNames
	GetPartitionsPsWithAuth(db_name string, tbl_name string, part_vals []string, max_parts int16, user_name string, group_names []string) (r []*Partition, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - PartVals
	//  - MaxParts
	GetPartitionNamesPs(db_name string, tbl_name string, part_vals []string, max_parts int16) (r []string, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - Filter
	//  - MaxParts
	GetPartitionsByFilter(db_name string, tbl_name string, filter string, max_parts int16) (r []*Partition, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - NewPart_
	AlterPartition(db_name string, tbl_name string, new_part *Partition) (err error)
	// Parameters:
	//  - Name
	//  - DefaultValue
	GetConfigValue(name string, defaultValue string) (r string, err error)
	// Parameters:
	//  - PartName
	PartitionNameToVals(part_name string) (r []string, err error)
	// Parameters:
	//  - PartName
	PartitionNameToSpec(part_name string) (r map[string]string, err error)
	// Parameters:
	//  - NewIndex_
	//  - IndexTable
	AddIndex(new_index *Index, index_table *Table) (r *Index, err error)
	// Parameters:
	//  - Dbname
	//  - BaseTblName
	//  - IdxName
	//  - NewIdx_
	AlterIndex(dbname string, base_tbl_name string, idx_name string, new_idx *Index) (err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - IndexName
	//  - DeleteData
	DropIndexByName(db_name string, tbl_name string, index_name string, deleteData bool) (r bool, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - IndexName
	GetIndexByName(db_name string, tbl_name string, index_name string) (r *Index, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - MaxIndexes
	GetIndexes(db_name string, tbl_name string, max_indexes int16) (r []*Index, err error)
	// Parameters:
	//  - DbName
	//  - TblName
	//  - MaxIndexes
	GetIndexNames(db_name string, tbl_name string, max_indexes int16) (r []string, err error)
	// Parameters:
	//  - Role
	CreateRole(role *Role) (r bool, err error)
	// Parameters:
	//  - RoleName
	DropRole(role_name string) (r bool, err error)
	GetRoleNames() (r []string, err error)
	// Parameters:
	//  - RoleName
	//  - PrincipalName
	//  - PrincipalType
	//  - Grantor
	//  - GrantorType
	//  - GrantOption
	GrantRole(role_name string, principal_name string, principal_type PrincipalType, grantor string, grantorType PrincipalType, grant_option bool) (r bool, err error)
	// Parameters:
	//  - RoleName
	//  - PrincipalName
	//  - PrincipalType
	RevokeRole(role_name string, principal_name string, principal_type PrincipalType) (r bool, err error)
	// Parameters:
	//  - PrincipalName
	//  - PrincipalType
	ListRoles(principal_name string, principal_type PrincipalType) (r []*Role, err error)
	// Parameters:
	//  - HiveObject
	//  - UserName
	//  - GroupNames
	GetPrivilegeSet(hiveObject *HiveObjectRef, user_name string, group_names []string) (r *PrincipalPrivilegeSet, err error)
	// Parameters:
	//  - PrincipalName
	//  - PrincipalType
	//  - HiveObject
	ListPrivileges(principal_name string, principal_type PrincipalType, hiveObject *HiveObjectRef) (r []*HiveObjectPrivilege, err error)
	// Parameters:
	//  - Privileges
	GrantPrivileges(privileges *PrivilegeBag) (r bool, err error)
	// Parameters:
	//  - Privileges
	RevokePrivileges(privileges *PrivilegeBag) (r bool, err error)
	// Parameters:
	//  - RenewerKerberosPrincipalName
	GetDelegationToken(renewer_kerberos_principal_name string) (r string, err error)
	// Parameters:
	//  - RenewerKerberosPrincipalName
	//  - TokenSignature
	GetDelegationTokenWithSignature(renewer_kerberos_principal_name string, token_signature string) (r string, err error)
	// Parameters:
	//  - TokenStrForm
	RenewDelegationToken(token_str_form string) (r int64, err error)
	// Parameters:
	//  - TokenStrForm
	CancelDelegationToken(token_str_form string) (err error)
}

//This interface is live.
type ThriftHiveMetastoreClient struct {
	*fb303.FacebookServiceClient
}

func NewThriftHiveMetastoreClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ThriftHiveMetastoreClient {
	return &ThriftHiveMetastoreClient{FacebookServiceClient: fb303.NewFacebookServiceClientFactory(t, f)}
}

func NewThriftHiveMetastoreClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ThriftHiveMetastoreClient {
	return &ThriftHiveMetastoreClient{FacebookServiceClient: fb303.NewFacebookServiceClientProtocol(t, iprot, oprot)}
}

// Parameters:
//  - Database
func (p *ThriftHiveMetastoreClient) CreateDatabase(database *Database) (err error) {
	if err = p.sendCreateDatabase(database); err != nil {
		return
	}
	return p.recvCreateDatabase()
}

func (p *ThriftHiveMetastoreClient) sendCreateDatabase(database *Database) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("create_database", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CreateDatabaseArgs{
		Database: database,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvCreateDatabase() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error32 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error33 error
		error33, err = error32.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error33
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "create_database failed: out of sequence response")
		return
	}
	result := CreateDatabaseResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	} else if result.O3 != nil {
		err = result.O3
		return
	}
	return
}

// Parameters:
//  - Name
func (p *ThriftHiveMetastoreClient) GetDatabase(name string) (r *Database, err error) {
	if err = p.sendGetDatabase(name); err != nil {
		return
	}
	return p.recvGetDatabase()
}

func (p *ThriftHiveMetastoreClient) sendGetDatabase(name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_database", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetDatabaseArgs{
		Name: name,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetDatabase() (value *Database, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error34 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error35 error
		error35, err = error34.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error35
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_database failed: out of sequence response")
		return
	}
	result := GetDatabaseResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Name
//  - DeleteData
func (p *ThriftHiveMetastoreClient) DropDatabase(name string, deleteData bool) (err error) {
	if err = p.sendDropDatabase(name, deleteData); err != nil {
		return
	}
	return p.recvDropDatabase()
}

func (p *ThriftHiveMetastoreClient) sendDropDatabase(name string, deleteData bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("drop_database", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DropDatabaseArgs{
		Name:       name,
		DeleteData: deleteData,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvDropDatabase() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error36 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error37 error
		error37, err = error36.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error37
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "drop_database failed: out of sequence response")
		return
	}
	result := DropDatabaseResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	} else if result.O3 != nil {
		err = result.O3
		return
	}
	return
}

// Parameters:
//  - Pattern
func (p *ThriftHiveMetastoreClient) GetDatabases(pattern string) (r []string, err error) {
	if err = p.sendGetDatabases(pattern); err != nil {
		return
	}
	return p.recvGetDatabases()
}

func (p *ThriftHiveMetastoreClient) sendGetDatabases(pattern string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_databases", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetDatabasesArgs{
		Pattern: pattern,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetDatabases() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error38 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error39 error
		error39, err = error38.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error39
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_databases failed: out of sequence response")
		return
	}
	result := GetDatabasesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

func (p *ThriftHiveMetastoreClient) GetAllDatabases() (r []string, err error) {
	if err = p.sendGetAllDatabases(); err != nil {
		return
	}
	return p.recvGetAllDatabases()
}

func (p *ThriftHiveMetastoreClient) sendGetAllDatabases() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_all_databases", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetAllDatabasesArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetAllDatabases() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error40 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error41 error
		error41, err = error40.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error41
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_all_databases failed: out of sequence response")
		return
	}
	result := GetAllDatabasesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Dbname
//  - Db
func (p *ThriftHiveMetastoreClient) AlterDatabase(dbname string, db *Database) (err error) {
	if err = p.sendAlterDatabase(dbname, db); err != nil {
		return
	}
	return p.recvAlterDatabase()
}

func (p *ThriftHiveMetastoreClient) sendAlterDatabase(dbname string, db *Database) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("alter_database", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AlterDatabaseArgs{
		Dbname: dbname,
		Db:     db,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvAlterDatabase() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error42 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error43 error
		error43, err = error42.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error43
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "alter_database failed: out of sequence response")
		return
	}
	result := AlterDatabaseResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	return
}

// Parameters:
//  - Name
func (p *ThriftHiveMetastoreClient) GetType(name string) (r *Type, err error) {
	if err = p.sendGetType(name); err != nil {
		return
	}
	return p.recvGetType()
}

func (p *ThriftHiveMetastoreClient) sendGetType(name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_type", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetTypeArgs{
		Name: name,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetType() (value *Type, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error44 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error45 error
		error45, err = error44.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error45
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_type failed: out of sequence response")
		return
	}
	result := GetTypeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - TypeA1
func (p *ThriftHiveMetastoreClient) CreateType(type_a1 *Type) (r bool, err error) {
	if err = p.sendCreateType(type_a1); err != nil {
		return
	}
	return p.recvCreateType()
}

func (p *ThriftHiveMetastoreClient) sendCreateType(type_a1 *Type) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("create_type", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CreateTypeArgs{
		TypeA1: type_a1,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvCreateType() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error46 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error47 error
		error47, err = error46.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error47
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "create_type failed: out of sequence response")
		return
	}
	result := CreateTypeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	} else if result.O3 != nil {
		err = result.O3
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - TypeA1
func (p *ThriftHiveMetastoreClient) DropType(type_a1 string) (r bool, err error) {
	if err = p.sendDropType(type_a1); err != nil {
		return
	}
	return p.recvDropType()
}

func (p *ThriftHiveMetastoreClient) sendDropType(type_a1 string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("drop_type", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DropTypeArgs{
		TypeA1: type_a1,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvDropType() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error48 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error49 error
		error49, err = error48.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error49
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "drop_type failed: out of sequence response")
		return
	}
	result := DropTypeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Name
func (p *ThriftHiveMetastoreClient) GetTypeAll(name string) (r map[string]*Type, err error) {
	if err = p.sendGetTypeAll(name); err != nil {
		return
	}
	return p.recvGetTypeAll()
}

func (p *ThriftHiveMetastoreClient) sendGetTypeAll(name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_type_all", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetTypeAllArgs{
		Name: name,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetTypeAll() (value map[string]*Type, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error50 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error51 error
		error51, err = error50.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error51
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_type_all failed: out of sequence response")
		return
	}
	result := GetTypeAllResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TableName
func (p *ThriftHiveMetastoreClient) GetFields(db_name string, table_name string) (r []*FieldSchema, err error) {
	if err = p.sendGetFields(db_name, table_name); err != nil {
		return
	}
	return p.recvGetFields()
}

func (p *ThriftHiveMetastoreClient) sendGetFields(db_name string, table_name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_fields", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetFieldsArgs{
		DbName:    db_name,
		TableName: table_name,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetFields() (value []*FieldSchema, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error52 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error53 error
		error53, err = error52.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error53
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_fields failed: out of sequence response")
		return
	}
	result := GetFieldsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	} else if result.O3 != nil {
		err = result.O3
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TableName
func (p *ThriftHiveMetastoreClient) GetSchema(db_name string, table_name string) (r []*FieldSchema, err error) {
	if err = p.sendGetSchema(db_name, table_name); err != nil {
		return
	}
	return p.recvGetSchema()
}

func (p *ThriftHiveMetastoreClient) sendGetSchema(db_name string, table_name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_schema", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetSchemaArgs{
		DbName:    db_name,
		TableName: table_name,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetSchema() (value []*FieldSchema, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error54 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error55 error
		error55, err = error54.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error55
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_schema failed: out of sequence response")
		return
	}
	result := GetSchemaResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	} else if result.O3 != nil {
		err = result.O3
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Tbl
func (p *ThriftHiveMetastoreClient) CreateTable(tbl *Table) (err error) {
	if err = p.sendCreateTable(tbl); err != nil {
		return
	}
	return p.recvCreateTable()
}

func (p *ThriftHiveMetastoreClient) sendCreateTable(tbl *Table) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("create_table", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CreateTableArgs{
		Tbl: tbl,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvCreateTable() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error56 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error57 error
		error57, err = error56.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error57
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "create_table failed: out of sequence response")
		return
	}
	result := CreateTableResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	} else if result.O3 != nil {
		err = result.O3
		return
	} else if result.O4 != nil {
		err = result.O4
		return
	}
	return
}

// Parameters:
//  - Dbname
//  - Name
//  - DeleteData
func (p *ThriftHiveMetastoreClient) DropTable(dbname string, name string, deleteData bool) (err error) {
	if err = p.sendDropTable(dbname, name, deleteData); err != nil {
		return
	}
	return p.recvDropTable()
}

func (p *ThriftHiveMetastoreClient) sendDropTable(dbname string, name string, deleteData bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("drop_table", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DropTableArgs{
		Dbname:     dbname,
		Name:       name,
		DeleteData: deleteData,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvDropTable() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error58 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error59 error
		error59, err = error58.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error59
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "drop_table failed: out of sequence response")
		return
	}
	result := DropTableResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O3 != nil {
		err = result.O3
		return
	}
	return
}

// Parameters:
//  - DbName
//  - Pattern
func (p *ThriftHiveMetastoreClient) GetTables(db_name string, pattern string) (r []string, err error) {
	if err = p.sendGetTables(db_name, pattern); err != nil {
		return
	}
	return p.recvGetTables()
}

func (p *ThriftHiveMetastoreClient) sendGetTables(db_name string, pattern string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_tables", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetTablesArgs{
		DbName:  db_name,
		Pattern: pattern,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetTables() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error60 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error61 error
		error61, err = error60.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error61
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_tables failed: out of sequence response")
		return
	}
	result := GetTablesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
func (p *ThriftHiveMetastoreClient) GetAllTables(db_name string) (r []string, err error) {
	if err = p.sendGetAllTables(db_name); err != nil {
		return
	}
	return p.recvGetAllTables()
}

func (p *ThriftHiveMetastoreClient) sendGetAllTables(db_name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_all_tables", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetAllTablesArgs{
		DbName: db_name,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetAllTables() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error62 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error63 error
		error63, err = error62.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error63
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_all_tables failed: out of sequence response")
		return
	}
	result := GetAllTablesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Dbname
//  - TblName
func (p *ThriftHiveMetastoreClient) GetTable(dbname string, tbl_name string) (r *Table, err error) {
	if err = p.sendGetTable(dbname, tbl_name); err != nil {
		return
	}
	return p.recvGetTable()
}

func (p *ThriftHiveMetastoreClient) sendGetTable(dbname string, tbl_name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_table", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetTableArgs{
		Dbname:  dbname,
		TblName: tbl_name,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetTable() (value *Table, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error64 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error65 error
		error65, err = error64.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error65
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_table failed: out of sequence response")
		return
	}
	result := GetTableResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Dbname
//  - TblName
//  - NewTbl_
func (p *ThriftHiveMetastoreClient) AlterTable(dbname string, tbl_name string, new_tbl *Table) (err error) {
	if err = p.sendAlterTable(dbname, tbl_name, new_tbl); err != nil {
		return
	}
	return p.recvAlterTable()
}

func (p *ThriftHiveMetastoreClient) sendAlterTable(dbname string, tbl_name string, new_tbl *Table) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("alter_table", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AlterTableArgs{
		Dbname:  dbname,
		TblName: tbl_name,
		NewTbl_: new_tbl,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvAlterTable() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error66 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error67 error
		error67, err = error66.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error67
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "alter_table failed: out of sequence response")
		return
	}
	result := AlterTableResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	return
}

// Parameters:
//  - NewPart_
func (p *ThriftHiveMetastoreClient) AddPartition(new_part *Partition) (r *Partition, err error) {
	if err = p.sendAddPartition(new_part); err != nil {
		return
	}
	return p.recvAddPartition()
}

func (p *ThriftHiveMetastoreClient) sendAddPartition(new_part *Partition) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("add_partition", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AddPartitionArgs{
		NewPart_: new_part,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvAddPartition() (value *Partition, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error68 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error69 error
		error69, err = error68.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error69
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "add_partition failed: out of sequence response")
		return
	}
	result := AddPartitionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	} else if result.O3 != nil {
		err = result.O3
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - PartVals
func (p *ThriftHiveMetastoreClient) AppendPartition(db_name string, tbl_name string, part_vals []string) (r *Partition, err error) {
	if err = p.sendAppendPartition(db_name, tbl_name, part_vals); err != nil {
		return
	}
	return p.recvAppendPartition()
}

func (p *ThriftHiveMetastoreClient) sendAppendPartition(db_name string, tbl_name string, part_vals []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("append_partition", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AppendPartitionArgs{
		DbName:   db_name,
		TblName:  tbl_name,
		PartVals: part_vals,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvAppendPartition() (value *Partition, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error70 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error71 error
		error71, err = error70.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error71
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "append_partition failed: out of sequence response")
		return
	}
	result := AppendPartitionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	} else if result.O3 != nil {
		err = result.O3
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - PartName
func (p *ThriftHiveMetastoreClient) AppendPartitionByName(db_name string, tbl_name string, part_name string) (r *Partition, err error) {
	if err = p.sendAppendPartitionByName(db_name, tbl_name, part_name); err != nil {
		return
	}
	return p.recvAppendPartitionByName()
}

func (p *ThriftHiveMetastoreClient) sendAppendPartitionByName(db_name string, tbl_name string, part_name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("append_partition_by_name", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AppendPartitionByNameArgs{
		DbName:   db_name,
		TblName:  tbl_name,
		PartName: part_name,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvAppendPartitionByName() (value *Partition, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error72 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error73 error
		error73, err = error72.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error73
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "append_partition_by_name failed: out of sequence response")
		return
	}
	result := AppendPartitionByNameResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	} else if result.O3 != nil {
		err = result.O3
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - PartVals
//  - DeleteData
func (p *ThriftHiveMetastoreClient) DropPartition(db_name string, tbl_name string, part_vals []string, deleteData bool) (r bool, err error) {
	if err = p.sendDropPartition(db_name, tbl_name, part_vals, deleteData); err != nil {
		return
	}
	return p.recvDropPartition()
}

func (p *ThriftHiveMetastoreClient) sendDropPartition(db_name string, tbl_name string, part_vals []string, deleteData bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("drop_partition", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DropPartitionArgs{
		DbName:     db_name,
		TblName:    tbl_name,
		PartVals:   part_vals,
		DeleteData: deleteData,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvDropPartition() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error74 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error75 error
		error75, err = error74.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error75
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "drop_partition failed: out of sequence response")
		return
	}
	result := DropPartitionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - PartName
//  - DeleteData
func (p *ThriftHiveMetastoreClient) DropPartitionByName(db_name string, tbl_name string, part_name string, deleteData bool) (r bool, err error) {
	if err = p.sendDropPartitionByName(db_name, tbl_name, part_name, deleteData); err != nil {
		return
	}
	return p.recvDropPartitionByName()
}

func (p *ThriftHiveMetastoreClient) sendDropPartitionByName(db_name string, tbl_name string, part_name string, deleteData bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("drop_partition_by_name", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DropPartitionByNameArgs{
		DbName:     db_name,
		TblName:    tbl_name,
		PartName:   part_name,
		DeleteData: deleteData,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvDropPartitionByName() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error76 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error77 error
		error77, err = error76.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error77
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "drop_partition_by_name failed: out of sequence response")
		return
	}
	result := DropPartitionByNameResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - PartVals
func (p *ThriftHiveMetastoreClient) GetPartition(db_name string, tbl_name string, part_vals []string) (r *Partition, err error) {
	if err = p.sendGetPartition(db_name, tbl_name, part_vals); err != nil {
		return
	}
	return p.recvGetPartition()
}

func (p *ThriftHiveMetastoreClient) sendGetPartition(db_name string, tbl_name string, part_vals []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_partition", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetPartitionArgs{
		DbName:   db_name,
		TblName:  tbl_name,
		PartVals: part_vals,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetPartition() (value *Partition, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error78 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error79 error
		error79, err = error78.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error79
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_partition failed: out of sequence response")
		return
	}
	result := GetPartitionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - PartVals
//  - UserName
//  - GroupNames
func (p *ThriftHiveMetastoreClient) GetPartitionWithAuth(db_name string, tbl_name string, part_vals []string, user_name string, group_names []string) (r *Partition, err error) {
	if err = p.sendGetPartitionWithAuth(db_name, tbl_name, part_vals, user_name, group_names); err != nil {
		return
	}
	return p.recvGetPartitionWithAuth()
}

func (p *ThriftHiveMetastoreClient) sendGetPartitionWithAuth(db_name string, tbl_name string, part_vals []string, user_name string, group_names []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_partition_with_auth", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetPartitionWithAuthArgs{
		DbName:     db_name,
		TblName:    tbl_name,
		PartVals:   part_vals,
		UserName:   user_name,
		GroupNames: group_names,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetPartitionWithAuth() (value *Partition, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error80 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error81 error
		error81, err = error80.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error81
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_partition_with_auth failed: out of sequence response")
		return
	}
	result := GetPartitionWithAuthResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - PartName
func (p *ThriftHiveMetastoreClient) GetPartitionByName(db_name string, tbl_name string, part_name string) (r *Partition, err error) {
	if err = p.sendGetPartitionByName(db_name, tbl_name, part_name); err != nil {
		return
	}
	return p.recvGetPartitionByName()
}

func (p *ThriftHiveMetastoreClient) sendGetPartitionByName(db_name string, tbl_name string, part_name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_partition_by_name", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetPartitionByNameArgs{
		DbName:   db_name,
		TblName:  tbl_name,
		PartName: part_name,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetPartitionByName() (value *Partition, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error82 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error83 error
		error83, err = error82.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error83
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_partition_by_name failed: out of sequence response")
		return
	}
	result := GetPartitionByNameResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - MaxParts
func (p *ThriftHiveMetastoreClient) GetPartitions(db_name string, tbl_name string, max_parts int16) (r []*Partition, err error) {
	if err = p.sendGetPartitions(db_name, tbl_name, max_parts); err != nil {
		return
	}
	return p.recvGetPartitions()
}

func (p *ThriftHiveMetastoreClient) sendGetPartitions(db_name string, tbl_name string, max_parts int16) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_partitions", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetPartitionsArgs{
		DbName:   db_name,
		TblName:  tbl_name,
		MaxParts: max_parts,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetPartitions() (value []*Partition, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error84 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error85 error
		error85, err = error84.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error85
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_partitions failed: out of sequence response")
		return
	}
	result := GetPartitionsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - MaxParts
//  - UserName
//  - GroupNames
func (p *ThriftHiveMetastoreClient) GetPartitionsWithAuth(db_name string, tbl_name string, max_parts int16, user_name string, group_names []string) (r []*Partition, err error) {
	if err = p.sendGetPartitionsWithAuth(db_name, tbl_name, max_parts, user_name, group_names); err != nil {
		return
	}
	return p.recvGetPartitionsWithAuth()
}

func (p *ThriftHiveMetastoreClient) sendGetPartitionsWithAuth(db_name string, tbl_name string, max_parts int16, user_name string, group_names []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_partitions_with_auth", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetPartitionsWithAuthArgs{
		DbName:     db_name,
		TblName:    tbl_name,
		MaxParts:   max_parts,
		UserName:   user_name,
		GroupNames: group_names,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetPartitionsWithAuth() (value []*Partition, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error86 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error87 error
		error87, err = error86.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error87
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_partitions_with_auth failed: out of sequence response")
		return
	}
	result := GetPartitionsWithAuthResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - MaxParts
func (p *ThriftHiveMetastoreClient) GetPartitionNames(db_name string, tbl_name string, max_parts int16) (r []string, err error) {
	if err = p.sendGetPartitionNames(db_name, tbl_name, max_parts); err != nil {
		return
	}
	return p.recvGetPartitionNames()
}

func (p *ThriftHiveMetastoreClient) sendGetPartitionNames(db_name string, tbl_name string, max_parts int16) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_partition_names", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetPartitionNamesArgs{
		DbName:   db_name,
		TblName:  tbl_name,
		MaxParts: max_parts,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetPartitionNames() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error88 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error89 error
		error89, err = error88.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error89
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_partition_names failed: out of sequence response")
		return
	}
	result := GetPartitionNamesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - PartVals
//  - MaxParts
func (p *ThriftHiveMetastoreClient) GetPartitionsPs(db_name string, tbl_name string, part_vals []string, max_parts int16) (r []*Partition, err error) {
	if err = p.sendGetPartitionsPs(db_name, tbl_name, part_vals, max_parts); err != nil {
		return
	}
	return p.recvGetPartitionsPs()
}

func (p *ThriftHiveMetastoreClient) sendGetPartitionsPs(db_name string, tbl_name string, part_vals []string, max_parts int16) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_partitions_ps", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetPartitionsPsArgs{
		DbName:   db_name,
		TblName:  tbl_name,
		PartVals: part_vals,
		MaxParts: max_parts,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetPartitionsPs() (value []*Partition, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error90 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error91 error
		error91, err = error90.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error91
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_partitions_ps failed: out of sequence response")
		return
	}
	result := GetPartitionsPsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - PartVals
//  - MaxParts
//  - UserName
//  - GroupNames
func (p *ThriftHiveMetastoreClient) GetPartitionsPsWithAuth(db_name string, tbl_name string, part_vals []string, max_parts int16, user_name string, group_names []string) (r []*Partition, err error) {
	if err = p.sendGetPartitionsPsWithAuth(db_name, tbl_name, part_vals, max_parts, user_name, group_names); err != nil {
		return
	}
	return p.recvGetPartitionsPsWithAuth()
}

func (p *ThriftHiveMetastoreClient) sendGetPartitionsPsWithAuth(db_name string, tbl_name string, part_vals []string, max_parts int16, user_name string, group_names []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_partitions_ps_with_auth", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetPartitionsPsWithAuthArgs{
		DbName:     db_name,
		TblName:    tbl_name,
		PartVals:   part_vals,
		MaxParts:   max_parts,
		UserName:   user_name,
		GroupNames: group_names,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetPartitionsPsWithAuth() (value []*Partition, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error92 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error93 error
		error93, err = error92.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error93
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_partitions_ps_with_auth failed: out of sequence response")
		return
	}
	result := GetPartitionsPsWithAuthResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - PartVals
//  - MaxParts
func (p *ThriftHiveMetastoreClient) GetPartitionNamesPs(db_name string, tbl_name string, part_vals []string, max_parts int16) (r []string, err error) {
	if err = p.sendGetPartitionNamesPs(db_name, tbl_name, part_vals, max_parts); err != nil {
		return
	}
	return p.recvGetPartitionNamesPs()
}

func (p *ThriftHiveMetastoreClient) sendGetPartitionNamesPs(db_name string, tbl_name string, part_vals []string, max_parts int16) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_partition_names_ps", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetPartitionNamesPsArgs{
		DbName:   db_name,
		TblName:  tbl_name,
		PartVals: part_vals,
		MaxParts: max_parts,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetPartitionNamesPs() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error94 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error95 error
		error95, err = error94.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error95
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_partition_names_ps failed: out of sequence response")
		return
	}
	result := GetPartitionNamesPsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - Filter
//  - MaxParts
func (p *ThriftHiveMetastoreClient) GetPartitionsByFilter(db_name string, tbl_name string, filter string, max_parts int16) (r []*Partition, err error) {
	if err = p.sendGetPartitionsByFilter(db_name, tbl_name, filter, max_parts); err != nil {
		return
	}
	return p.recvGetPartitionsByFilter()
}

func (p *ThriftHiveMetastoreClient) sendGetPartitionsByFilter(db_name string, tbl_name string, filter string, max_parts int16) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_partitions_by_filter", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetPartitionsByFilterArgs{
		DbName:   db_name,
		TblName:  tbl_name,
		Filter:   filter,
		MaxParts: max_parts,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetPartitionsByFilter() (value []*Partition, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error96 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error97 error
		error97, err = error96.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error97
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_partitions_by_filter failed: out of sequence response")
		return
	}
	result := GetPartitionsByFilterResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - NewPart_
func (p *ThriftHiveMetastoreClient) AlterPartition(db_name string, tbl_name string, new_part *Partition) (err error) {
	if err = p.sendAlterPartition(db_name, tbl_name, new_part); err != nil {
		return
	}
	return p.recvAlterPartition()
}

func (p *ThriftHiveMetastoreClient) sendAlterPartition(db_name string, tbl_name string, new_part *Partition) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("alter_partition", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AlterPartitionArgs{
		DbName:   db_name,
		TblName:  tbl_name,
		NewPart_: new_part,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvAlterPartition() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error98 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error99 error
		error99, err = error98.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error99
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "alter_partition failed: out of sequence response")
		return
	}
	result := AlterPartitionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	return
}

// Parameters:
//  - Name
//  - DefaultValue
func (p *ThriftHiveMetastoreClient) GetConfigValue(name string, defaultValue string) (r string, err error) {
	if err = p.sendGetConfigValue(name, defaultValue); err != nil {
		return
	}
	return p.recvGetConfigValue()
}

func (p *ThriftHiveMetastoreClient) sendGetConfigValue(name string, defaultValue string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_config_value", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetConfigValueArgs{
		Name:         name,
		DefaultValue: defaultValue,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetConfigValue() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error100 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error101 error
		error101, err = error100.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error101
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_config_value failed: out of sequence response")
		return
	}
	result := GetConfigValueResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - PartName
func (p *ThriftHiveMetastoreClient) PartitionNameToVals(part_name string) (r []string, err error) {
	if err = p.sendPartitionNameToVals(part_name); err != nil {
		return
	}
	return p.recvPartitionNameToVals()
}

func (p *ThriftHiveMetastoreClient) sendPartitionNameToVals(part_name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("partition_name_to_vals", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := PartitionNameToValsArgs{
		PartName: part_name,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvPartitionNameToVals() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error102 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error103 error
		error103, err = error102.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error103
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "partition_name_to_vals failed: out of sequence response")
		return
	}
	result := PartitionNameToValsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - PartName
func (p *ThriftHiveMetastoreClient) PartitionNameToSpec(part_name string) (r map[string]string, err error) {
	if err = p.sendPartitionNameToSpec(part_name); err != nil {
		return
	}
	return p.recvPartitionNameToSpec()
}

func (p *ThriftHiveMetastoreClient) sendPartitionNameToSpec(part_name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("partition_name_to_spec", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := PartitionNameToSpecArgs{
		PartName: part_name,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvPartitionNameToSpec() (value map[string]string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error104 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error105 error
		error105, err = error104.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error105
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "partition_name_to_spec failed: out of sequence response")
		return
	}
	result := PartitionNameToSpecResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - NewIndex_
//  - IndexTable
func (p *ThriftHiveMetastoreClient) AddIndex(new_index *Index, index_table *Table) (r *Index, err error) {
	if err = p.sendAddIndex(new_index, index_table); err != nil {
		return
	}
	return p.recvAddIndex()
}

func (p *ThriftHiveMetastoreClient) sendAddIndex(new_index *Index, index_table *Table) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("add_index", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AddIndexArgs{
		NewIndex_:  new_index,
		IndexTable: index_table,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvAddIndex() (value *Index, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error106 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error107 error
		error107, err = error106.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error107
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "add_index failed: out of sequence response")
		return
	}
	result := AddIndexResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	} else if result.O3 != nil {
		err = result.O3
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Dbname
//  - BaseTblName
//  - IdxName
//  - NewIdx_
func (p *ThriftHiveMetastoreClient) AlterIndex(dbname string, base_tbl_name string, idx_name string, new_idx *Index) (err error) {
	if err = p.sendAlterIndex(dbname, base_tbl_name, idx_name, new_idx); err != nil {
		return
	}
	return p.recvAlterIndex()
}

func (p *ThriftHiveMetastoreClient) sendAlterIndex(dbname string, base_tbl_name string, idx_name string, new_idx *Index) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("alter_index", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AlterIndexArgs{
		Dbname:      dbname,
		BaseTblName: base_tbl_name,
		IdxName:     idx_name,
		NewIdx_:     new_idx,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvAlterIndex() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error108 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error109 error
		error109, err = error108.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error109
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "alter_index failed: out of sequence response")
		return
	}
	result := AlterIndexResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - IndexName
//  - DeleteData
func (p *ThriftHiveMetastoreClient) DropIndexByName(db_name string, tbl_name string, index_name string, deleteData bool) (r bool, err error) {
	if err = p.sendDropIndexByName(db_name, tbl_name, index_name, deleteData); err != nil {
		return
	}
	return p.recvDropIndexByName()
}

func (p *ThriftHiveMetastoreClient) sendDropIndexByName(db_name string, tbl_name string, index_name string, deleteData bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("drop_index_by_name", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DropIndexByNameArgs{
		DbName:     db_name,
		TblName:    tbl_name,
		IndexName:  index_name,
		DeleteData: deleteData,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvDropIndexByName() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error110 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error111 error
		error111, err = error110.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error111
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "drop_index_by_name failed: out of sequence response")
		return
	}
	result := DropIndexByNameResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - IndexName
func (p *ThriftHiveMetastoreClient) GetIndexByName(db_name string, tbl_name string, index_name string) (r *Index, err error) {
	if err = p.sendGetIndexByName(db_name, tbl_name, index_name); err != nil {
		return
	}
	return p.recvGetIndexByName()
}

func (p *ThriftHiveMetastoreClient) sendGetIndexByName(db_name string, tbl_name string, index_name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_index_by_name", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetIndexByNameArgs{
		DbName:    db_name,
		TblName:   tbl_name,
		IndexName: index_name,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetIndexByName() (value *Index, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error112 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error113 error
		error113, err = error112.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error113
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_index_by_name failed: out of sequence response")
		return
	}
	result := GetIndexByNameResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - MaxIndexes
func (p *ThriftHiveMetastoreClient) GetIndexes(db_name string, tbl_name string, max_indexes int16) (r []*Index, err error) {
	if err = p.sendGetIndexes(db_name, tbl_name, max_indexes); err != nil {
		return
	}
	return p.recvGetIndexes()
}

func (p *ThriftHiveMetastoreClient) sendGetIndexes(db_name string, tbl_name string, max_indexes int16) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_indexes", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetIndexesArgs{
		DbName:     db_name,
		TblName:    tbl_name,
		MaxIndexes: max_indexes,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetIndexes() (value []*Index, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error114 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error115 error
		error115, err = error114.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error115
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_indexes failed: out of sequence response")
		return
	}
	result := GetIndexesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	} else if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DbName
//  - TblName
//  - MaxIndexes
func (p *ThriftHiveMetastoreClient) GetIndexNames(db_name string, tbl_name string, max_indexes int16) (r []string, err error) {
	if err = p.sendGetIndexNames(db_name, tbl_name, max_indexes); err != nil {
		return
	}
	return p.recvGetIndexNames()
}

func (p *ThriftHiveMetastoreClient) sendGetIndexNames(db_name string, tbl_name string, max_indexes int16) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_index_names", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetIndexNamesArgs{
		DbName:     db_name,
		TblName:    tbl_name,
		MaxIndexes: max_indexes,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetIndexNames() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error116 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error117 error
		error117, err = error116.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error117
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_index_names failed: out of sequence response")
		return
	}
	result := GetIndexNamesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O2 != nil {
		err = result.O2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Role
func (p *ThriftHiveMetastoreClient) CreateRole(role *Role) (r bool, err error) {
	if err = p.sendCreateRole(role); err != nil {
		return
	}
	return p.recvCreateRole()
}

func (p *ThriftHiveMetastoreClient) sendCreateRole(role *Role) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("create_role", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CreateRoleArgs{
		Role: role,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvCreateRole() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error118 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error119 error
		error119, err = error118.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error119
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "create_role failed: out of sequence response")
		return
	}
	result := CreateRoleResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - RoleName
func (p *ThriftHiveMetastoreClient) DropRole(role_name string) (r bool, err error) {
	if err = p.sendDropRole(role_name); err != nil {
		return
	}
	return p.recvDropRole()
}

func (p *ThriftHiveMetastoreClient) sendDropRole(role_name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("drop_role", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DropRoleArgs{
		RoleName: role_name,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvDropRole() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error120 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error121 error
		error121, err = error120.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error121
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "drop_role failed: out of sequence response")
		return
	}
	result := DropRoleResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

func (p *ThriftHiveMetastoreClient) GetRoleNames() (r []string, err error) {
	if err = p.sendGetRoleNames(); err != nil {
		return
	}
	return p.recvGetRoleNames()
}

func (p *ThriftHiveMetastoreClient) sendGetRoleNames() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_role_names", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetRoleNamesArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetRoleNames() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error122 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error123 error
		error123, err = error122.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error123
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_role_names failed: out of sequence response")
		return
	}
	result := GetRoleNamesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - RoleName
//  - PrincipalName
//  - PrincipalType
//  - Grantor
//  - GrantorType
//  - GrantOption
func (p *ThriftHiveMetastoreClient) GrantRole(role_name string, principal_name string, principal_type PrincipalType, grantor string, grantorType PrincipalType, grant_option bool) (r bool, err error) {
	if err = p.sendGrantRole(role_name, principal_name, principal_type, grantor, grantorType, grant_option); err != nil {
		return
	}
	return p.recvGrantRole()
}

func (p *ThriftHiveMetastoreClient) sendGrantRole(role_name string, principal_name string, principal_type PrincipalType, grantor string, grantorType PrincipalType, grant_option bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("grant_role", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GrantRoleArgs{
		RoleName:      role_name,
		PrincipalName: principal_name,
		PrincipalType: principal_type,
		Grantor:       grantor,
		GrantorType:   grantorType,
		GrantOption:   grant_option,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGrantRole() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error124 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error125 error
		error125, err = error124.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error125
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "grant_role failed: out of sequence response")
		return
	}
	result := GrantRoleResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - RoleName
//  - PrincipalName
//  - PrincipalType
func (p *ThriftHiveMetastoreClient) RevokeRole(role_name string, principal_name string, principal_type PrincipalType) (r bool, err error) {
	if err = p.sendRevokeRole(role_name, principal_name, principal_type); err != nil {
		return
	}
	return p.recvRevokeRole()
}

func (p *ThriftHiveMetastoreClient) sendRevokeRole(role_name string, principal_name string, principal_type PrincipalType) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("revoke_role", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := RevokeRoleArgs{
		RoleName:      role_name,
		PrincipalName: principal_name,
		PrincipalType: principal_type,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvRevokeRole() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error126 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error127 error
		error127, err = error126.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error127
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "revoke_role failed: out of sequence response")
		return
	}
	result := RevokeRoleResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - PrincipalName
//  - PrincipalType
func (p *ThriftHiveMetastoreClient) ListRoles(principal_name string, principal_type PrincipalType) (r []*Role, err error) {
	if err = p.sendListRoles(principal_name, principal_type); err != nil {
		return
	}
	return p.recvListRoles()
}

func (p *ThriftHiveMetastoreClient) sendListRoles(principal_name string, principal_type PrincipalType) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("list_roles", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ListRolesArgs{
		PrincipalName: principal_name,
		PrincipalType: principal_type,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvListRoles() (value []*Role, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error128 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error129 error
		error129, err = error128.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error129
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "list_roles failed: out of sequence response")
		return
	}
	result := ListRolesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - HiveObject
//  - UserName
//  - GroupNames
func (p *ThriftHiveMetastoreClient) GetPrivilegeSet(hiveObject *HiveObjectRef, user_name string, group_names []string) (r *PrincipalPrivilegeSet, err error) {
	if err = p.sendGetPrivilegeSet(hiveObject, user_name, group_names); err != nil {
		return
	}
	return p.recvGetPrivilegeSet()
}

func (p *ThriftHiveMetastoreClient) sendGetPrivilegeSet(hiveObject *HiveObjectRef, user_name string, group_names []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_privilege_set", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetPrivilegeSetArgs{
		HiveObject: hiveObject,
		UserName:   user_name,
		GroupNames: group_names,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetPrivilegeSet() (value *PrincipalPrivilegeSet, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error130 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error131 error
		error131, err = error130.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error131
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_privilege_set failed: out of sequence response")
		return
	}
	result := GetPrivilegeSetResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - PrincipalName
//  - PrincipalType
//  - HiveObject
func (p *ThriftHiveMetastoreClient) ListPrivileges(principal_name string, principal_type PrincipalType, hiveObject *HiveObjectRef) (r []*HiveObjectPrivilege, err error) {
	if err = p.sendListPrivileges(principal_name, principal_type, hiveObject); err != nil {
		return
	}
	return p.recvListPrivileges()
}

func (p *ThriftHiveMetastoreClient) sendListPrivileges(principal_name string, principal_type PrincipalType, hiveObject *HiveObjectRef) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("list_privileges", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ListPrivilegesArgs{
		PrincipalName: principal_name,
		PrincipalType: principal_type,
		HiveObject:    hiveObject,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvListPrivileges() (value []*HiveObjectPrivilege, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error132 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error133 error
		error133, err = error132.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error133
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "list_privileges failed: out of sequence response")
		return
	}
	result := ListPrivilegesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Privileges
func (p *ThriftHiveMetastoreClient) GrantPrivileges(privileges *PrivilegeBag) (r bool, err error) {
	if err = p.sendGrantPrivileges(privileges); err != nil {
		return
	}
	return p.recvGrantPrivileges()
}

func (p *ThriftHiveMetastoreClient) sendGrantPrivileges(privileges *PrivilegeBag) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("grant_privileges", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GrantPrivilegesArgs{
		Privileges: privileges,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGrantPrivileges() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error134 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error135 error
		error135, err = error134.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error135
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "grant_privileges failed: out of sequence response")
		return
	}
	result := GrantPrivilegesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Privileges
func (p *ThriftHiveMetastoreClient) RevokePrivileges(privileges *PrivilegeBag) (r bool, err error) {
	if err = p.sendRevokePrivileges(privileges); err != nil {
		return
	}
	return p.recvRevokePrivileges()
}

func (p *ThriftHiveMetastoreClient) sendRevokePrivileges(privileges *PrivilegeBag) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("revoke_privileges", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := RevokePrivilegesArgs{
		Privileges: privileges,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvRevokePrivileges() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error136 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error137 error
		error137, err = error136.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error137
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "revoke_privileges failed: out of sequence response")
		return
	}
	result := RevokePrivilegesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - RenewerKerberosPrincipalName
func (p *ThriftHiveMetastoreClient) GetDelegationToken(renewer_kerberos_principal_name string) (r string, err error) {
	if err = p.sendGetDelegationToken(renewer_kerberos_principal_name); err != nil {
		return
	}
	return p.recvGetDelegationToken()
}

func (p *ThriftHiveMetastoreClient) sendGetDelegationToken(renewer_kerberos_principal_name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_delegation_token", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetDelegationTokenArgs{
		RenewerKerberosPrincipalName: renewer_kerberos_principal_name,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetDelegationToken() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error138 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error139 error
		error139, err = error138.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error139
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_delegation_token failed: out of sequence response")
		return
	}
	result := GetDelegationTokenResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - RenewerKerberosPrincipalName
//  - TokenSignature
func (p *ThriftHiveMetastoreClient) GetDelegationTokenWithSignature(renewer_kerberos_principal_name string, token_signature string) (r string, err error) {
	if err = p.sendGetDelegationTokenWithSignature(renewer_kerberos_principal_name, token_signature); err != nil {
		return
	}
	return p.recvGetDelegationTokenWithSignature()
}

func (p *ThriftHiveMetastoreClient) sendGetDelegationTokenWithSignature(renewer_kerberos_principal_name string, token_signature string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_delegation_token_with_signature", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetDelegationTokenWithSignatureArgs{
		RenewerKerberosPrincipalName: renewer_kerberos_principal_name,
		TokenSignature:               token_signature,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvGetDelegationTokenWithSignature() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error140 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error141 error
		error141, err = error140.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error141
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_delegation_token_with_signature failed: out of sequence response")
		return
	}
	result := GetDelegationTokenWithSignatureResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - TokenStrForm
func (p *ThriftHiveMetastoreClient) RenewDelegationToken(token_str_form string) (r int64, err error) {
	if err = p.sendRenewDelegationToken(token_str_form); err != nil {
		return
	}
	return p.recvRenewDelegationToken()
}

func (p *ThriftHiveMetastoreClient) sendRenewDelegationToken(token_str_form string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("renew_delegation_token", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := RenewDelegationTokenArgs{
		TokenStrForm: token_str_form,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvRenewDelegationToken() (value int64, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error142 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error143 error
		error143, err = error142.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error143
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "renew_delegation_token failed: out of sequence response")
		return
	}
	result := RenewDelegationTokenResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - TokenStrForm
func (p *ThriftHiveMetastoreClient) CancelDelegationToken(token_str_form string) (err error) {
	if err = p.sendCancelDelegationToken(token_str_form); err != nil {
		return
	}
	return p.recvCancelDelegationToken()
}

func (p *ThriftHiveMetastoreClient) sendCancelDelegationToken(token_str_form string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("cancel_delegation_token", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CancelDelegationTokenArgs{
		TokenStrForm: token_str_form,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ThriftHiveMetastoreClient) recvCancelDelegationToken() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error144 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error145 error
		error145, err = error144.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error145
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "cancel_delegation_token failed: out of sequence response")
		return
	}
	result := CancelDelegationTokenResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.O1 != nil {
		err = result.O1
		return
	}
	return
}

type ThriftHiveMetastoreProcessor struct {
	*fb303.FacebookServiceProcessor
}

func NewThriftHiveMetastoreProcessor(handler ThriftHiveMetastore) *ThriftHiveMetastoreProcessor {
	self146 := &ThriftHiveMetastoreProcessor{fb303.NewFacebookServiceProcessor(handler)}
	self146.AddToProcessorMap("create_database", &thriftHiveMetastoreProcessorCreateDatabase{handler: handler})
	self146.AddToProcessorMap("get_database", &thriftHiveMetastoreProcessorGetDatabase{handler: handler})
	self146.AddToProcessorMap("drop_database", &thriftHiveMetastoreProcessorDropDatabase{handler: handler})
	self146.AddToProcessorMap("get_databases", &thriftHiveMetastoreProcessorGetDatabases{handler: handler})
	self146.AddToProcessorMap("get_all_databases", &thriftHiveMetastoreProcessorGetAllDatabases{handler: handler})
	self146.AddToProcessorMap("alter_database", &thriftHiveMetastoreProcessorAlterDatabase{handler: handler})
	self146.AddToProcessorMap("get_type", &thriftHiveMetastoreProcessorGetType{handler: handler})
	self146.AddToProcessorMap("create_type", &thriftHiveMetastoreProcessorCreateType{handler: handler})
	self146.AddToProcessorMap("drop_type", &thriftHiveMetastoreProcessorDropType{handler: handler})
	self146.AddToProcessorMap("get_type_all", &thriftHiveMetastoreProcessorGetTypeAll{handler: handler})
	self146.AddToProcessorMap("get_fields", &thriftHiveMetastoreProcessorGetFields{handler: handler})
	self146.AddToProcessorMap("get_schema", &thriftHiveMetastoreProcessorGetSchema{handler: handler})
	self146.AddToProcessorMap("create_table", &thriftHiveMetastoreProcessorCreateTable{handler: handler})
	self146.AddToProcessorMap("drop_table", &thriftHiveMetastoreProcessorDropTable{handler: handler})
	self146.AddToProcessorMap("get_tables", &thriftHiveMetastoreProcessorGetTables{handler: handler})
	self146.AddToProcessorMap("get_all_tables", &thriftHiveMetastoreProcessorGetAllTables{handler: handler})
	self146.AddToProcessorMap("get_table", &thriftHiveMetastoreProcessorGetTable{handler: handler})
	self146.AddToProcessorMap("alter_table", &thriftHiveMetastoreProcessorAlterTable{handler: handler})
	self146.AddToProcessorMap("add_partition", &thriftHiveMetastoreProcessorAddPartition{handler: handler})
	self146.AddToProcessorMap("append_partition", &thriftHiveMetastoreProcessorAppendPartition{handler: handler})
	self146.AddToProcessorMap("append_partition_by_name", &thriftHiveMetastoreProcessorAppendPartitionByName{handler: handler})
	self146.AddToProcessorMap("drop_partition", &thriftHiveMetastoreProcessorDropPartition{handler: handler})
	self146.AddToProcessorMap("drop_partition_by_name", &thriftHiveMetastoreProcessorDropPartitionByName{handler: handler})
	self146.AddToProcessorMap("get_partition", &thriftHiveMetastoreProcessorGetPartition{handler: handler})
	self146.AddToProcessorMap("get_partition_with_auth", &thriftHiveMetastoreProcessorGetPartitionWithAuth{handler: handler})
	self146.AddToProcessorMap("get_partition_by_name", &thriftHiveMetastoreProcessorGetPartitionByName{handler: handler})
	self146.AddToProcessorMap("get_partitions", &thriftHiveMetastoreProcessorGetPartitions{handler: handler})
	self146.AddToProcessorMap("get_partitions_with_auth", &thriftHiveMetastoreProcessorGetPartitionsWithAuth{handler: handler})
	self146.AddToProcessorMap("get_partition_names", &thriftHiveMetastoreProcessorGetPartitionNames{handler: handler})
	self146.AddToProcessorMap("get_partitions_ps", &thriftHiveMetastoreProcessorGetPartitionsPs{handler: handler})
	self146.AddToProcessorMap("get_partitions_ps_with_auth", &thriftHiveMetastoreProcessorGetPartitionsPsWithAuth{handler: handler})
	self146.AddToProcessorMap("get_partition_names_ps", &thriftHiveMetastoreProcessorGetPartitionNamesPs{handler: handler})
	self146.AddToProcessorMap("get_partitions_by_filter", &thriftHiveMetastoreProcessorGetPartitionsByFilter{handler: handler})
	self146.AddToProcessorMap("alter_partition", &thriftHiveMetastoreProcessorAlterPartition{handler: handler})
	self146.AddToProcessorMap("get_config_value", &thriftHiveMetastoreProcessorGetConfigValue{handler: handler})
	self146.AddToProcessorMap("partition_name_to_vals", &thriftHiveMetastoreProcessorPartitionNameToVals{handler: handler})
	self146.AddToProcessorMap("partition_name_to_spec", &thriftHiveMetastoreProcessorPartitionNameToSpec{handler: handler})
	self146.AddToProcessorMap("add_index", &thriftHiveMetastoreProcessorAddIndex{handler: handler})
	self146.AddToProcessorMap("alter_index", &thriftHiveMetastoreProcessorAlterIndex{handler: handler})
	self146.AddToProcessorMap("drop_index_by_name", &thriftHiveMetastoreProcessorDropIndexByName{handler: handler})
	self146.AddToProcessorMap("get_index_by_name", &thriftHiveMetastoreProcessorGetIndexByName{handler: handler})
	self146.AddToProcessorMap("get_indexes", &thriftHiveMetastoreProcessorGetIndexes{handler: handler})
	self146.AddToProcessorMap("get_index_names", &thriftHiveMetastoreProcessorGetIndexNames{handler: handler})
	self146.AddToProcessorMap("create_role", &thriftHiveMetastoreProcessorCreateRole{handler: handler})
	self146.AddToProcessorMap("drop_role", &thriftHiveMetastoreProcessorDropRole{handler: handler})
	self146.AddToProcessorMap("get_role_names", &thriftHiveMetastoreProcessorGetRoleNames{handler: handler})
	self146.AddToProcessorMap("grant_role", &thriftHiveMetastoreProcessorGrantRole{handler: handler})
	self146.AddToProcessorMap("revoke_role", &thriftHiveMetastoreProcessorRevokeRole{handler: handler})
	self146.AddToProcessorMap("list_roles", &thriftHiveMetastoreProcessorListRoles{handler: handler})
	self146.AddToProcessorMap("get_privilege_set", &thriftHiveMetastoreProcessorGetPrivilegeSet{handler: handler})
	self146.AddToProcessorMap("list_privileges", &thriftHiveMetastoreProcessorListPrivileges{handler: handler})
	self146.AddToProcessorMap("grant_privileges", &thriftHiveMetastoreProcessorGrantPrivileges{handler: handler})
	self146.AddToProcessorMap("revoke_privileges", &thriftHiveMetastoreProcessorRevokePrivileges{handler: handler})
	self146.AddToProcessorMap("get_delegation_token", &thriftHiveMetastoreProcessorGetDelegationToken{handler: handler})
	self146.AddToProcessorMap("get_delegation_token_with_signature", &thriftHiveMetastoreProcessorGetDelegationTokenWithSignature{handler: handler})
	self146.AddToProcessorMap("renew_delegation_token", &thriftHiveMetastoreProcessorRenewDelegationToken{handler: handler})
	self146.AddToProcessorMap("cancel_delegation_token", &thriftHiveMetastoreProcessorCancelDelegationToken{handler: handler})
	return self146
}

type thriftHiveMetastoreProcessorCreateDatabase struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorCreateDatabase) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CreateDatabaseArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("create_database", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CreateDatabaseResult{}
	var err2 error
	if err2 = p.handler.CreateDatabase(args.Database); err2 != nil {
		switch v := err2.(type) {
		case *AlreadyExistsException:
			result.O1 = v
		case *InvalidObjectException:
			result.O2 = v
		case *MetaException:
			result.O3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing create_database: "+err2.Error())
			oprot.WriteMessageBegin("create_database", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("create_database", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetDatabase struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetDatabase) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetDatabaseArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_database", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetDatabaseResult{}
	var retval *Database
	var err2 error
	if retval, err2 = p.handler.GetDatabase(args.Name); err2 != nil {
		switch v := err2.(type) {
		case *NoSuchObjectException:
			result.O1 = v
		case *MetaException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_database: "+err2.Error())
			oprot.WriteMessageBegin("get_database", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_database", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorDropDatabase struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropDatabase) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DropDatabaseArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("drop_database", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DropDatabaseResult{}
	var err2 error
	if err2 = p.handler.DropDatabase(args.Name, args.DeleteData); err2 != nil {
		switch v := err2.(type) {
		case *NoSuchObjectException:
			result.O1 = v
		case *InvalidOperationException:
			result.O2 = v
		case *MetaException:
			result.O3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_database: "+err2.Error())
			oprot.WriteMessageBegin("drop_database", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("drop_database", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetDatabases struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetDatabases) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetDatabasesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_databases", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetDatabasesResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetDatabases(args.Pattern); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_databases: "+err2.Error())
			oprot.WriteMessageBegin("get_databases", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_databases", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetAllDatabases struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetAllDatabases) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetAllDatabasesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_all_databases", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetAllDatabasesResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetAllDatabases(); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_all_databases: "+err2.Error())
			oprot.WriteMessageBegin("get_all_databases", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_all_databases", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorAlterDatabase struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAlterDatabase) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AlterDatabaseArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("alter_database", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AlterDatabaseResult{}
	var err2 error
	if err2 = p.handler.AlterDatabase(args.Dbname, args.Db); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		case *NoSuchObjectException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_database: "+err2.Error())
			oprot.WriteMessageBegin("alter_database", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("alter_database", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetType struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetType) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetTypeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_type", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetTypeResult{}
	var retval *Type
	var err2 error
	if retval, err2 = p.handler.GetType(args.Name); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		case *NoSuchObjectException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_type: "+err2.Error())
			oprot.WriteMessageBegin("get_type", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_type", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorCreateType struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorCreateType) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CreateTypeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("create_type", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CreateTypeResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.CreateType(args.TypeA1); err2 != nil {
		switch v := err2.(type) {
		case *AlreadyExistsException:
			result.O1 = v
		case *InvalidObjectException:
			result.O2 = v
		case *MetaException:
			result.O3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing create_type: "+err2.Error())
			oprot.WriteMessageBegin("create_type", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("create_type", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorDropType struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropType) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DropTypeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("drop_type", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DropTypeResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.DropType(args.TypeA1); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		case *NoSuchObjectException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_type: "+err2.Error())
			oprot.WriteMessageBegin("drop_type", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("drop_type", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetTypeAll struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetTypeAll) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetTypeAllArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_type_all", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetTypeAllResult{}
	var retval map[string]*Type
	var err2 error
	if retval, err2 = p.handler.GetTypeAll(args.Name); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_type_all: "+err2.Error())
			oprot.WriteMessageBegin("get_type_all", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_type_all", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetFields struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetFields) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetFieldsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_fields", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetFieldsResult{}
	var retval []*FieldSchema
	var err2 error
	if retval, err2 = p.handler.GetFields(args.DbName, args.TableName); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		case *UnknownTableException:
			result.O2 = v
		case *UnknownDBException:
			result.O3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_fields: "+err2.Error())
			oprot.WriteMessageBegin("get_fields", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_fields", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetSchema struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetSchema) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetSchemaArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_schema", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetSchemaResult{}
	var retval []*FieldSchema
	var err2 error
	if retval, err2 = p.handler.GetSchema(args.DbName, args.TableName); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		case *UnknownTableException:
			result.O2 = v
		case *UnknownDBException:
			result.O3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_schema: "+err2.Error())
			oprot.WriteMessageBegin("get_schema", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_schema", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorCreateTable struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorCreateTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CreateTableArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("create_table", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CreateTableResult{}
	var err2 error
	if err2 = p.handler.CreateTable(args.Tbl); err2 != nil {
		switch v := err2.(type) {
		case *AlreadyExistsException:
			result.O1 = v
		case *InvalidObjectException:
			result.O2 = v
		case *MetaException:
			result.O3 = v
		case *NoSuchObjectException:
			result.O4 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing create_table: "+err2.Error())
			oprot.WriteMessageBegin("create_table", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("create_table", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorDropTable struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DropTableArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("drop_table", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DropTableResult{}
	var err2 error
	if err2 = p.handler.DropTable(args.Dbname, args.Name, args.DeleteData); err2 != nil {
		switch v := err2.(type) {
		case *NoSuchObjectException:
			result.O1 = v
		case *MetaException:
			result.O3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_table: "+err2.Error())
			oprot.WriteMessageBegin("drop_table", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("drop_table", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetTables struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetTables) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetTablesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_tables", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetTablesResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetTables(args.DbName, args.Pattern); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_tables: "+err2.Error())
			oprot.WriteMessageBegin("get_tables", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_tables", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetAllTables struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetAllTables) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetAllTablesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_all_tables", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetAllTablesResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetAllTables(args.DbName); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_all_tables: "+err2.Error())
			oprot.WriteMessageBegin("get_all_tables", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_all_tables", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetTable struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetTableArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_table", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetTableResult{}
	var retval *Table
	var err2 error
	if retval, err2 = p.handler.GetTable(args.Dbname, args.TblName); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		case *NoSuchObjectException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_table: "+err2.Error())
			oprot.WriteMessageBegin("get_table", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_table", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorAlterTable struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAlterTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AlterTableArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("alter_table", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AlterTableResult{}
	var err2 error
	if err2 = p.handler.AlterTable(args.Dbname, args.TblName, args.NewTbl_); err2 != nil {
		switch v := err2.(type) {
		case *InvalidOperationException:
			result.O1 = v
		case *MetaException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_table: "+err2.Error())
			oprot.WriteMessageBegin("alter_table", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("alter_table", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorAddPartition struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAddPartition) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AddPartitionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("add_partition", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AddPartitionResult{}
	var retval *Partition
	var err2 error
	if retval, err2 = p.handler.AddPartition(args.NewPart_); err2 != nil {
		switch v := err2.(type) {
		case *InvalidObjectException:
			result.O1 = v
		case *AlreadyExistsException:
			result.O2 = v
		case *MetaException:
			result.O3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing add_partition: "+err2.Error())
			oprot.WriteMessageBegin("add_partition", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("add_partition", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorAppendPartition struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAppendPartition) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppendPartitionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("append_partition", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AppendPartitionResult{}
	var retval *Partition
	var err2 error
	if retval, err2 = p.handler.AppendPartition(args.DbName, args.TblName, args.PartVals); err2 != nil {
		switch v := err2.(type) {
		case *InvalidObjectException:
			result.O1 = v
		case *AlreadyExistsException:
			result.O2 = v
		case *MetaException:
			result.O3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing append_partition: "+err2.Error())
			oprot.WriteMessageBegin("append_partition", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("append_partition", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorAppendPartitionByName struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAppendPartitionByName) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AppendPartitionByNameArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("append_partition_by_name", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AppendPartitionByNameResult{}
	var retval *Partition
	var err2 error
	if retval, err2 = p.handler.AppendPartitionByName(args.DbName, args.TblName, args.PartName); err2 != nil {
		switch v := err2.(type) {
		case *InvalidObjectException:
			result.O1 = v
		case *AlreadyExistsException:
			result.O2 = v
		case *MetaException:
			result.O3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing append_partition_by_name: "+err2.Error())
			oprot.WriteMessageBegin("append_partition_by_name", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("append_partition_by_name", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorDropPartition struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropPartition) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DropPartitionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("drop_partition", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DropPartitionResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.DropPartition(args.DbName, args.TblName, args.PartVals, args.DeleteData); err2 != nil {
		switch v := err2.(type) {
		case *NoSuchObjectException:
			result.O1 = v
		case *MetaException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_partition: "+err2.Error())
			oprot.WriteMessageBegin("drop_partition", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("drop_partition", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorDropPartitionByName struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropPartitionByName) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DropPartitionByNameArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("drop_partition_by_name", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DropPartitionByNameResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.DropPartitionByName(args.DbName, args.TblName, args.PartName, args.DeleteData); err2 != nil {
		switch v := err2.(type) {
		case *NoSuchObjectException:
			result.O1 = v
		case *MetaException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_partition_by_name: "+err2.Error())
			oprot.WriteMessageBegin("drop_partition_by_name", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("drop_partition_by_name", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetPartition struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartition) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetPartitionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_partition", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetPartitionResult{}
	var retval *Partition
	var err2 error
	if retval, err2 = p.handler.GetPartition(args.DbName, args.TblName, args.PartVals); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		case *NoSuchObjectException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partition: "+err2.Error())
			oprot.WriteMessageBegin("get_partition", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_partition", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetPartitionWithAuth struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionWithAuth) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetPartitionWithAuthArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_partition_with_auth", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetPartitionWithAuthResult{}
	var retval *Partition
	var err2 error
	if retval, err2 = p.handler.GetPartitionWithAuth(args.DbName, args.TblName, args.PartVals, args.UserName, args.GroupNames); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		case *NoSuchObjectException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partition_with_auth: "+err2.Error())
			oprot.WriteMessageBegin("get_partition_with_auth", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_partition_with_auth", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetPartitionByName struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionByName) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetPartitionByNameArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_partition_by_name", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetPartitionByNameResult{}
	var retval *Partition
	var err2 error
	if retval, err2 = p.handler.GetPartitionByName(args.DbName, args.TblName, args.PartName); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		case *NoSuchObjectException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partition_by_name: "+err2.Error())
			oprot.WriteMessageBegin("get_partition_by_name", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_partition_by_name", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetPartitions struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitions) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetPartitionsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_partitions", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetPartitionsResult{}
	var retval []*Partition
	var err2 error
	if retval, err2 = p.handler.GetPartitions(args.DbName, args.TblName, args.MaxParts); err2 != nil {
		switch v := err2.(type) {
		case *NoSuchObjectException:
			result.O1 = v
		case *MetaException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partitions: "+err2.Error())
			oprot.WriteMessageBegin("get_partitions", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_partitions", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetPartitionsWithAuth struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionsWithAuth) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetPartitionsWithAuthArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_partitions_with_auth", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetPartitionsWithAuthResult{}
	var retval []*Partition
	var err2 error
	if retval, err2 = p.handler.GetPartitionsWithAuth(args.DbName, args.TblName, args.MaxParts, args.UserName, args.GroupNames); err2 != nil {
		switch v := err2.(type) {
		case *NoSuchObjectException:
			result.O1 = v
		case *MetaException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partitions_with_auth: "+err2.Error())
			oprot.WriteMessageBegin("get_partitions_with_auth", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_partitions_with_auth", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetPartitionNames struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionNames) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetPartitionNamesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_partition_names", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetPartitionNamesResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetPartitionNames(args.DbName, args.TblName, args.MaxParts); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partition_names: "+err2.Error())
			oprot.WriteMessageBegin("get_partition_names", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_partition_names", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetPartitionsPs struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionsPs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetPartitionsPsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_partitions_ps", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetPartitionsPsResult{}
	var retval []*Partition
	var err2 error
	if retval, err2 = p.handler.GetPartitionsPs(args.DbName, args.TblName, args.PartVals, args.MaxParts); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partitions_ps: "+err2.Error())
			oprot.WriteMessageBegin("get_partitions_ps", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_partitions_ps", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetPartitionsPsWithAuth struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionsPsWithAuth) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetPartitionsPsWithAuthArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_partitions_ps_with_auth", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetPartitionsPsWithAuthResult{}
	var retval []*Partition
	var err2 error
	if retval, err2 = p.handler.GetPartitionsPsWithAuth(args.DbName, args.TblName, args.PartVals, args.MaxParts, args.UserName, args.GroupNames); err2 != nil {
		switch v := err2.(type) {
		case *NoSuchObjectException:
			result.O1 = v
		case *MetaException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partitions_ps_with_auth: "+err2.Error())
			oprot.WriteMessageBegin("get_partitions_ps_with_auth", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_partitions_ps_with_auth", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetPartitionNamesPs struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionNamesPs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetPartitionNamesPsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_partition_names_ps", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetPartitionNamesPsResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetPartitionNamesPs(args.DbName, args.TblName, args.PartVals, args.MaxParts); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partition_names_ps: "+err2.Error())
			oprot.WriteMessageBegin("get_partition_names_ps", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_partition_names_ps", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetPartitionsByFilter struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPartitionsByFilter) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetPartitionsByFilterArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_partitions_by_filter", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetPartitionsByFilterResult{}
	var retval []*Partition
	var err2 error
	if retval, err2 = p.handler.GetPartitionsByFilter(args.DbName, args.TblName, args.Filter, args.MaxParts); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		case *NoSuchObjectException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_partitions_by_filter: "+err2.Error())
			oprot.WriteMessageBegin("get_partitions_by_filter", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_partitions_by_filter", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorAlterPartition struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAlterPartition) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AlterPartitionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("alter_partition", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AlterPartitionResult{}
	var err2 error
	if err2 = p.handler.AlterPartition(args.DbName, args.TblName, args.NewPart_); err2 != nil {
		switch v := err2.(type) {
		case *InvalidOperationException:
			result.O1 = v
		case *MetaException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_partition: "+err2.Error())
			oprot.WriteMessageBegin("alter_partition", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("alter_partition", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetConfigValue struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetConfigValue) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetConfigValueArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_config_value", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetConfigValueResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetConfigValue(args.Name, args.DefaultValue); err2 != nil {
		switch v := err2.(type) {
		case *ConfigValSecurityException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_config_value: "+err2.Error())
			oprot.WriteMessageBegin("get_config_value", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("get_config_value", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorPartitionNameToVals struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorPartitionNameToVals) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PartitionNameToValsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("partition_name_to_vals", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := PartitionNameToValsResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.PartitionNameToVals(args.PartName); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing partition_name_to_vals: "+err2.Error())
			oprot.WriteMessageBegin("partition_name_to_vals", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("partition_name_to_vals", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorPartitionNameToSpec struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorPartitionNameToSpec) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PartitionNameToSpecArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("partition_name_to_spec", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := PartitionNameToSpecResult{}
	var retval map[string]string
	var err2 error
	if retval, err2 = p.handler.PartitionNameToSpec(args.PartName); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing partition_name_to_spec: "+err2.Error())
			oprot.WriteMessageBegin("partition_name_to_spec", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("partition_name_to_spec", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorAddIndex struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAddIndex) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AddIndexArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("add_index", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AddIndexResult{}
	var retval *Index
	var err2 error
	if retval, err2 = p.handler.AddIndex(args.NewIndex_, args.IndexTable); err2 != nil {
		switch v := err2.(type) {
		case *InvalidObjectException:
			result.O1 = v
		case *AlreadyExistsException:
			result.O2 = v
		case *MetaException:
			result.O3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing add_index: "+err2.Error())
			oprot.WriteMessageBegin("add_index", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("add_index", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorAlterIndex struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorAlterIndex) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AlterIndexArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("alter_index", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AlterIndexResult{}
	var err2 error
	if err2 = p.handler.AlterIndex(args.Dbname, args.BaseTblName, args.IdxName, args.NewIdx_); err2 != nil {
		switch v := err2.(type) {
		case *InvalidOperationException:
			result.O1 = v
		case *MetaException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing alter_index: "+err2.Error())
			oprot.WriteMessageBegin("alter_index", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("alter_index", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorDropIndexByName struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropIndexByName) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DropIndexByNameArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("drop_index_by_name", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DropIndexByNameResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.DropIndexByName(args.DbName, args.TblName, args.IndexName, args.DeleteData); err2 != nil {
		switch v := err2.(type) {
		case *NoSuchObjectException:
			result.O1 = v
		case *MetaException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_index_by_name: "+err2.Error())
			oprot.WriteMessageBegin("drop_index_by_name", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("drop_index_by_name", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetIndexByName struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetIndexByName) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetIndexByNameArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_index_by_name", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetIndexByNameResult{}
	var retval *Index
	var err2 error
	if retval, err2 = p.handler.GetIndexByName(args.DbName, args.TblName, args.IndexName); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		case *NoSuchObjectException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_index_by_name: "+err2.Error())
			oprot.WriteMessageBegin("get_index_by_name", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_index_by_name", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetIndexes struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetIndexes) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetIndexesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_indexes", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetIndexesResult{}
	var retval []*Index
	var err2 error
	if retval, err2 = p.handler.GetIndexes(args.DbName, args.TblName, args.MaxIndexes); err2 != nil {
		switch v := err2.(type) {
		case *NoSuchObjectException:
			result.O1 = v
		case *MetaException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_indexes: "+err2.Error())
			oprot.WriteMessageBegin("get_indexes", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_indexes", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetIndexNames struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetIndexNames) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetIndexNamesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_index_names", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetIndexNamesResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetIndexNames(args.DbName, args.TblName, args.MaxIndexes); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_index_names: "+err2.Error())
			oprot.WriteMessageBegin("get_index_names", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_index_names", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorCreateRole struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorCreateRole) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CreateRoleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("create_role", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CreateRoleResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.CreateRole(args.Role); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing create_role: "+err2.Error())
			oprot.WriteMessageBegin("create_role", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("create_role", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorDropRole struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorDropRole) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DropRoleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("drop_role", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DropRoleResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.DropRole(args.RoleName); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing drop_role: "+err2.Error())
			oprot.WriteMessageBegin("drop_role", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("drop_role", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetRoleNames struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetRoleNames) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetRoleNamesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_role_names", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetRoleNamesResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetRoleNames(); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_role_names: "+err2.Error())
			oprot.WriteMessageBegin("get_role_names", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_role_names", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGrantRole struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGrantRole) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GrantRoleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("grant_role", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GrantRoleResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.GrantRole(args.RoleName, args.PrincipalName, args.PrincipalType, args.Grantor, args.GrantorType, args.GrantOption); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing grant_role: "+err2.Error())
			oprot.WriteMessageBegin("grant_role", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("grant_role", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorRevokeRole struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorRevokeRole) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RevokeRoleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("revoke_role", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RevokeRoleResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.RevokeRole(args.RoleName, args.PrincipalName, args.PrincipalType); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing revoke_role: "+err2.Error())
			oprot.WriteMessageBegin("revoke_role", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("revoke_role", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorListRoles struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorListRoles) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ListRolesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("list_roles", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ListRolesResult{}
	var retval []*Role
	var err2 error
	if retval, err2 = p.handler.ListRoles(args.PrincipalName, args.PrincipalType); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing list_roles: "+err2.Error())
			oprot.WriteMessageBegin("list_roles", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("list_roles", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetPrivilegeSet struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetPrivilegeSet) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetPrivilegeSetArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_privilege_set", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetPrivilegeSetResult{}
	var retval *PrincipalPrivilegeSet
	var err2 error
	if retval, err2 = p.handler.GetPrivilegeSet(args.HiveObject, args.UserName, args.GroupNames); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_privilege_set: "+err2.Error())
			oprot.WriteMessageBegin("get_privilege_set", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_privilege_set", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorListPrivileges struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorListPrivileges) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ListPrivilegesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("list_privileges", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ListPrivilegesResult{}
	var retval []*HiveObjectPrivilege
	var err2 error
	if retval, err2 = p.handler.ListPrivileges(args.PrincipalName, args.PrincipalType, args.HiveObject); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing list_privileges: "+err2.Error())
			oprot.WriteMessageBegin("list_privileges", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("list_privileges", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGrantPrivileges struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGrantPrivileges) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GrantPrivilegesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("grant_privileges", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GrantPrivilegesResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.GrantPrivileges(args.Privileges); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing grant_privileges: "+err2.Error())
			oprot.WriteMessageBegin("grant_privileges", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("grant_privileges", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorRevokePrivileges struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorRevokePrivileges) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RevokePrivilegesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("revoke_privileges", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RevokePrivilegesResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.RevokePrivileges(args.Privileges); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing revoke_privileges: "+err2.Error())
			oprot.WriteMessageBegin("revoke_privileges", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("revoke_privileges", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetDelegationToken struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetDelegationToken) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetDelegationTokenArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_delegation_token", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetDelegationTokenResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetDelegationToken(args.RenewerKerberosPrincipalName); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_delegation_token: "+err2.Error())
			oprot.WriteMessageBegin("get_delegation_token", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("get_delegation_token", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorGetDelegationTokenWithSignature struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorGetDelegationTokenWithSignature) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetDelegationTokenWithSignatureArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_delegation_token_with_signature", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetDelegationTokenWithSignatureResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetDelegationTokenWithSignature(args.RenewerKerberosPrincipalName, args.TokenSignature); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_delegation_token_with_signature: "+err2.Error())
			oprot.WriteMessageBegin("get_delegation_token_with_signature", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("get_delegation_token_with_signature", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorRenewDelegationToken struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorRenewDelegationToken) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RenewDelegationTokenArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("renew_delegation_token", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RenewDelegationTokenResult{}
	var retval int64
	var err2 error
	if retval, err2 = p.handler.RenewDelegationToken(args.TokenStrForm); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing renew_delegation_token: "+err2.Error())
			oprot.WriteMessageBegin("renew_delegation_token", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("renew_delegation_token", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type thriftHiveMetastoreProcessorCancelDelegationToken struct {
	handler ThriftHiveMetastore
}

func (p *thriftHiveMetastoreProcessorCancelDelegationToken) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CancelDelegationTokenArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("cancel_delegation_token", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CancelDelegationTokenResult{}
	var err2 error
	if err2 = p.handler.CancelDelegationToken(args.TokenStrForm); err2 != nil {
		switch v := err2.(type) {
		case *MetaException:
			result.O1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing cancel_delegation_token: "+err2.Error())
			oprot.WriteMessageBegin("cancel_delegation_token", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("cancel_delegation_token", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type CreateDatabaseArgs struct {
	Database *Database `thrift:"database,1" json:"database"`
}

func NewCreateDatabaseArgs() *CreateDatabaseArgs {
	return &CreateDatabaseArgs{}
}

var CreateDatabaseArgs_Database_DEFAULT *Database

func (p *CreateDatabaseArgs) GetDatabase() *Database {
	if !p.IsSetDatabase() {
		return CreateDatabaseArgs_Database_DEFAULT
	}
	return p.Database
}
func (p *CreateDatabaseArgs) IsSetDatabase() bool {
	return p.Database != nil
}

func (p *CreateDatabaseArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateDatabaseArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Database = &Database{}
	if err := p.Database.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Database, err)
	}
	return nil
}

func (p *CreateDatabaseArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_database_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateDatabaseArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("database", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:database: %s", p, err)
	}
	if err := p.Database.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Database, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:database: %s", p, err)
	}
	return err
}

func (p *CreateDatabaseArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateDatabaseArgs(%+v)", *p)
}

type CreateDatabaseResult struct {
	O1 *AlreadyExistsException `thrift:"o1,1" json:"o1"`
	O2 *InvalidObjectException `thrift:"o2,2" json:"o2"`
	O3 *MetaException          `thrift:"o3,3" json:"o3"`
}

func NewCreateDatabaseResult() *CreateDatabaseResult {
	return &CreateDatabaseResult{}
}

var CreateDatabaseResult_O1_DEFAULT *AlreadyExistsException

func (p *CreateDatabaseResult) GetO1() *AlreadyExistsException {
	if !p.IsSetO1() {
		return CreateDatabaseResult_O1_DEFAULT
	}
	return p.O1
}

var CreateDatabaseResult_O2_DEFAULT *InvalidObjectException

func (p *CreateDatabaseResult) GetO2() *InvalidObjectException {
	if !p.IsSetO2() {
		return CreateDatabaseResult_O2_DEFAULT
	}
	return p.O2
}

var CreateDatabaseResult_O3_DEFAULT *MetaException

func (p *CreateDatabaseResult) GetO3() *MetaException {
	if !p.IsSetO3() {
		return CreateDatabaseResult_O3_DEFAULT
	}
	return p.O3
}
func (p *CreateDatabaseResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *CreateDatabaseResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *CreateDatabaseResult) IsSetO3() bool {
	return p.O3 != nil
}

func (p *CreateDatabaseResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateDatabaseResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &AlreadyExistsException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *CreateDatabaseResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &InvalidObjectException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *CreateDatabaseResult) ReadField3(iprot thrift.TProtocol) error {
	p.O3 = &MetaException{}
	if err := p.O3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O3, err)
	}
	return nil
}

func (p *CreateDatabaseResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_database_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateDatabaseResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *CreateDatabaseResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *CreateDatabaseResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetO3() {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:o3: %s", p, err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O3, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:o3: %s", p, err)
		}
	}
	return err
}

func (p *CreateDatabaseResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateDatabaseResult(%+v)", *p)
}

type GetDatabaseArgs struct {
	Name string `thrift:"name,1" json:"name"`
}

func NewGetDatabaseArgs() *GetDatabaseArgs {
	return &GetDatabaseArgs{}
}

func (p *GetDatabaseArgs) GetName() string {
	return p.Name
}
func (p *GetDatabaseArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetDatabaseArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *GetDatabaseArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_database_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetDatabaseArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:name: %s", p, err)
	}
	return err
}

func (p *GetDatabaseArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDatabaseArgs(%+v)", *p)
}

type GetDatabaseResult struct {
	Success *Database              `thrift:"success,0" json:"success"`
	O1      *NoSuchObjectException `thrift:"o1,1" json:"o1"`
	O2      *MetaException         `thrift:"o2,2" json:"o2"`
}

func NewGetDatabaseResult() *GetDatabaseResult {
	return &GetDatabaseResult{}
}

var GetDatabaseResult_Success_DEFAULT *Database

func (p *GetDatabaseResult) GetSuccess() *Database {
	if !p.IsSetSuccess() {
		return GetDatabaseResult_Success_DEFAULT
	}
	return p.Success
}

var GetDatabaseResult_O1_DEFAULT *NoSuchObjectException

func (p *GetDatabaseResult) GetO1() *NoSuchObjectException {
	if !p.IsSetO1() {
		return GetDatabaseResult_O1_DEFAULT
	}
	return p.O1
}

var GetDatabaseResult_O2_DEFAULT *MetaException

func (p *GetDatabaseResult) GetO2() *MetaException {
	if !p.IsSetO2() {
		return GetDatabaseResult_O2_DEFAULT
	}
	return p.O2
}
func (p *GetDatabaseResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetDatabaseResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetDatabaseResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *GetDatabaseResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetDatabaseResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Database{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetDatabaseResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &NoSuchObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetDatabaseResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &MetaException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *GetDatabaseResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_database_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetDatabaseResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetDatabaseResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetDatabaseResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetDatabaseResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDatabaseResult(%+v)", *p)
}

type DropDatabaseArgs struct {
	Name       string `thrift:"name,1" json:"name"`
	DeleteData bool   `thrift:"deleteData,2" json:"deleteData"`
}

func NewDropDatabaseArgs() *DropDatabaseArgs {
	return &DropDatabaseArgs{}
}

func (p *DropDatabaseArgs) GetName() string {
	return p.Name
}

func (p *DropDatabaseArgs) GetDeleteData() bool {
	return p.DeleteData
}
func (p *DropDatabaseArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DropDatabaseArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *DropDatabaseArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.DeleteData = v
	}
	return nil
}

func (p *DropDatabaseArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_database_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DropDatabaseArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:name: %s", p, err)
	}
	return err
}

func (p *DropDatabaseArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deleteData", thrift.BOOL, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:deleteData: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.DeleteData)); err != nil {
		return fmt.Errorf("%T.deleteData (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:deleteData: %s", p, err)
	}
	return err
}

func (p *DropDatabaseArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropDatabaseArgs(%+v)", *p)
}

type DropDatabaseResult struct {
	O1 *NoSuchObjectException     `thrift:"o1,1" json:"o1"`
	O2 *InvalidOperationException `thrift:"o2,2" json:"o2"`
	O3 *MetaException             `thrift:"o3,3" json:"o3"`
}

func NewDropDatabaseResult() *DropDatabaseResult {
	return &DropDatabaseResult{}
}

var DropDatabaseResult_O1_DEFAULT *NoSuchObjectException

func (p *DropDatabaseResult) GetO1() *NoSuchObjectException {
	if !p.IsSetO1() {
		return DropDatabaseResult_O1_DEFAULT
	}
	return p.O1
}

var DropDatabaseResult_O2_DEFAULT *InvalidOperationException

func (p *DropDatabaseResult) GetO2() *InvalidOperationException {
	if !p.IsSetO2() {
		return DropDatabaseResult_O2_DEFAULT
	}
	return p.O2
}

var DropDatabaseResult_O3_DEFAULT *MetaException

func (p *DropDatabaseResult) GetO3() *MetaException {
	if !p.IsSetO3() {
		return DropDatabaseResult_O3_DEFAULT
	}
	return p.O3
}
func (p *DropDatabaseResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *DropDatabaseResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *DropDatabaseResult) IsSetO3() bool {
	return p.O3 != nil
}

func (p *DropDatabaseResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DropDatabaseResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &NoSuchObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *DropDatabaseResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &InvalidOperationException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *DropDatabaseResult) ReadField3(iprot thrift.TProtocol) error {
	p.O3 = &MetaException{}
	if err := p.O3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O3, err)
	}
	return nil
}

func (p *DropDatabaseResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_database_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DropDatabaseResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *DropDatabaseResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *DropDatabaseResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetO3() {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:o3: %s", p, err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O3, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:o3: %s", p, err)
		}
	}
	return err
}

func (p *DropDatabaseResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropDatabaseResult(%+v)", *p)
}

type GetDatabasesArgs struct {
	Pattern string `thrift:"pattern,1" json:"pattern"`
}

func NewGetDatabasesArgs() *GetDatabasesArgs {
	return &GetDatabasesArgs{}
}

func (p *GetDatabasesArgs) GetPattern() string {
	return p.Pattern
}
func (p *GetDatabasesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetDatabasesArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Pattern = v
	}
	return nil
}

func (p *GetDatabasesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_databases_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetDatabasesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pattern", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:pattern: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Pattern)); err != nil {
		return fmt.Errorf("%T.pattern (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:pattern: %s", p, err)
	}
	return err
}

func (p *GetDatabasesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDatabasesArgs(%+v)", *p)
}

type GetDatabasesResult struct {
	Success []string       `thrift:"success,0" json:"success"`
	O1      *MetaException `thrift:"o1,1" json:"o1"`
}

func NewGetDatabasesResult() *GetDatabasesResult {
	return &GetDatabasesResult{}
}

var GetDatabasesResult_Success_DEFAULT []string

func (p *GetDatabasesResult) GetSuccess() []string {
	return p.Success
}

var GetDatabasesResult_O1_DEFAULT *MetaException

func (p *GetDatabasesResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return GetDatabasesResult_O1_DEFAULT
	}
	return p.O1
}
func (p *GetDatabasesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetDatabasesResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetDatabasesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetDatabasesResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem147 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem147 = v
		}
		p.Success = append(p.Success, _elem147)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetDatabasesResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetDatabasesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_databases_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetDatabasesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetDatabasesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetDatabasesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDatabasesResult(%+v)", *p)
}

type GetAllDatabasesArgs struct {
}

func NewGetAllDatabasesArgs() *GetAllDatabasesArgs {
	return &GetAllDatabasesArgs{}
}

func (p *GetAllDatabasesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetAllDatabasesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_all_databases_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetAllDatabasesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetAllDatabasesArgs(%+v)", *p)
}

type GetAllDatabasesResult struct {
	Success []string       `thrift:"success,0" json:"success"`
	O1      *MetaException `thrift:"o1,1" json:"o1"`
}

func NewGetAllDatabasesResult() *GetAllDatabasesResult {
	return &GetAllDatabasesResult{}
}

var GetAllDatabasesResult_Success_DEFAULT []string

func (p *GetAllDatabasesResult) GetSuccess() []string {
	return p.Success
}

var GetAllDatabasesResult_O1_DEFAULT *MetaException

func (p *GetAllDatabasesResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return GetAllDatabasesResult_O1_DEFAULT
	}
	return p.O1
}
func (p *GetAllDatabasesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetAllDatabasesResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetAllDatabasesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetAllDatabasesResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem148 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem148 = v
		}
		p.Success = append(p.Success, _elem148)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetAllDatabasesResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetAllDatabasesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_all_databases_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetAllDatabasesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetAllDatabasesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetAllDatabasesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetAllDatabasesResult(%+v)", *p)
}

type AlterDatabaseArgs struct {
	Dbname string    `thrift:"dbname,1" json:"dbname"`
	Db     *Database `thrift:"db,2" json:"db"`
}

func NewAlterDatabaseArgs() *AlterDatabaseArgs {
	return &AlterDatabaseArgs{}
}

func (p *AlterDatabaseArgs) GetDbname() string {
	return p.Dbname
}

var AlterDatabaseArgs_Db_DEFAULT *Database

func (p *AlterDatabaseArgs) GetDb() *Database {
	if !p.IsSetDb() {
		return AlterDatabaseArgs_Db_DEFAULT
	}
	return p.Db
}
func (p *AlterDatabaseArgs) IsSetDb() bool {
	return p.Db != nil
}

func (p *AlterDatabaseArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AlterDatabaseArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Dbname = v
	}
	return nil
}

func (p *AlterDatabaseArgs) ReadField2(iprot thrift.TProtocol) error {
	p.Db = &Database{}
	if err := p.Db.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Db, err)
	}
	return nil
}

func (p *AlterDatabaseArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_database_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AlterDatabaseArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dbname", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:dbname: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Dbname)); err != nil {
		return fmt.Errorf("%T.dbname (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:dbname: %s", p, err)
	}
	return err
}

func (p *AlterDatabaseArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:db: %s", p, err)
	}
	if err := p.Db.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Db, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:db: %s", p, err)
	}
	return err
}

func (p *AlterDatabaseArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AlterDatabaseArgs(%+v)", *p)
}

type AlterDatabaseResult struct {
	O1 *MetaException         `thrift:"o1,1" json:"o1"`
	O2 *NoSuchObjectException `thrift:"o2,2" json:"o2"`
}

func NewAlterDatabaseResult() *AlterDatabaseResult {
	return &AlterDatabaseResult{}
}

var AlterDatabaseResult_O1_DEFAULT *MetaException

func (p *AlterDatabaseResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return AlterDatabaseResult_O1_DEFAULT
	}
	return p.O1
}

var AlterDatabaseResult_O2_DEFAULT *NoSuchObjectException

func (p *AlterDatabaseResult) GetO2() *NoSuchObjectException {
	if !p.IsSetO2() {
		return AlterDatabaseResult_O2_DEFAULT
	}
	return p.O2
}
func (p *AlterDatabaseResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *AlterDatabaseResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *AlterDatabaseResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AlterDatabaseResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *AlterDatabaseResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &NoSuchObjectException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *AlterDatabaseResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_database_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AlterDatabaseResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *AlterDatabaseResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *AlterDatabaseResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AlterDatabaseResult(%+v)", *p)
}

type GetTypeArgs struct {
	Name string `thrift:"name,1" json:"name"`
}

func NewGetTypeArgs() *GetTypeArgs {
	return &GetTypeArgs{}
}

func (p *GetTypeArgs) GetName() string {
	return p.Name
}
func (p *GetTypeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTypeArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *GetTypeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_type_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTypeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:name: %s", p, err)
	}
	return err
}

func (p *GetTypeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTypeArgs(%+v)", *p)
}

type GetTypeResult struct {
	Success *Type                  `thrift:"success,0" json:"success"`
	O1      *MetaException         `thrift:"o1,1" json:"o1"`
	O2      *NoSuchObjectException `thrift:"o2,2" json:"o2"`
}

func NewGetTypeResult() *GetTypeResult {
	return &GetTypeResult{}
}

var GetTypeResult_Success_DEFAULT *Type

func (p *GetTypeResult) GetSuccess() *Type {
	if !p.IsSetSuccess() {
		return GetTypeResult_Success_DEFAULT
	}
	return p.Success
}

var GetTypeResult_O1_DEFAULT *MetaException

func (p *GetTypeResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return GetTypeResult_O1_DEFAULT
	}
	return p.O1
}

var GetTypeResult_O2_DEFAULT *NoSuchObjectException

func (p *GetTypeResult) GetO2() *NoSuchObjectException {
	if !p.IsSetO2() {
		return GetTypeResult_O2_DEFAULT
	}
	return p.O2
}
func (p *GetTypeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetTypeResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetTypeResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *GetTypeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTypeResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Type{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetTypeResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetTypeResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &NoSuchObjectException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *GetTypeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_type_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTypeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetTypeResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetTypeResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetTypeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTypeResult(%+v)", *p)
}

type CreateTypeArgs struct {
	TypeA1 *Type `thrift:"type,1" json:"type"`
}

func NewCreateTypeArgs() *CreateTypeArgs {
	return &CreateTypeArgs{}
}

var CreateTypeArgs_TypeA1_DEFAULT *Type

func (p *CreateTypeArgs) GetTypeA1() *Type {
	if !p.IsSetTypeA1() {
		return CreateTypeArgs_TypeA1_DEFAULT
	}
	return p.TypeA1
}
func (p *CreateTypeArgs) IsSetTypeA1() bool {
	return p.TypeA1 != nil
}

func (p *CreateTypeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateTypeArgs) ReadField1(iprot thrift.TProtocol) error {
	p.TypeA1 = &Type{}
	if err := p.TypeA1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TypeA1, err)
	}
	return nil
}

func (p *CreateTypeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_type_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateTypeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:type: %s", p, err)
	}
	if err := p.TypeA1.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TypeA1, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:type: %s", p, err)
	}
	return err
}

func (p *CreateTypeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateTypeArgs(%+v)", *p)
}

type CreateTypeResult struct {
	Success *bool                   `thrift:"success,0" json:"success"`
	O1      *AlreadyExistsException `thrift:"o1,1" json:"o1"`
	O2      *InvalidObjectException `thrift:"o2,2" json:"o2"`
	O3      *MetaException          `thrift:"o3,3" json:"o3"`
}

func NewCreateTypeResult() *CreateTypeResult {
	return &CreateTypeResult{}
}

var CreateTypeResult_Success_DEFAULT bool

func (p *CreateTypeResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return CreateTypeResult_Success_DEFAULT
	}
	return *p.Success
}

var CreateTypeResult_O1_DEFAULT *AlreadyExistsException

func (p *CreateTypeResult) GetO1() *AlreadyExistsException {
	if !p.IsSetO1() {
		return CreateTypeResult_O1_DEFAULT
	}
	return p.O1
}

var CreateTypeResult_O2_DEFAULT *InvalidObjectException

func (p *CreateTypeResult) GetO2() *InvalidObjectException {
	if !p.IsSetO2() {
		return CreateTypeResult_O2_DEFAULT
	}
	return p.O2
}

var CreateTypeResult_O3_DEFAULT *MetaException

func (p *CreateTypeResult) GetO3() *MetaException {
	if !p.IsSetO3() {
		return CreateTypeResult_O3_DEFAULT
	}
	return p.O3
}
func (p *CreateTypeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateTypeResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *CreateTypeResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *CreateTypeResult) IsSetO3() bool {
	return p.O3 != nil
}

func (p *CreateTypeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateTypeResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *CreateTypeResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &AlreadyExistsException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *CreateTypeResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &InvalidObjectException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *CreateTypeResult) ReadField3(iprot thrift.TProtocol) error {
	p.O3 = &MetaException{}
	if err := p.O3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O3, err)
	}
	return nil
}

func (p *CreateTypeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_type_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateTypeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *CreateTypeResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *CreateTypeResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *CreateTypeResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetO3() {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:o3: %s", p, err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O3, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:o3: %s", p, err)
		}
	}
	return err
}

func (p *CreateTypeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateTypeResult(%+v)", *p)
}

type DropTypeArgs struct {
	TypeA1 string `thrift:"type,1" json:"type"`
}

func NewDropTypeArgs() *DropTypeArgs {
	return &DropTypeArgs{}
}

func (p *DropTypeArgs) GetTypeA1() string {
	return p.TypeA1
}
func (p *DropTypeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DropTypeArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TypeA1 = v
	}
	return nil
}

func (p *DropTypeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_type_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DropTypeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:type: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TypeA1)); err != nil {
		return fmt.Errorf("%T.type (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:type: %s", p, err)
	}
	return err
}

func (p *DropTypeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropTypeArgs(%+v)", *p)
}

type DropTypeResult struct {
	Success *bool                  `thrift:"success,0" json:"success"`
	O1      *MetaException         `thrift:"o1,1" json:"o1"`
	O2      *NoSuchObjectException `thrift:"o2,2" json:"o2"`
}

func NewDropTypeResult() *DropTypeResult {
	return &DropTypeResult{}
}

var DropTypeResult_Success_DEFAULT bool

func (p *DropTypeResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return DropTypeResult_Success_DEFAULT
	}
	return *p.Success
}

var DropTypeResult_O1_DEFAULT *MetaException

func (p *DropTypeResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return DropTypeResult_O1_DEFAULT
	}
	return p.O1
}

var DropTypeResult_O2_DEFAULT *NoSuchObjectException

func (p *DropTypeResult) GetO2() *NoSuchObjectException {
	if !p.IsSetO2() {
		return DropTypeResult_O2_DEFAULT
	}
	return p.O2
}
func (p *DropTypeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DropTypeResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *DropTypeResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *DropTypeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DropTypeResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *DropTypeResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *DropTypeResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &NoSuchObjectException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *DropTypeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_type_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DropTypeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *DropTypeResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *DropTypeResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *DropTypeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropTypeResult(%+v)", *p)
}

type GetTypeAllArgs struct {
	Name string `thrift:"name,1" json:"name"`
}

func NewGetTypeAllArgs() *GetTypeAllArgs {
	return &GetTypeAllArgs{}
}

func (p *GetTypeAllArgs) GetName() string {
	return p.Name
}
func (p *GetTypeAllArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTypeAllArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *GetTypeAllArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_type_all_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTypeAllArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:name: %s", p, err)
	}
	return err
}

func (p *GetTypeAllArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTypeAllArgs(%+v)", *p)
}

type GetTypeAllResult struct {
	Success map[string]*Type `thrift:"success,0" json:"success"`
	O2      *MetaException   `thrift:"o2,1" json:"o2"`
}

func NewGetTypeAllResult() *GetTypeAllResult {
	return &GetTypeAllResult{}
}

var GetTypeAllResult_Success_DEFAULT map[string]*Type

func (p *GetTypeAllResult) GetSuccess() map[string]*Type {
	return p.Success
}

var GetTypeAllResult_O2_DEFAULT *MetaException

func (p *GetTypeAllResult) GetO2() *MetaException {
	if !p.IsSetO2() {
		return GetTypeAllResult_O2_DEFAULT
	}
	return p.O2
}
func (p *GetTypeAllResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetTypeAllResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *GetTypeAllResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTypeAllResult) ReadField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]*Type, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key149 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key149 = v
		}
		_val150 := &Type{}
		if err := _val150.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val150, err)
		}
		p.Success[_key149] = _val150
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *GetTypeAllResult) ReadField1(iprot thrift.TProtocol) error {
	p.O2 = &MetaException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *GetTypeAllResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_type_all_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTypeAllResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetTypeAllResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetTypeAllResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTypeAllResult(%+v)", *p)
}

type GetFieldsArgs struct {
	DbName    string `thrift:"db_name,1" json:"db_name"`
	TableName string `thrift:"table_name,2" json:"table_name"`
}

func NewGetFieldsArgs() *GetFieldsArgs {
	return &GetFieldsArgs{}
}

func (p *GetFieldsArgs) GetDbName() string {
	return p.DbName
}

func (p *GetFieldsArgs) GetTableName() string {
	return p.TableName
}
func (p *GetFieldsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetFieldsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *GetFieldsArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *GetFieldsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_fields_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetFieldsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *GetFieldsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("table_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:table_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return fmt.Errorf("%T.table_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:table_name: %s", p, err)
	}
	return err
}

func (p *GetFieldsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetFieldsArgs(%+v)", *p)
}

type GetFieldsResult struct {
	Success []*FieldSchema         `thrift:"success,0" json:"success"`
	O1      *MetaException         `thrift:"o1,1" json:"o1"`
	O2      *UnknownTableException `thrift:"o2,2" json:"o2"`
	O3      *UnknownDBException    `thrift:"o3,3" json:"o3"`
}

func NewGetFieldsResult() *GetFieldsResult {
	return &GetFieldsResult{}
}

var GetFieldsResult_Success_DEFAULT []*FieldSchema

func (p *GetFieldsResult) GetSuccess() []*FieldSchema {
	return p.Success
}

var GetFieldsResult_O1_DEFAULT *MetaException

func (p *GetFieldsResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return GetFieldsResult_O1_DEFAULT
	}
	return p.O1
}

var GetFieldsResult_O2_DEFAULT *UnknownTableException

func (p *GetFieldsResult) GetO2() *UnknownTableException {
	if !p.IsSetO2() {
		return GetFieldsResult_O2_DEFAULT
	}
	return p.O2
}

var GetFieldsResult_O3_DEFAULT *UnknownDBException

func (p *GetFieldsResult) GetO3() *UnknownDBException {
	if !p.IsSetO3() {
		return GetFieldsResult_O3_DEFAULT
	}
	return p.O3
}
func (p *GetFieldsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetFieldsResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetFieldsResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *GetFieldsResult) IsSetO3() bool {
	return p.O3 != nil
}

func (p *GetFieldsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetFieldsResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*FieldSchema, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem151 := &FieldSchema{}
		if err := _elem151.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem151, err)
		}
		p.Success = append(p.Success, _elem151)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetFieldsResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetFieldsResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &UnknownTableException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *GetFieldsResult) ReadField3(iprot thrift.TProtocol) error {
	p.O3 = &UnknownDBException{}
	if err := p.O3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O3, err)
	}
	return nil
}

func (p *GetFieldsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_fields_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetFieldsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetFieldsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetFieldsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetFieldsResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetO3() {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:o3: %s", p, err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O3, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:o3: %s", p, err)
		}
	}
	return err
}

func (p *GetFieldsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetFieldsResult(%+v)", *p)
}

type GetSchemaArgs struct {
	DbName    string `thrift:"db_name,1" json:"db_name"`
	TableName string `thrift:"table_name,2" json:"table_name"`
}

func NewGetSchemaArgs() *GetSchemaArgs {
	return &GetSchemaArgs{}
}

func (p *GetSchemaArgs) GetDbName() string {
	return p.DbName
}

func (p *GetSchemaArgs) GetTableName() string {
	return p.TableName
}
func (p *GetSchemaArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetSchemaArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *GetSchemaArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *GetSchemaArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_schema_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetSchemaArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *GetSchemaArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("table_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:table_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return fmt.Errorf("%T.table_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:table_name: %s", p, err)
	}
	return err
}

func (p *GetSchemaArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSchemaArgs(%+v)", *p)
}

type GetSchemaResult struct {
	Success []*FieldSchema         `thrift:"success,0" json:"success"`
	O1      *MetaException         `thrift:"o1,1" json:"o1"`
	O2      *UnknownTableException `thrift:"o2,2" json:"o2"`
	O3      *UnknownDBException    `thrift:"o3,3" json:"o3"`
}

func NewGetSchemaResult() *GetSchemaResult {
	return &GetSchemaResult{}
}

var GetSchemaResult_Success_DEFAULT []*FieldSchema

func (p *GetSchemaResult) GetSuccess() []*FieldSchema {
	return p.Success
}

var GetSchemaResult_O1_DEFAULT *MetaException

func (p *GetSchemaResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return GetSchemaResult_O1_DEFAULT
	}
	return p.O1
}

var GetSchemaResult_O2_DEFAULT *UnknownTableException

func (p *GetSchemaResult) GetO2() *UnknownTableException {
	if !p.IsSetO2() {
		return GetSchemaResult_O2_DEFAULT
	}
	return p.O2
}

var GetSchemaResult_O3_DEFAULT *UnknownDBException

func (p *GetSchemaResult) GetO3() *UnknownDBException {
	if !p.IsSetO3() {
		return GetSchemaResult_O3_DEFAULT
	}
	return p.O3
}
func (p *GetSchemaResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetSchemaResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetSchemaResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *GetSchemaResult) IsSetO3() bool {
	return p.O3 != nil
}

func (p *GetSchemaResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetSchemaResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*FieldSchema, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem152 := &FieldSchema{}
		if err := _elem152.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem152, err)
		}
		p.Success = append(p.Success, _elem152)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetSchemaResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetSchemaResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &UnknownTableException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *GetSchemaResult) ReadField3(iprot thrift.TProtocol) error {
	p.O3 = &UnknownDBException{}
	if err := p.O3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O3, err)
	}
	return nil
}

func (p *GetSchemaResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_schema_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetSchemaResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetSchemaResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetSchemaResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetSchemaResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetO3() {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:o3: %s", p, err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O3, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:o3: %s", p, err)
		}
	}
	return err
}

func (p *GetSchemaResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetSchemaResult(%+v)", *p)
}

type CreateTableArgs struct {
	Tbl *Table `thrift:"tbl,1" json:"tbl"`
}

func NewCreateTableArgs() *CreateTableArgs {
	return &CreateTableArgs{}
}

var CreateTableArgs_Tbl_DEFAULT *Table

func (p *CreateTableArgs) GetTbl() *Table {
	if !p.IsSetTbl() {
		return CreateTableArgs_Tbl_DEFAULT
	}
	return p.Tbl
}
func (p *CreateTableArgs) IsSetTbl() bool {
	return p.Tbl != nil
}

func (p *CreateTableArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateTableArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Tbl = &Table{}
	if err := p.Tbl.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Tbl, err)
	}
	return nil
}

func (p *CreateTableArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_table_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:tbl: %s", p, err)
	}
	if err := p.Tbl.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Tbl, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:tbl: %s", p, err)
	}
	return err
}

func (p *CreateTableArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateTableArgs(%+v)", *p)
}

type CreateTableResult struct {
	O1 *AlreadyExistsException `thrift:"o1,1" json:"o1"`
	O2 *InvalidObjectException `thrift:"o2,2" json:"o2"`
	O3 *MetaException          `thrift:"o3,3" json:"o3"`
	O4 *NoSuchObjectException  `thrift:"o4,4" json:"o4"`
}

func NewCreateTableResult() *CreateTableResult {
	return &CreateTableResult{}
}

var CreateTableResult_O1_DEFAULT *AlreadyExistsException

func (p *CreateTableResult) GetO1() *AlreadyExistsException {
	if !p.IsSetO1() {
		return CreateTableResult_O1_DEFAULT
	}
	return p.O1
}

var CreateTableResult_O2_DEFAULT *InvalidObjectException

func (p *CreateTableResult) GetO2() *InvalidObjectException {
	if !p.IsSetO2() {
		return CreateTableResult_O2_DEFAULT
	}
	return p.O2
}

var CreateTableResult_O3_DEFAULT *MetaException

func (p *CreateTableResult) GetO3() *MetaException {
	if !p.IsSetO3() {
		return CreateTableResult_O3_DEFAULT
	}
	return p.O3
}

var CreateTableResult_O4_DEFAULT *NoSuchObjectException

func (p *CreateTableResult) GetO4() *NoSuchObjectException {
	if !p.IsSetO4() {
		return CreateTableResult_O4_DEFAULT
	}
	return p.O4
}
func (p *CreateTableResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *CreateTableResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *CreateTableResult) IsSetO3() bool {
	return p.O3 != nil
}

func (p *CreateTableResult) IsSetO4() bool {
	return p.O4 != nil
}

func (p *CreateTableResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateTableResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &AlreadyExistsException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *CreateTableResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &InvalidObjectException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *CreateTableResult) ReadField3(iprot thrift.TProtocol) error {
	p.O3 = &MetaException{}
	if err := p.O3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O3, err)
	}
	return nil
}

func (p *CreateTableResult) ReadField4(iprot thrift.TProtocol) error {
	p.O4 = &NoSuchObjectException{}
	if err := p.O4.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O4, err)
	}
	return nil
}

func (p *CreateTableResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_table_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateTableResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *CreateTableResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *CreateTableResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetO3() {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:o3: %s", p, err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O3, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:o3: %s", p, err)
		}
	}
	return err
}

func (p *CreateTableResult) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetO4() {
		if err := oprot.WriteFieldBegin("o4", thrift.STRUCT, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:o4: %s", p, err)
		}
		if err := p.O4.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O4, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:o4: %s", p, err)
		}
	}
	return err
}

func (p *CreateTableResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateTableResult(%+v)", *p)
}

type DropTableArgs struct {
	Dbname     string `thrift:"dbname,1" json:"dbname"`
	Name       string `thrift:"name,2" json:"name"`
	DeleteData bool   `thrift:"deleteData,3" json:"deleteData"`
}

func NewDropTableArgs() *DropTableArgs {
	return &DropTableArgs{}
}

func (p *DropTableArgs) GetDbname() string {
	return p.Dbname
}

func (p *DropTableArgs) GetName() string {
	return p.Name
}

func (p *DropTableArgs) GetDeleteData() bool {
	return p.DeleteData
}
func (p *DropTableArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DropTableArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Dbname = v
	}
	return nil
}

func (p *DropTableArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *DropTableArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.DeleteData = v
	}
	return nil
}

func (p *DropTableArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_table_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DropTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dbname", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:dbname: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Dbname)); err != nil {
		return fmt.Errorf("%T.dbname (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:dbname: %s", p, err)
	}
	return err
}

func (p *DropTableArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:name: %s", p, err)
	}
	return err
}

func (p *DropTableArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deleteData", thrift.BOOL, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:deleteData: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.DeleteData)); err != nil {
		return fmt.Errorf("%T.deleteData (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:deleteData: %s", p, err)
	}
	return err
}

func (p *DropTableArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropTableArgs(%+v)", *p)
}

type DropTableResult struct {
	O1 *NoSuchObjectException `thrift:"o1,1" json:"o1"`
	O3 *MetaException         `thrift:"o3,2" json:"o3"`
}

func NewDropTableResult() *DropTableResult {
	return &DropTableResult{}
}

var DropTableResult_O1_DEFAULT *NoSuchObjectException

func (p *DropTableResult) GetO1() *NoSuchObjectException {
	if !p.IsSetO1() {
		return DropTableResult_O1_DEFAULT
	}
	return p.O1
}

var DropTableResult_O3_DEFAULT *MetaException

func (p *DropTableResult) GetO3() *MetaException {
	if !p.IsSetO3() {
		return DropTableResult_O3_DEFAULT
	}
	return p.O3
}
func (p *DropTableResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *DropTableResult) IsSetO3() bool {
	return p.O3 != nil
}

func (p *DropTableResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DropTableResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &NoSuchObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *DropTableResult) ReadField2(iprot thrift.TProtocol) error {
	p.O3 = &MetaException{}
	if err := p.O3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O3, err)
	}
	return nil
}

func (p *DropTableResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_table_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DropTableResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *DropTableResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO3() {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o3: %s", p, err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O3, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o3: %s", p, err)
		}
	}
	return err
}

func (p *DropTableResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropTableResult(%+v)", *p)
}

type GetTablesArgs struct {
	DbName  string `thrift:"db_name,1" json:"db_name"`
	Pattern string `thrift:"pattern,2" json:"pattern"`
}

func NewGetTablesArgs() *GetTablesArgs {
	return &GetTablesArgs{}
}

func (p *GetTablesArgs) GetDbName() string {
	return p.DbName
}

func (p *GetTablesArgs) GetPattern() string {
	return p.Pattern
}
func (p *GetTablesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTablesArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *GetTablesArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Pattern = v
	}
	return nil
}

func (p *GetTablesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_tables_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTablesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *GetTablesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pattern", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:pattern: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Pattern)); err != nil {
		return fmt.Errorf("%T.pattern (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:pattern: %s", p, err)
	}
	return err
}

func (p *GetTablesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTablesArgs(%+v)", *p)
}

type GetTablesResult struct {
	Success []string       `thrift:"success,0" json:"success"`
	O1      *MetaException `thrift:"o1,1" json:"o1"`
}

func NewGetTablesResult() *GetTablesResult {
	return &GetTablesResult{}
}

var GetTablesResult_Success_DEFAULT []string

func (p *GetTablesResult) GetSuccess() []string {
	return p.Success
}

var GetTablesResult_O1_DEFAULT *MetaException

func (p *GetTablesResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return GetTablesResult_O1_DEFAULT
	}
	return p.O1
}
func (p *GetTablesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetTablesResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetTablesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTablesResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem153 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem153 = v
		}
		p.Success = append(p.Success, _elem153)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetTablesResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetTablesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_tables_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTablesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetTablesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetTablesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTablesResult(%+v)", *p)
}

type GetAllTablesArgs struct {
	DbName string `thrift:"db_name,1" json:"db_name"`
}

func NewGetAllTablesArgs() *GetAllTablesArgs {
	return &GetAllTablesArgs{}
}

func (p *GetAllTablesArgs) GetDbName() string {
	return p.DbName
}
func (p *GetAllTablesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetAllTablesArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *GetAllTablesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_all_tables_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetAllTablesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *GetAllTablesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetAllTablesArgs(%+v)", *p)
}

type GetAllTablesResult struct {
	Success []string       `thrift:"success,0" json:"success"`
	O1      *MetaException `thrift:"o1,1" json:"o1"`
}

func NewGetAllTablesResult() *GetAllTablesResult {
	return &GetAllTablesResult{}
}

var GetAllTablesResult_Success_DEFAULT []string

func (p *GetAllTablesResult) GetSuccess() []string {
	return p.Success
}

var GetAllTablesResult_O1_DEFAULT *MetaException

func (p *GetAllTablesResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return GetAllTablesResult_O1_DEFAULT
	}
	return p.O1
}
func (p *GetAllTablesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetAllTablesResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetAllTablesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetAllTablesResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem154 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem154 = v
		}
		p.Success = append(p.Success, _elem154)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetAllTablesResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetAllTablesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_all_tables_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetAllTablesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetAllTablesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetAllTablesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetAllTablesResult(%+v)", *p)
}

type GetTableArgs struct {
	Dbname  string `thrift:"dbname,1" json:"dbname"`
	TblName string `thrift:"tbl_name,2" json:"tbl_name"`
}

func NewGetTableArgs() *GetTableArgs {
	return &GetTableArgs{}
}

func (p *GetTableArgs) GetDbname() string {
	return p.Dbname
}

func (p *GetTableArgs) GetTblName() string {
	return p.TblName
}
func (p *GetTableArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTableArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Dbname = v
	}
	return nil
}

func (p *GetTableArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *GetTableArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_table_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dbname", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:dbname: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Dbname)); err != nil {
		return fmt.Errorf("%T.dbname (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:dbname: %s", p, err)
	}
	return err
}

func (p *GetTableArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *GetTableArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTableArgs(%+v)", *p)
}

type GetTableResult struct {
	Success *Table                 `thrift:"success,0" json:"success"`
	O1      *MetaException         `thrift:"o1,1" json:"o1"`
	O2      *NoSuchObjectException `thrift:"o2,2" json:"o2"`
}

func NewGetTableResult() *GetTableResult {
	return &GetTableResult{}
}

var GetTableResult_Success_DEFAULT *Table

func (p *GetTableResult) GetSuccess() *Table {
	if !p.IsSetSuccess() {
		return GetTableResult_Success_DEFAULT
	}
	return p.Success
}

var GetTableResult_O1_DEFAULT *MetaException

func (p *GetTableResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return GetTableResult_O1_DEFAULT
	}
	return p.O1
}

var GetTableResult_O2_DEFAULT *NoSuchObjectException

func (p *GetTableResult) GetO2() *NoSuchObjectException {
	if !p.IsSetO2() {
		return GetTableResult_O2_DEFAULT
	}
	return p.O2
}
func (p *GetTableResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetTableResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetTableResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *GetTableResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTableResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Table{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetTableResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetTableResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &NoSuchObjectException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *GetTableResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_table_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTableResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetTableResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetTableResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetTableResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTableResult(%+v)", *p)
}

type AlterTableArgs struct {
	Dbname  string `thrift:"dbname,1" json:"dbname"`
	TblName string `thrift:"tbl_name,2" json:"tbl_name"`
	NewTbl_ *Table `thrift:"new_tbl,3" json:"new_tbl"`
}

func NewAlterTableArgs() *AlterTableArgs {
	return &AlterTableArgs{}
}

func (p *AlterTableArgs) GetDbname() string {
	return p.Dbname
}

func (p *AlterTableArgs) GetTblName() string {
	return p.TblName
}

var AlterTableArgs_NewTbl__DEFAULT *Table

func (p *AlterTableArgs) GetNewTbl_() *Table {
	if !p.IsSetNewTbl_() {
		return AlterTableArgs_NewTbl__DEFAULT
	}
	return p.NewTbl_
}
func (p *AlterTableArgs) IsSetNewTbl_() bool {
	return p.NewTbl_ != nil
}

func (p *AlterTableArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AlterTableArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Dbname = v
	}
	return nil
}

func (p *AlterTableArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *AlterTableArgs) ReadField3(iprot thrift.TProtocol) error {
	p.NewTbl_ = &Table{}
	if err := p.NewTbl_.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NewTbl_, err)
	}
	return nil
}

func (p *AlterTableArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_table_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AlterTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dbname", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:dbname: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Dbname)); err != nil {
		return fmt.Errorf("%T.dbname (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:dbname: %s", p, err)
	}
	return err
}

func (p *AlterTableArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *AlterTableArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("new_tbl", thrift.STRUCT, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:new_tbl: %s", p, err)
	}
	if err := p.NewTbl_.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.NewTbl_, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:new_tbl: %s", p, err)
	}
	return err
}

func (p *AlterTableArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AlterTableArgs(%+v)", *p)
}

type AlterTableResult struct {
	O1 *InvalidOperationException `thrift:"o1,1" json:"o1"`
	O2 *MetaException             `thrift:"o2,2" json:"o2"`
}

func NewAlterTableResult() *AlterTableResult {
	return &AlterTableResult{}
}

var AlterTableResult_O1_DEFAULT *InvalidOperationException

func (p *AlterTableResult) GetO1() *InvalidOperationException {
	if !p.IsSetO1() {
		return AlterTableResult_O1_DEFAULT
	}
	return p.O1
}

var AlterTableResult_O2_DEFAULT *MetaException

func (p *AlterTableResult) GetO2() *MetaException {
	if !p.IsSetO2() {
		return AlterTableResult_O2_DEFAULT
	}
	return p.O2
}
func (p *AlterTableResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *AlterTableResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *AlterTableResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AlterTableResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &InvalidOperationException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *AlterTableResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &MetaException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *AlterTableResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_table_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AlterTableResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *AlterTableResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *AlterTableResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AlterTableResult(%+v)", *p)
}

type AddPartitionArgs struct {
	NewPart_ *Partition `thrift:"new_part,1" json:"new_part"`
}

func NewAddPartitionArgs() *AddPartitionArgs {
	return &AddPartitionArgs{}
}

var AddPartitionArgs_NewPart__DEFAULT *Partition

func (p *AddPartitionArgs) GetNewPart_() *Partition {
	if !p.IsSetNewPart_() {
		return AddPartitionArgs_NewPart__DEFAULT
	}
	return p.NewPart_
}
func (p *AddPartitionArgs) IsSetNewPart_() bool {
	return p.NewPart_ != nil
}

func (p *AddPartitionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AddPartitionArgs) ReadField1(iprot thrift.TProtocol) error {
	p.NewPart_ = &Partition{}
	if err := p.NewPart_.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NewPart_, err)
	}
	return nil
}

func (p *AddPartitionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("add_partition_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AddPartitionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("new_part", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:new_part: %s", p, err)
	}
	if err := p.NewPart_.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.NewPart_, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:new_part: %s", p, err)
	}
	return err
}

func (p *AddPartitionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddPartitionArgs(%+v)", *p)
}

type AddPartitionResult struct {
	Success *Partition              `thrift:"success,0" json:"success"`
	O1      *InvalidObjectException `thrift:"o1,1" json:"o1"`
	O2      *AlreadyExistsException `thrift:"o2,2" json:"o2"`
	O3      *MetaException          `thrift:"o3,3" json:"o3"`
}

func NewAddPartitionResult() *AddPartitionResult {
	return &AddPartitionResult{}
}

var AddPartitionResult_Success_DEFAULT *Partition

func (p *AddPartitionResult) GetSuccess() *Partition {
	if !p.IsSetSuccess() {
		return AddPartitionResult_Success_DEFAULT
	}
	return p.Success
}

var AddPartitionResult_O1_DEFAULT *InvalidObjectException

func (p *AddPartitionResult) GetO1() *InvalidObjectException {
	if !p.IsSetO1() {
		return AddPartitionResult_O1_DEFAULT
	}
	return p.O1
}

var AddPartitionResult_O2_DEFAULT *AlreadyExistsException

func (p *AddPartitionResult) GetO2() *AlreadyExistsException {
	if !p.IsSetO2() {
		return AddPartitionResult_O2_DEFAULT
	}
	return p.O2
}

var AddPartitionResult_O3_DEFAULT *MetaException

func (p *AddPartitionResult) GetO3() *MetaException {
	if !p.IsSetO3() {
		return AddPartitionResult_O3_DEFAULT
	}
	return p.O3
}
func (p *AddPartitionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AddPartitionResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *AddPartitionResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *AddPartitionResult) IsSetO3() bool {
	return p.O3 != nil
}

func (p *AddPartitionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AddPartitionResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Partition{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *AddPartitionResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &InvalidObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *AddPartitionResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &AlreadyExistsException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *AddPartitionResult) ReadField3(iprot thrift.TProtocol) error {
	p.O3 = &MetaException{}
	if err := p.O3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O3, err)
	}
	return nil
}

func (p *AddPartitionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("add_partition_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AddPartitionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *AddPartitionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *AddPartitionResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *AddPartitionResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetO3() {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:o3: %s", p, err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O3, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:o3: %s", p, err)
		}
	}
	return err
}

func (p *AddPartitionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddPartitionResult(%+v)", *p)
}

type AppendPartitionArgs struct {
	DbName   string   `thrift:"db_name,1" json:"db_name"`
	TblName  string   `thrift:"tbl_name,2" json:"tbl_name"`
	PartVals []string `thrift:"part_vals,3" json:"part_vals"`
}

func NewAppendPartitionArgs() *AppendPartitionArgs {
	return &AppendPartitionArgs{}
}

func (p *AppendPartitionArgs) GetDbName() string {
	return p.DbName
}

func (p *AppendPartitionArgs) GetTblName() string {
	return p.TblName
}

func (p *AppendPartitionArgs) GetPartVals() []string {
	return p.PartVals
}
func (p *AppendPartitionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AppendPartitionArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *AppendPartitionArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *AppendPartitionArgs) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.PartVals = tSlice
	for i := 0; i < size; i++ {
		var _elem155 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem155 = v
		}
		p.PartVals = append(p.PartVals, _elem155)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *AppendPartitionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("append_partition_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AppendPartitionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *AppendPartitionArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *AppendPartitionArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("part_vals", thrift.LIST, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:part_vals: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.PartVals)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.PartVals {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:part_vals: %s", p, err)
	}
	return err
}

func (p *AppendPartitionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppendPartitionArgs(%+v)", *p)
}

type AppendPartitionResult struct {
	Success *Partition              `thrift:"success,0" json:"success"`
	O1      *InvalidObjectException `thrift:"o1,1" json:"o1"`
	O2      *AlreadyExistsException `thrift:"o2,2" json:"o2"`
	O3      *MetaException          `thrift:"o3,3" json:"o3"`
}

func NewAppendPartitionResult() *AppendPartitionResult {
	return &AppendPartitionResult{}
}

var AppendPartitionResult_Success_DEFAULT *Partition

func (p *AppendPartitionResult) GetSuccess() *Partition {
	if !p.IsSetSuccess() {
		return AppendPartitionResult_Success_DEFAULT
	}
	return p.Success
}

var AppendPartitionResult_O1_DEFAULT *InvalidObjectException

func (p *AppendPartitionResult) GetO1() *InvalidObjectException {
	if !p.IsSetO1() {
		return AppendPartitionResult_O1_DEFAULT
	}
	return p.O1
}

var AppendPartitionResult_O2_DEFAULT *AlreadyExistsException

func (p *AppendPartitionResult) GetO2() *AlreadyExistsException {
	if !p.IsSetO2() {
		return AppendPartitionResult_O2_DEFAULT
	}
	return p.O2
}

var AppendPartitionResult_O3_DEFAULT *MetaException

func (p *AppendPartitionResult) GetO3() *MetaException {
	if !p.IsSetO3() {
		return AppendPartitionResult_O3_DEFAULT
	}
	return p.O3
}
func (p *AppendPartitionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppendPartitionResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *AppendPartitionResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *AppendPartitionResult) IsSetO3() bool {
	return p.O3 != nil
}

func (p *AppendPartitionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AppendPartitionResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Partition{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *AppendPartitionResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &InvalidObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *AppendPartitionResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &AlreadyExistsException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *AppendPartitionResult) ReadField3(iprot thrift.TProtocol) error {
	p.O3 = &MetaException{}
	if err := p.O3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O3, err)
	}
	return nil
}

func (p *AppendPartitionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("append_partition_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AppendPartitionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *AppendPartitionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *AppendPartitionResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *AppendPartitionResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetO3() {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:o3: %s", p, err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O3, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:o3: %s", p, err)
		}
	}
	return err
}

func (p *AppendPartitionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppendPartitionResult(%+v)", *p)
}

type AppendPartitionByNameArgs struct {
	DbName   string `thrift:"db_name,1" json:"db_name"`
	TblName  string `thrift:"tbl_name,2" json:"tbl_name"`
	PartName string `thrift:"part_name,3" json:"part_name"`
}

func NewAppendPartitionByNameArgs() *AppendPartitionByNameArgs {
	return &AppendPartitionByNameArgs{}
}

func (p *AppendPartitionByNameArgs) GetDbName() string {
	return p.DbName
}

func (p *AppendPartitionByNameArgs) GetTblName() string {
	return p.TblName
}

func (p *AppendPartitionByNameArgs) GetPartName() string {
	return p.PartName
}
func (p *AppendPartitionByNameArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AppendPartitionByNameArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *AppendPartitionByNameArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *AppendPartitionByNameArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.PartName = v
	}
	return nil
}

func (p *AppendPartitionByNameArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("append_partition_by_name_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AppendPartitionByNameArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *AppendPartitionByNameArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *AppendPartitionByNameArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("part_name", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:part_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PartName)); err != nil {
		return fmt.Errorf("%T.part_name (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:part_name: %s", p, err)
	}
	return err
}

func (p *AppendPartitionByNameArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppendPartitionByNameArgs(%+v)", *p)
}

type AppendPartitionByNameResult struct {
	Success *Partition              `thrift:"success,0" json:"success"`
	O1      *InvalidObjectException `thrift:"o1,1" json:"o1"`
	O2      *AlreadyExistsException `thrift:"o2,2" json:"o2"`
	O3      *MetaException          `thrift:"o3,3" json:"o3"`
}

func NewAppendPartitionByNameResult() *AppendPartitionByNameResult {
	return &AppendPartitionByNameResult{}
}

var AppendPartitionByNameResult_Success_DEFAULT *Partition

func (p *AppendPartitionByNameResult) GetSuccess() *Partition {
	if !p.IsSetSuccess() {
		return AppendPartitionByNameResult_Success_DEFAULT
	}
	return p.Success
}

var AppendPartitionByNameResult_O1_DEFAULT *InvalidObjectException

func (p *AppendPartitionByNameResult) GetO1() *InvalidObjectException {
	if !p.IsSetO1() {
		return AppendPartitionByNameResult_O1_DEFAULT
	}
	return p.O1
}

var AppendPartitionByNameResult_O2_DEFAULT *AlreadyExistsException

func (p *AppendPartitionByNameResult) GetO2() *AlreadyExistsException {
	if !p.IsSetO2() {
		return AppendPartitionByNameResult_O2_DEFAULT
	}
	return p.O2
}

var AppendPartitionByNameResult_O3_DEFAULT *MetaException

func (p *AppendPartitionByNameResult) GetO3() *MetaException {
	if !p.IsSetO3() {
		return AppendPartitionByNameResult_O3_DEFAULT
	}
	return p.O3
}
func (p *AppendPartitionByNameResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AppendPartitionByNameResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *AppendPartitionByNameResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *AppendPartitionByNameResult) IsSetO3() bool {
	return p.O3 != nil
}

func (p *AppendPartitionByNameResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AppendPartitionByNameResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Partition{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *AppendPartitionByNameResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &InvalidObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *AppendPartitionByNameResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &AlreadyExistsException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *AppendPartitionByNameResult) ReadField3(iprot thrift.TProtocol) error {
	p.O3 = &MetaException{}
	if err := p.O3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O3, err)
	}
	return nil
}

func (p *AppendPartitionByNameResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("append_partition_by_name_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AppendPartitionByNameResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *AppendPartitionByNameResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *AppendPartitionByNameResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *AppendPartitionByNameResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetO3() {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:o3: %s", p, err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O3, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:o3: %s", p, err)
		}
	}
	return err
}

func (p *AppendPartitionByNameResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppendPartitionByNameResult(%+v)", *p)
}

type DropPartitionArgs struct {
	DbName     string   `thrift:"db_name,1" json:"db_name"`
	TblName    string   `thrift:"tbl_name,2" json:"tbl_name"`
	PartVals   []string `thrift:"part_vals,3" json:"part_vals"`
	DeleteData bool     `thrift:"deleteData,4" json:"deleteData"`
}

func NewDropPartitionArgs() *DropPartitionArgs {
	return &DropPartitionArgs{}
}

func (p *DropPartitionArgs) GetDbName() string {
	return p.DbName
}

func (p *DropPartitionArgs) GetTblName() string {
	return p.TblName
}

func (p *DropPartitionArgs) GetPartVals() []string {
	return p.PartVals
}

func (p *DropPartitionArgs) GetDeleteData() bool {
	return p.DeleteData
}
func (p *DropPartitionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DropPartitionArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *DropPartitionArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *DropPartitionArgs) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.PartVals = tSlice
	for i := 0; i < size; i++ {
		var _elem156 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem156 = v
		}
		p.PartVals = append(p.PartVals, _elem156)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *DropPartitionArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.DeleteData = v
	}
	return nil
}

func (p *DropPartitionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_partition_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DropPartitionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *DropPartitionArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *DropPartitionArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("part_vals", thrift.LIST, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:part_vals: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.PartVals)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.PartVals {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:part_vals: %s", p, err)
	}
	return err
}

func (p *DropPartitionArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deleteData", thrift.BOOL, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:deleteData: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.DeleteData)); err != nil {
		return fmt.Errorf("%T.deleteData (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:deleteData: %s", p, err)
	}
	return err
}

func (p *DropPartitionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropPartitionArgs(%+v)", *p)
}

type DropPartitionResult struct {
	Success *bool                  `thrift:"success,0" json:"success"`
	O1      *NoSuchObjectException `thrift:"o1,1" json:"o1"`
	O2      *MetaException         `thrift:"o2,2" json:"o2"`
}

func NewDropPartitionResult() *DropPartitionResult {
	return &DropPartitionResult{}
}

var DropPartitionResult_Success_DEFAULT bool

func (p *DropPartitionResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return DropPartitionResult_Success_DEFAULT
	}
	return *p.Success
}

var DropPartitionResult_O1_DEFAULT *NoSuchObjectException

func (p *DropPartitionResult) GetO1() *NoSuchObjectException {
	if !p.IsSetO1() {
		return DropPartitionResult_O1_DEFAULT
	}
	return p.O1
}

var DropPartitionResult_O2_DEFAULT *MetaException

func (p *DropPartitionResult) GetO2() *MetaException {
	if !p.IsSetO2() {
		return DropPartitionResult_O2_DEFAULT
	}
	return p.O2
}
func (p *DropPartitionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DropPartitionResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *DropPartitionResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *DropPartitionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DropPartitionResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *DropPartitionResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &NoSuchObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *DropPartitionResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &MetaException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *DropPartitionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_partition_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DropPartitionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *DropPartitionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *DropPartitionResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *DropPartitionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropPartitionResult(%+v)", *p)
}

type DropPartitionByNameArgs struct {
	DbName     string `thrift:"db_name,1" json:"db_name"`
	TblName    string `thrift:"tbl_name,2" json:"tbl_name"`
	PartName   string `thrift:"part_name,3" json:"part_name"`
	DeleteData bool   `thrift:"deleteData,4" json:"deleteData"`
}

func NewDropPartitionByNameArgs() *DropPartitionByNameArgs {
	return &DropPartitionByNameArgs{}
}

func (p *DropPartitionByNameArgs) GetDbName() string {
	return p.DbName
}

func (p *DropPartitionByNameArgs) GetTblName() string {
	return p.TblName
}

func (p *DropPartitionByNameArgs) GetPartName() string {
	return p.PartName
}

func (p *DropPartitionByNameArgs) GetDeleteData() bool {
	return p.DeleteData
}
func (p *DropPartitionByNameArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DropPartitionByNameArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *DropPartitionByNameArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *DropPartitionByNameArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.PartName = v
	}
	return nil
}

func (p *DropPartitionByNameArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.DeleteData = v
	}
	return nil
}

func (p *DropPartitionByNameArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_partition_by_name_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DropPartitionByNameArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *DropPartitionByNameArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *DropPartitionByNameArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("part_name", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:part_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PartName)); err != nil {
		return fmt.Errorf("%T.part_name (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:part_name: %s", p, err)
	}
	return err
}

func (p *DropPartitionByNameArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deleteData", thrift.BOOL, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:deleteData: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.DeleteData)); err != nil {
		return fmt.Errorf("%T.deleteData (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:deleteData: %s", p, err)
	}
	return err
}

func (p *DropPartitionByNameArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropPartitionByNameArgs(%+v)", *p)
}

type DropPartitionByNameResult struct {
	Success *bool                  `thrift:"success,0" json:"success"`
	O1      *NoSuchObjectException `thrift:"o1,1" json:"o1"`
	O2      *MetaException         `thrift:"o2,2" json:"o2"`
}

func NewDropPartitionByNameResult() *DropPartitionByNameResult {
	return &DropPartitionByNameResult{}
}

var DropPartitionByNameResult_Success_DEFAULT bool

func (p *DropPartitionByNameResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return DropPartitionByNameResult_Success_DEFAULT
	}
	return *p.Success
}

var DropPartitionByNameResult_O1_DEFAULT *NoSuchObjectException

func (p *DropPartitionByNameResult) GetO1() *NoSuchObjectException {
	if !p.IsSetO1() {
		return DropPartitionByNameResult_O1_DEFAULT
	}
	return p.O1
}

var DropPartitionByNameResult_O2_DEFAULT *MetaException

func (p *DropPartitionByNameResult) GetO2() *MetaException {
	if !p.IsSetO2() {
		return DropPartitionByNameResult_O2_DEFAULT
	}
	return p.O2
}
func (p *DropPartitionByNameResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DropPartitionByNameResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *DropPartitionByNameResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *DropPartitionByNameResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DropPartitionByNameResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *DropPartitionByNameResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &NoSuchObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *DropPartitionByNameResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &MetaException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *DropPartitionByNameResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_partition_by_name_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DropPartitionByNameResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *DropPartitionByNameResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *DropPartitionByNameResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *DropPartitionByNameResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropPartitionByNameResult(%+v)", *p)
}

type GetPartitionArgs struct {
	DbName   string   `thrift:"db_name,1" json:"db_name"`
	TblName  string   `thrift:"tbl_name,2" json:"tbl_name"`
	PartVals []string `thrift:"part_vals,3" json:"part_vals"`
}

func NewGetPartitionArgs() *GetPartitionArgs {
	return &GetPartitionArgs{}
}

func (p *GetPartitionArgs) GetDbName() string {
	return p.DbName
}

func (p *GetPartitionArgs) GetTblName() string {
	return p.TblName
}

func (p *GetPartitionArgs) GetPartVals() []string {
	return p.PartVals
}
func (p *GetPartitionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *GetPartitionArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *GetPartitionArgs) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.PartVals = tSlice
	for i := 0; i < size; i++ {
		var _elem157 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem157 = v
		}
		p.PartVals = append(p.PartVals, _elem157)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetPartitionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partition_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("part_vals", thrift.LIST, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:part_vals: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.PartVals)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.PartVals {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:part_vals: %s", p, err)
	}
	return err
}

func (p *GetPartitionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionArgs(%+v)", *p)
}

type GetPartitionResult struct {
	Success *Partition             `thrift:"success,0" json:"success"`
	O1      *MetaException         `thrift:"o1,1" json:"o1"`
	O2      *NoSuchObjectException `thrift:"o2,2" json:"o2"`
}

func NewGetPartitionResult() *GetPartitionResult {
	return &GetPartitionResult{}
}

var GetPartitionResult_Success_DEFAULT *Partition

func (p *GetPartitionResult) GetSuccess() *Partition {
	if !p.IsSetSuccess() {
		return GetPartitionResult_Success_DEFAULT
	}
	return p.Success
}

var GetPartitionResult_O1_DEFAULT *MetaException

func (p *GetPartitionResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return GetPartitionResult_O1_DEFAULT
	}
	return p.O1
}

var GetPartitionResult_O2_DEFAULT *NoSuchObjectException

func (p *GetPartitionResult) GetO2() *NoSuchObjectException {
	if !p.IsSetO2() {
		return GetPartitionResult_O2_DEFAULT
	}
	return p.O2
}
func (p *GetPartitionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetPartitionResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetPartitionResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *GetPartitionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Partition{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetPartitionResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetPartitionResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &NoSuchObjectException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *GetPartitionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partition_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionResult(%+v)", *p)
}

type GetPartitionWithAuthArgs struct {
	DbName     string   `thrift:"db_name,1" json:"db_name"`
	TblName    string   `thrift:"tbl_name,2" json:"tbl_name"`
	PartVals   []string `thrift:"part_vals,3" json:"part_vals"`
	UserName   string   `thrift:"user_name,4" json:"user_name"`
	GroupNames []string `thrift:"group_names,5" json:"group_names"`
}

func NewGetPartitionWithAuthArgs() *GetPartitionWithAuthArgs {
	return &GetPartitionWithAuthArgs{}
}

func (p *GetPartitionWithAuthArgs) GetDbName() string {
	return p.DbName
}

func (p *GetPartitionWithAuthArgs) GetTblName() string {
	return p.TblName
}

func (p *GetPartitionWithAuthArgs) GetPartVals() []string {
	return p.PartVals
}

func (p *GetPartitionWithAuthArgs) GetUserName() string {
	return p.UserName
}

func (p *GetPartitionWithAuthArgs) GetGroupNames() []string {
	return p.GroupNames
}
func (p *GetPartitionWithAuthArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionWithAuthArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *GetPartitionWithAuthArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *GetPartitionWithAuthArgs) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.PartVals = tSlice
	for i := 0; i < size; i++ {
		var _elem158 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem158 = v
		}
		p.PartVals = append(p.PartVals, _elem158)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetPartitionWithAuthArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.UserName = v
	}
	return nil
}

func (p *GetPartitionWithAuthArgs) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.GroupNames = tSlice
	for i := 0; i < size; i++ {
		var _elem159 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem159 = v
		}
		p.GroupNames = append(p.GroupNames, _elem159)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetPartitionWithAuthArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partition_with_auth_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionWithAuthArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionWithAuthArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionWithAuthArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("part_vals", thrift.LIST, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:part_vals: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.PartVals)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.PartVals {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:part_vals: %s", p, err)
	}
	return err
}

func (p *GetPartitionWithAuthArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_name", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:user_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.UserName)); err != nil {
		return fmt.Errorf("%T.user_name (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:user_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionWithAuthArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("group_names", thrift.LIST, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:group_names: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.GroupNames)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.GroupNames {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:group_names: %s", p, err)
	}
	return err
}

func (p *GetPartitionWithAuthArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionWithAuthArgs(%+v)", *p)
}

type GetPartitionWithAuthResult struct {
	Success *Partition             `thrift:"success,0" json:"success"`
	O1      *MetaException         `thrift:"o1,1" json:"o1"`
	O2      *NoSuchObjectException `thrift:"o2,2" json:"o2"`
}

func NewGetPartitionWithAuthResult() *GetPartitionWithAuthResult {
	return &GetPartitionWithAuthResult{}
}

var GetPartitionWithAuthResult_Success_DEFAULT *Partition

func (p *GetPartitionWithAuthResult) GetSuccess() *Partition {
	if !p.IsSetSuccess() {
		return GetPartitionWithAuthResult_Success_DEFAULT
	}
	return p.Success
}

var GetPartitionWithAuthResult_O1_DEFAULT *MetaException

func (p *GetPartitionWithAuthResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return GetPartitionWithAuthResult_O1_DEFAULT
	}
	return p.O1
}

var GetPartitionWithAuthResult_O2_DEFAULT *NoSuchObjectException

func (p *GetPartitionWithAuthResult) GetO2() *NoSuchObjectException {
	if !p.IsSetO2() {
		return GetPartitionWithAuthResult_O2_DEFAULT
	}
	return p.O2
}
func (p *GetPartitionWithAuthResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetPartitionWithAuthResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetPartitionWithAuthResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *GetPartitionWithAuthResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionWithAuthResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Partition{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetPartitionWithAuthResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetPartitionWithAuthResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &NoSuchObjectException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *GetPartitionWithAuthResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partition_with_auth_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionWithAuthResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionWithAuthResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionWithAuthResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionWithAuthResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionWithAuthResult(%+v)", *p)
}

type GetPartitionByNameArgs struct {
	DbName   string `thrift:"db_name,1" json:"db_name"`
	TblName  string `thrift:"tbl_name,2" json:"tbl_name"`
	PartName string `thrift:"part_name,3" json:"part_name"`
}

func NewGetPartitionByNameArgs() *GetPartitionByNameArgs {
	return &GetPartitionByNameArgs{}
}

func (p *GetPartitionByNameArgs) GetDbName() string {
	return p.DbName
}

func (p *GetPartitionByNameArgs) GetTblName() string {
	return p.TblName
}

func (p *GetPartitionByNameArgs) GetPartName() string {
	return p.PartName
}
func (p *GetPartitionByNameArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionByNameArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *GetPartitionByNameArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *GetPartitionByNameArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.PartName = v
	}
	return nil
}

func (p *GetPartitionByNameArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partition_by_name_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionByNameArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionByNameArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionByNameArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("part_name", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:part_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PartName)); err != nil {
		return fmt.Errorf("%T.part_name (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:part_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionByNameArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionByNameArgs(%+v)", *p)
}

type GetPartitionByNameResult struct {
	Success *Partition             `thrift:"success,0" json:"success"`
	O1      *MetaException         `thrift:"o1,1" json:"o1"`
	O2      *NoSuchObjectException `thrift:"o2,2" json:"o2"`
}

func NewGetPartitionByNameResult() *GetPartitionByNameResult {
	return &GetPartitionByNameResult{}
}

var GetPartitionByNameResult_Success_DEFAULT *Partition

func (p *GetPartitionByNameResult) GetSuccess() *Partition {
	if !p.IsSetSuccess() {
		return GetPartitionByNameResult_Success_DEFAULT
	}
	return p.Success
}

var GetPartitionByNameResult_O1_DEFAULT *MetaException

func (p *GetPartitionByNameResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return GetPartitionByNameResult_O1_DEFAULT
	}
	return p.O1
}

var GetPartitionByNameResult_O2_DEFAULT *NoSuchObjectException

func (p *GetPartitionByNameResult) GetO2() *NoSuchObjectException {
	if !p.IsSetO2() {
		return GetPartitionByNameResult_O2_DEFAULT
	}
	return p.O2
}
func (p *GetPartitionByNameResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetPartitionByNameResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetPartitionByNameResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *GetPartitionByNameResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionByNameResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Partition{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetPartitionByNameResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetPartitionByNameResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &NoSuchObjectException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *GetPartitionByNameResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partition_by_name_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionByNameResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionByNameResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionByNameResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionByNameResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionByNameResult(%+v)", *p)
}

type GetPartitionsArgs struct {
	DbName   string `thrift:"db_name,1" json:"db_name"`
	TblName  string `thrift:"tbl_name,2" json:"tbl_name"`
	MaxParts int16  `thrift:"max_parts,3" json:"max_parts"`
}

func NewGetPartitionsArgs() *GetPartitionsArgs {
	return &GetPartitionsArgs{
		MaxParts: -1,
	}
}

func (p *GetPartitionsArgs) GetDbName() string {
	return p.DbName
}

func (p *GetPartitionsArgs) GetTblName() string {
	return p.TblName
}

func (p *GetPartitionsArgs) GetMaxParts() int16 {
	return p.MaxParts
}
func (p *GetPartitionsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *GetPartitionsArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *GetPartitionsArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.MaxParts = v
	}
	return nil
}

func (p *GetPartitionsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partitions_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("max_parts", thrift.I16, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:max_parts: %s", p, err)
	}
	if err := oprot.WriteI16(int16(p.MaxParts)); err != nil {
		return fmt.Errorf("%T.max_parts (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:max_parts: %s", p, err)
	}
	return err
}

func (p *GetPartitionsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionsArgs(%+v)", *p)
}

type GetPartitionsResult struct {
	Success []*Partition           `thrift:"success,0" json:"success"`
	O1      *NoSuchObjectException `thrift:"o1,1" json:"o1"`
	O2      *MetaException         `thrift:"o2,2" json:"o2"`
}

func NewGetPartitionsResult() *GetPartitionsResult {
	return &GetPartitionsResult{}
}

var GetPartitionsResult_Success_DEFAULT []*Partition

func (p *GetPartitionsResult) GetSuccess() []*Partition {
	return p.Success
}

var GetPartitionsResult_O1_DEFAULT *NoSuchObjectException

func (p *GetPartitionsResult) GetO1() *NoSuchObjectException {
	if !p.IsSetO1() {
		return GetPartitionsResult_O1_DEFAULT
	}
	return p.O1
}

var GetPartitionsResult_O2_DEFAULT *MetaException

func (p *GetPartitionsResult) GetO2() *MetaException {
	if !p.IsSetO2() {
		return GetPartitionsResult_O2_DEFAULT
	}
	return p.O2
}
func (p *GetPartitionsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetPartitionsResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetPartitionsResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *GetPartitionsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionsResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Partition, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem160 := &Partition{}
		if err := _elem160.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem160, err)
		}
		p.Success = append(p.Success, _elem160)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetPartitionsResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &NoSuchObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetPartitionsResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &MetaException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *GetPartitionsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partitions_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionsResult(%+v)", *p)
}

type GetPartitionsWithAuthArgs struct {
	DbName     string   `thrift:"db_name,1" json:"db_name"`
	TblName    string   `thrift:"tbl_name,2" json:"tbl_name"`
	MaxParts   int16    `thrift:"max_parts,3" json:"max_parts"`
	UserName   string   `thrift:"user_name,4" json:"user_name"`
	GroupNames []string `thrift:"group_names,5" json:"group_names"`
}

func NewGetPartitionsWithAuthArgs() *GetPartitionsWithAuthArgs {
	return &GetPartitionsWithAuthArgs{
		MaxParts: -1,
	}
}

func (p *GetPartitionsWithAuthArgs) GetDbName() string {
	return p.DbName
}

func (p *GetPartitionsWithAuthArgs) GetTblName() string {
	return p.TblName
}

func (p *GetPartitionsWithAuthArgs) GetMaxParts() int16 {
	return p.MaxParts
}

func (p *GetPartitionsWithAuthArgs) GetUserName() string {
	return p.UserName
}

func (p *GetPartitionsWithAuthArgs) GetGroupNames() []string {
	return p.GroupNames
}
func (p *GetPartitionsWithAuthArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionsWithAuthArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *GetPartitionsWithAuthArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *GetPartitionsWithAuthArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.MaxParts = v
	}
	return nil
}

func (p *GetPartitionsWithAuthArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.UserName = v
	}
	return nil
}

func (p *GetPartitionsWithAuthArgs) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.GroupNames = tSlice
	for i := 0; i < size; i++ {
		var _elem161 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem161 = v
		}
		p.GroupNames = append(p.GroupNames, _elem161)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetPartitionsWithAuthArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partitions_with_auth_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionsWithAuthArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionsWithAuthArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionsWithAuthArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("max_parts", thrift.I16, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:max_parts: %s", p, err)
	}
	if err := oprot.WriteI16(int16(p.MaxParts)); err != nil {
		return fmt.Errorf("%T.max_parts (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:max_parts: %s", p, err)
	}
	return err
}

func (p *GetPartitionsWithAuthArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_name", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:user_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.UserName)); err != nil {
		return fmt.Errorf("%T.user_name (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:user_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionsWithAuthArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("group_names", thrift.LIST, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:group_names: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.GroupNames)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.GroupNames {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:group_names: %s", p, err)
	}
	return err
}

func (p *GetPartitionsWithAuthArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionsWithAuthArgs(%+v)", *p)
}

type GetPartitionsWithAuthResult struct {
	Success []*Partition           `thrift:"success,0" json:"success"`
	O1      *NoSuchObjectException `thrift:"o1,1" json:"o1"`
	O2      *MetaException         `thrift:"o2,2" json:"o2"`
}

func NewGetPartitionsWithAuthResult() *GetPartitionsWithAuthResult {
	return &GetPartitionsWithAuthResult{}
}

var GetPartitionsWithAuthResult_Success_DEFAULT []*Partition

func (p *GetPartitionsWithAuthResult) GetSuccess() []*Partition {
	return p.Success
}

var GetPartitionsWithAuthResult_O1_DEFAULT *NoSuchObjectException

func (p *GetPartitionsWithAuthResult) GetO1() *NoSuchObjectException {
	if !p.IsSetO1() {
		return GetPartitionsWithAuthResult_O1_DEFAULT
	}
	return p.O1
}

var GetPartitionsWithAuthResult_O2_DEFAULT *MetaException

func (p *GetPartitionsWithAuthResult) GetO2() *MetaException {
	if !p.IsSetO2() {
		return GetPartitionsWithAuthResult_O2_DEFAULT
	}
	return p.O2
}
func (p *GetPartitionsWithAuthResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetPartitionsWithAuthResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetPartitionsWithAuthResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *GetPartitionsWithAuthResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionsWithAuthResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Partition, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem162 := &Partition{}
		if err := _elem162.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem162, err)
		}
		p.Success = append(p.Success, _elem162)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetPartitionsWithAuthResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &NoSuchObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetPartitionsWithAuthResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &MetaException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *GetPartitionsWithAuthResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partitions_with_auth_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionsWithAuthResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionsWithAuthResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionsWithAuthResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionsWithAuthResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionsWithAuthResult(%+v)", *p)
}

type GetPartitionNamesArgs struct {
	DbName   string `thrift:"db_name,1" json:"db_name"`
	TblName  string `thrift:"tbl_name,2" json:"tbl_name"`
	MaxParts int16  `thrift:"max_parts,3" json:"max_parts"`
}

func NewGetPartitionNamesArgs() *GetPartitionNamesArgs {
	return &GetPartitionNamesArgs{
		MaxParts: -1,
	}
}

func (p *GetPartitionNamesArgs) GetDbName() string {
	return p.DbName
}

func (p *GetPartitionNamesArgs) GetTblName() string {
	return p.TblName
}

func (p *GetPartitionNamesArgs) GetMaxParts() int16 {
	return p.MaxParts
}
func (p *GetPartitionNamesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionNamesArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *GetPartitionNamesArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *GetPartitionNamesArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.MaxParts = v
	}
	return nil
}

func (p *GetPartitionNamesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partition_names_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionNamesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionNamesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionNamesArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("max_parts", thrift.I16, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:max_parts: %s", p, err)
	}
	if err := oprot.WriteI16(int16(p.MaxParts)); err != nil {
		return fmt.Errorf("%T.max_parts (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:max_parts: %s", p, err)
	}
	return err
}

func (p *GetPartitionNamesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionNamesArgs(%+v)", *p)
}

type GetPartitionNamesResult struct {
	Success []string       `thrift:"success,0" json:"success"`
	O2      *MetaException `thrift:"o2,1" json:"o2"`
}

func NewGetPartitionNamesResult() *GetPartitionNamesResult {
	return &GetPartitionNamesResult{}
}

var GetPartitionNamesResult_Success_DEFAULT []string

func (p *GetPartitionNamesResult) GetSuccess() []string {
	return p.Success
}

var GetPartitionNamesResult_O2_DEFAULT *MetaException

func (p *GetPartitionNamesResult) GetO2() *MetaException {
	if !p.IsSetO2() {
		return GetPartitionNamesResult_O2_DEFAULT
	}
	return p.O2
}
func (p *GetPartitionNamesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetPartitionNamesResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *GetPartitionNamesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionNamesResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem163 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem163 = v
		}
		p.Success = append(p.Success, _elem163)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetPartitionNamesResult) ReadField1(iprot thrift.TProtocol) error {
	p.O2 = &MetaException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *GetPartitionNamesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partition_names_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionNamesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionNamesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionNamesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionNamesResult(%+v)", *p)
}

type GetPartitionsPsArgs struct {
	DbName   string   `thrift:"db_name,1" json:"db_name"`
	TblName  string   `thrift:"tbl_name,2" json:"tbl_name"`
	PartVals []string `thrift:"part_vals,3" json:"part_vals"`
	MaxParts int16    `thrift:"max_parts,4" json:"max_parts"`
}

func NewGetPartitionsPsArgs() *GetPartitionsPsArgs {
	return &GetPartitionsPsArgs{
		MaxParts: -1,
	}
}

func (p *GetPartitionsPsArgs) GetDbName() string {
	return p.DbName
}

func (p *GetPartitionsPsArgs) GetTblName() string {
	return p.TblName
}

func (p *GetPartitionsPsArgs) GetPartVals() []string {
	return p.PartVals
}

func (p *GetPartitionsPsArgs) GetMaxParts() int16 {
	return p.MaxParts
}
func (p *GetPartitionsPsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionsPsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *GetPartitionsPsArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *GetPartitionsPsArgs) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.PartVals = tSlice
	for i := 0; i < size; i++ {
		var _elem164 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem164 = v
		}
		p.PartVals = append(p.PartVals, _elem164)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetPartitionsPsArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.MaxParts = v
	}
	return nil
}

func (p *GetPartitionsPsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partitions_ps_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionsPsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionsPsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionsPsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("part_vals", thrift.LIST, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:part_vals: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.PartVals)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.PartVals {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:part_vals: %s", p, err)
	}
	return err
}

func (p *GetPartitionsPsArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("max_parts", thrift.I16, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:max_parts: %s", p, err)
	}
	if err := oprot.WriteI16(int16(p.MaxParts)); err != nil {
		return fmt.Errorf("%T.max_parts (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:max_parts: %s", p, err)
	}
	return err
}

func (p *GetPartitionsPsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionsPsArgs(%+v)", *p)
}

type GetPartitionsPsResult struct {
	Success []*Partition   `thrift:"success,0" json:"success"`
	O1      *MetaException `thrift:"o1,1" json:"o1"`
}

func NewGetPartitionsPsResult() *GetPartitionsPsResult {
	return &GetPartitionsPsResult{}
}

var GetPartitionsPsResult_Success_DEFAULT []*Partition

func (p *GetPartitionsPsResult) GetSuccess() []*Partition {
	return p.Success
}

var GetPartitionsPsResult_O1_DEFAULT *MetaException

func (p *GetPartitionsPsResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return GetPartitionsPsResult_O1_DEFAULT
	}
	return p.O1
}
func (p *GetPartitionsPsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetPartitionsPsResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetPartitionsPsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionsPsResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Partition, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem165 := &Partition{}
		if err := _elem165.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem165, err)
		}
		p.Success = append(p.Success, _elem165)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetPartitionsPsResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetPartitionsPsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partitions_ps_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionsPsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionsPsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionsPsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionsPsResult(%+v)", *p)
}

type GetPartitionsPsWithAuthArgs struct {
	DbName     string   `thrift:"db_name,1" json:"db_name"`
	TblName    string   `thrift:"tbl_name,2" json:"tbl_name"`
	PartVals   []string `thrift:"part_vals,3" json:"part_vals"`
	MaxParts   int16    `thrift:"max_parts,4" json:"max_parts"`
	UserName   string   `thrift:"user_name,5" json:"user_name"`
	GroupNames []string `thrift:"group_names,6" json:"group_names"`
}

func NewGetPartitionsPsWithAuthArgs() *GetPartitionsPsWithAuthArgs {
	return &GetPartitionsPsWithAuthArgs{
		MaxParts: -1,
	}
}

func (p *GetPartitionsPsWithAuthArgs) GetDbName() string {
	return p.DbName
}

func (p *GetPartitionsPsWithAuthArgs) GetTblName() string {
	return p.TblName
}

func (p *GetPartitionsPsWithAuthArgs) GetPartVals() []string {
	return p.PartVals
}

func (p *GetPartitionsPsWithAuthArgs) GetMaxParts() int16 {
	return p.MaxParts
}

func (p *GetPartitionsPsWithAuthArgs) GetUserName() string {
	return p.UserName
}

func (p *GetPartitionsPsWithAuthArgs) GetGroupNames() []string {
	return p.GroupNames
}
func (p *GetPartitionsPsWithAuthArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionsPsWithAuthArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *GetPartitionsPsWithAuthArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *GetPartitionsPsWithAuthArgs) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.PartVals = tSlice
	for i := 0; i < size; i++ {
		var _elem166 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem166 = v
		}
		p.PartVals = append(p.PartVals, _elem166)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetPartitionsPsWithAuthArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.MaxParts = v
	}
	return nil
}

func (p *GetPartitionsPsWithAuthArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.UserName = v
	}
	return nil
}

func (p *GetPartitionsPsWithAuthArgs) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.GroupNames = tSlice
	for i := 0; i < size; i++ {
		var _elem167 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem167 = v
		}
		p.GroupNames = append(p.GroupNames, _elem167)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetPartitionsPsWithAuthArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partitions_ps_with_auth_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionsPsWithAuthArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionsPsWithAuthArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionsPsWithAuthArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("part_vals", thrift.LIST, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:part_vals: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.PartVals)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.PartVals {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:part_vals: %s", p, err)
	}
	return err
}

func (p *GetPartitionsPsWithAuthArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("max_parts", thrift.I16, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:max_parts: %s", p, err)
	}
	if err := oprot.WriteI16(int16(p.MaxParts)); err != nil {
		return fmt.Errorf("%T.max_parts (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:max_parts: %s", p, err)
	}
	return err
}

func (p *GetPartitionsPsWithAuthArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_name", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:user_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.UserName)); err != nil {
		return fmt.Errorf("%T.user_name (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:user_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionsPsWithAuthArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("group_names", thrift.LIST, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:group_names: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.GroupNames)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.GroupNames {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:group_names: %s", p, err)
	}
	return err
}

func (p *GetPartitionsPsWithAuthArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionsPsWithAuthArgs(%+v)", *p)
}

type GetPartitionsPsWithAuthResult struct {
	Success []*Partition           `thrift:"success,0" json:"success"`
	O1      *NoSuchObjectException `thrift:"o1,1" json:"o1"`
	O2      *MetaException         `thrift:"o2,2" json:"o2"`
}

func NewGetPartitionsPsWithAuthResult() *GetPartitionsPsWithAuthResult {
	return &GetPartitionsPsWithAuthResult{}
}

var GetPartitionsPsWithAuthResult_Success_DEFAULT []*Partition

func (p *GetPartitionsPsWithAuthResult) GetSuccess() []*Partition {
	return p.Success
}

var GetPartitionsPsWithAuthResult_O1_DEFAULT *NoSuchObjectException

func (p *GetPartitionsPsWithAuthResult) GetO1() *NoSuchObjectException {
	if !p.IsSetO1() {
		return GetPartitionsPsWithAuthResult_O1_DEFAULT
	}
	return p.O1
}

var GetPartitionsPsWithAuthResult_O2_DEFAULT *MetaException

func (p *GetPartitionsPsWithAuthResult) GetO2() *MetaException {
	if !p.IsSetO2() {
		return GetPartitionsPsWithAuthResult_O2_DEFAULT
	}
	return p.O2
}
func (p *GetPartitionsPsWithAuthResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetPartitionsPsWithAuthResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetPartitionsPsWithAuthResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *GetPartitionsPsWithAuthResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionsPsWithAuthResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Partition, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem168 := &Partition{}
		if err := _elem168.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem168, err)
		}
		p.Success = append(p.Success, _elem168)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetPartitionsPsWithAuthResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &NoSuchObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetPartitionsPsWithAuthResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &MetaException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *GetPartitionsPsWithAuthResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partitions_ps_with_auth_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionsPsWithAuthResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionsPsWithAuthResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionsPsWithAuthResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionsPsWithAuthResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionsPsWithAuthResult(%+v)", *p)
}

type GetPartitionNamesPsArgs struct {
	DbName   string   `thrift:"db_name,1" json:"db_name"`
	TblName  string   `thrift:"tbl_name,2" json:"tbl_name"`
	PartVals []string `thrift:"part_vals,3" json:"part_vals"`
	MaxParts int16    `thrift:"max_parts,4" json:"max_parts"`
}

func NewGetPartitionNamesPsArgs() *GetPartitionNamesPsArgs {
	return &GetPartitionNamesPsArgs{
		MaxParts: -1,
	}
}

func (p *GetPartitionNamesPsArgs) GetDbName() string {
	return p.DbName
}

func (p *GetPartitionNamesPsArgs) GetTblName() string {
	return p.TblName
}

func (p *GetPartitionNamesPsArgs) GetPartVals() []string {
	return p.PartVals
}

func (p *GetPartitionNamesPsArgs) GetMaxParts() int16 {
	return p.MaxParts
}
func (p *GetPartitionNamesPsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionNamesPsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *GetPartitionNamesPsArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *GetPartitionNamesPsArgs) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.PartVals = tSlice
	for i := 0; i < size; i++ {
		var _elem169 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem169 = v
		}
		p.PartVals = append(p.PartVals, _elem169)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetPartitionNamesPsArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.MaxParts = v
	}
	return nil
}

func (p *GetPartitionNamesPsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partition_names_ps_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionNamesPsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionNamesPsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionNamesPsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("part_vals", thrift.LIST, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:part_vals: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.PartVals)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.PartVals {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:part_vals: %s", p, err)
	}
	return err
}

func (p *GetPartitionNamesPsArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("max_parts", thrift.I16, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:max_parts: %s", p, err)
	}
	if err := oprot.WriteI16(int16(p.MaxParts)); err != nil {
		return fmt.Errorf("%T.max_parts (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:max_parts: %s", p, err)
	}
	return err
}

func (p *GetPartitionNamesPsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionNamesPsArgs(%+v)", *p)
}

type GetPartitionNamesPsResult struct {
	Success []string       `thrift:"success,0" json:"success"`
	O1      *MetaException `thrift:"o1,1" json:"o1"`
}

func NewGetPartitionNamesPsResult() *GetPartitionNamesPsResult {
	return &GetPartitionNamesPsResult{}
}

var GetPartitionNamesPsResult_Success_DEFAULT []string

func (p *GetPartitionNamesPsResult) GetSuccess() []string {
	return p.Success
}

var GetPartitionNamesPsResult_O1_DEFAULT *MetaException

func (p *GetPartitionNamesPsResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return GetPartitionNamesPsResult_O1_DEFAULT
	}
	return p.O1
}
func (p *GetPartitionNamesPsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetPartitionNamesPsResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetPartitionNamesPsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionNamesPsResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem170 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem170 = v
		}
		p.Success = append(p.Success, _elem170)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetPartitionNamesPsResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetPartitionNamesPsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partition_names_ps_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionNamesPsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionNamesPsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionNamesPsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionNamesPsResult(%+v)", *p)
}

type GetPartitionsByFilterArgs struct {
	DbName   string `thrift:"db_name,1" json:"db_name"`
	TblName  string `thrift:"tbl_name,2" json:"tbl_name"`
	Filter   string `thrift:"filter,3" json:"filter"`
	MaxParts int16  `thrift:"max_parts,4" json:"max_parts"`
}

func NewGetPartitionsByFilterArgs() *GetPartitionsByFilterArgs {
	return &GetPartitionsByFilterArgs{
		MaxParts: -1,
	}
}

func (p *GetPartitionsByFilterArgs) GetDbName() string {
	return p.DbName
}

func (p *GetPartitionsByFilterArgs) GetTblName() string {
	return p.TblName
}

func (p *GetPartitionsByFilterArgs) GetFilter() string {
	return p.Filter
}

func (p *GetPartitionsByFilterArgs) GetMaxParts() int16 {
	return p.MaxParts
}
func (p *GetPartitionsByFilterArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionsByFilterArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *GetPartitionsByFilterArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *GetPartitionsByFilterArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Filter = v
	}
	return nil
}

func (p *GetPartitionsByFilterArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.MaxParts = v
	}
	return nil
}

func (p *GetPartitionsByFilterArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partitions_by_filter_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionsByFilterArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionsByFilterArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *GetPartitionsByFilterArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("filter", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:filter: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Filter)); err != nil {
		return fmt.Errorf("%T.filter (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:filter: %s", p, err)
	}
	return err
}

func (p *GetPartitionsByFilterArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("max_parts", thrift.I16, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:max_parts: %s", p, err)
	}
	if err := oprot.WriteI16(int16(p.MaxParts)); err != nil {
		return fmt.Errorf("%T.max_parts (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:max_parts: %s", p, err)
	}
	return err
}

func (p *GetPartitionsByFilterArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionsByFilterArgs(%+v)", *p)
}

type GetPartitionsByFilterResult struct {
	Success []*Partition           `thrift:"success,0" json:"success"`
	O1      *MetaException         `thrift:"o1,1" json:"o1"`
	O2      *NoSuchObjectException `thrift:"o2,2" json:"o2"`
}

func NewGetPartitionsByFilterResult() *GetPartitionsByFilterResult {
	return &GetPartitionsByFilterResult{}
}

var GetPartitionsByFilterResult_Success_DEFAULT []*Partition

func (p *GetPartitionsByFilterResult) GetSuccess() []*Partition {
	return p.Success
}

var GetPartitionsByFilterResult_O1_DEFAULT *MetaException

func (p *GetPartitionsByFilterResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return GetPartitionsByFilterResult_O1_DEFAULT
	}
	return p.O1
}

var GetPartitionsByFilterResult_O2_DEFAULT *NoSuchObjectException

func (p *GetPartitionsByFilterResult) GetO2() *NoSuchObjectException {
	if !p.IsSetO2() {
		return GetPartitionsByFilterResult_O2_DEFAULT
	}
	return p.O2
}
func (p *GetPartitionsByFilterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetPartitionsByFilterResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetPartitionsByFilterResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *GetPartitionsByFilterResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPartitionsByFilterResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Partition, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem171 := &Partition{}
		if err := _elem171.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem171, err)
		}
		p.Success = append(p.Success, _elem171)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetPartitionsByFilterResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetPartitionsByFilterResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &NoSuchObjectException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *GetPartitionsByFilterResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_partitions_by_filter_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPartitionsByFilterResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionsByFilterResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionsByFilterResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetPartitionsByFilterResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPartitionsByFilterResult(%+v)", *p)
}

type AlterPartitionArgs struct {
	DbName   string     `thrift:"db_name,1" json:"db_name"`
	TblName  string     `thrift:"tbl_name,2" json:"tbl_name"`
	NewPart_ *Partition `thrift:"new_part,3" json:"new_part"`
}

func NewAlterPartitionArgs() *AlterPartitionArgs {
	return &AlterPartitionArgs{}
}

func (p *AlterPartitionArgs) GetDbName() string {
	return p.DbName
}

func (p *AlterPartitionArgs) GetTblName() string {
	return p.TblName
}

var AlterPartitionArgs_NewPart__DEFAULT *Partition

func (p *AlterPartitionArgs) GetNewPart_() *Partition {
	if !p.IsSetNewPart_() {
		return AlterPartitionArgs_NewPart__DEFAULT
	}
	return p.NewPart_
}
func (p *AlterPartitionArgs) IsSetNewPart_() bool {
	return p.NewPart_ != nil
}

func (p *AlterPartitionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AlterPartitionArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *AlterPartitionArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *AlterPartitionArgs) ReadField3(iprot thrift.TProtocol) error {
	p.NewPart_ = &Partition{}
	if err := p.NewPart_.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NewPart_, err)
	}
	return nil
}

func (p *AlterPartitionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_partition_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AlterPartitionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *AlterPartitionArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *AlterPartitionArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("new_part", thrift.STRUCT, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:new_part: %s", p, err)
	}
	if err := p.NewPart_.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.NewPart_, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:new_part: %s", p, err)
	}
	return err
}

func (p *AlterPartitionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AlterPartitionArgs(%+v)", *p)
}

type AlterPartitionResult struct {
	O1 *InvalidOperationException `thrift:"o1,1" json:"o1"`
	O2 *MetaException             `thrift:"o2,2" json:"o2"`
}

func NewAlterPartitionResult() *AlterPartitionResult {
	return &AlterPartitionResult{}
}

var AlterPartitionResult_O1_DEFAULT *InvalidOperationException

func (p *AlterPartitionResult) GetO1() *InvalidOperationException {
	if !p.IsSetO1() {
		return AlterPartitionResult_O1_DEFAULT
	}
	return p.O1
}

var AlterPartitionResult_O2_DEFAULT *MetaException

func (p *AlterPartitionResult) GetO2() *MetaException {
	if !p.IsSetO2() {
		return AlterPartitionResult_O2_DEFAULT
	}
	return p.O2
}
func (p *AlterPartitionResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *AlterPartitionResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *AlterPartitionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AlterPartitionResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &InvalidOperationException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *AlterPartitionResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &MetaException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *AlterPartitionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_partition_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AlterPartitionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *AlterPartitionResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *AlterPartitionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AlterPartitionResult(%+v)", *p)
}

type GetConfigValueArgs struct {
	Name         string `thrift:"name,1" json:"name"`
	DefaultValue string `thrift:"defaultValue,2" json:"defaultValue"`
}

func NewGetConfigValueArgs() *GetConfigValueArgs {
	return &GetConfigValueArgs{}
}

func (p *GetConfigValueArgs) GetName() string {
	return p.Name
}

func (p *GetConfigValueArgs) GetDefaultValue() string {
	return p.DefaultValue
}
func (p *GetConfigValueArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetConfigValueArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *GetConfigValueArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.DefaultValue = v
	}
	return nil
}

func (p *GetConfigValueArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_config_value_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetConfigValueArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:name: %s", p, err)
	}
	return err
}

func (p *GetConfigValueArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("defaultValue", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:defaultValue: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DefaultValue)); err != nil {
		return fmt.Errorf("%T.defaultValue (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:defaultValue: %s", p, err)
	}
	return err
}

func (p *GetConfigValueArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetConfigValueArgs(%+v)", *p)
}

type GetConfigValueResult struct {
	Success *string                     `thrift:"success,0" json:"success"`
	O1      *ConfigValSecurityException `thrift:"o1,1" json:"o1"`
}

func NewGetConfigValueResult() *GetConfigValueResult {
	return &GetConfigValueResult{}
}

var GetConfigValueResult_Success_DEFAULT string

func (p *GetConfigValueResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return GetConfigValueResult_Success_DEFAULT
	}
	return *p.Success
}

var GetConfigValueResult_O1_DEFAULT *ConfigValSecurityException

func (p *GetConfigValueResult) GetO1() *ConfigValSecurityException {
	if !p.IsSetO1() {
		return GetConfigValueResult_O1_DEFAULT
	}
	return p.O1
}
func (p *GetConfigValueResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetConfigValueResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetConfigValueResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetConfigValueResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *GetConfigValueResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &ConfigValSecurityException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetConfigValueResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_config_value_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetConfigValueResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetConfigValueResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetConfigValueResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetConfigValueResult(%+v)", *p)
}

type PartitionNameToValsArgs struct {
	PartName string `thrift:"part_name,1" json:"part_name"`
}

func NewPartitionNameToValsArgs() *PartitionNameToValsArgs {
	return &PartitionNameToValsArgs{}
}

func (p *PartitionNameToValsArgs) GetPartName() string {
	return p.PartName
}
func (p *PartitionNameToValsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PartitionNameToValsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.PartName = v
	}
	return nil
}

func (p *PartitionNameToValsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("partition_name_to_vals_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PartitionNameToValsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("part_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:part_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PartName)); err != nil {
		return fmt.Errorf("%T.part_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:part_name: %s", p, err)
	}
	return err
}

func (p *PartitionNameToValsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PartitionNameToValsArgs(%+v)", *p)
}

type PartitionNameToValsResult struct {
	Success []string       `thrift:"success,0" json:"success"`
	O1      *MetaException `thrift:"o1,1" json:"o1"`
}

func NewPartitionNameToValsResult() *PartitionNameToValsResult {
	return &PartitionNameToValsResult{}
}

var PartitionNameToValsResult_Success_DEFAULT []string

func (p *PartitionNameToValsResult) GetSuccess() []string {
	return p.Success
}

var PartitionNameToValsResult_O1_DEFAULT *MetaException

func (p *PartitionNameToValsResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return PartitionNameToValsResult_O1_DEFAULT
	}
	return p.O1
}
func (p *PartitionNameToValsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PartitionNameToValsResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *PartitionNameToValsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PartitionNameToValsResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem172 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem172 = v
		}
		p.Success = append(p.Success, _elem172)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *PartitionNameToValsResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *PartitionNameToValsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("partition_name_to_vals_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PartitionNameToValsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *PartitionNameToValsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *PartitionNameToValsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PartitionNameToValsResult(%+v)", *p)
}

type PartitionNameToSpecArgs struct {
	PartName string `thrift:"part_name,1" json:"part_name"`
}

func NewPartitionNameToSpecArgs() *PartitionNameToSpecArgs {
	return &PartitionNameToSpecArgs{}
}

func (p *PartitionNameToSpecArgs) GetPartName() string {
	return p.PartName
}
func (p *PartitionNameToSpecArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PartitionNameToSpecArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.PartName = v
	}
	return nil
}

func (p *PartitionNameToSpecArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("partition_name_to_spec_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PartitionNameToSpecArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("part_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:part_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PartName)); err != nil {
		return fmt.Errorf("%T.part_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:part_name: %s", p, err)
	}
	return err
}

func (p *PartitionNameToSpecArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PartitionNameToSpecArgs(%+v)", *p)
}

type PartitionNameToSpecResult struct {
	Success map[string]string `thrift:"success,0" json:"success"`
	O1      *MetaException    `thrift:"o1,1" json:"o1"`
}

func NewPartitionNameToSpecResult() *PartitionNameToSpecResult {
	return &PartitionNameToSpecResult{}
}

var PartitionNameToSpecResult_Success_DEFAULT map[string]string

func (p *PartitionNameToSpecResult) GetSuccess() map[string]string {
	return p.Success
}

var PartitionNameToSpecResult_O1_DEFAULT *MetaException

func (p *PartitionNameToSpecResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return PartitionNameToSpecResult_O1_DEFAULT
	}
	return p.O1
}
func (p *PartitionNameToSpecResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PartitionNameToSpecResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *PartitionNameToSpecResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PartitionNameToSpecResult) ReadField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key173 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key173 = v
		}
		var _val174 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val174 = v
		}
		p.Success[_key173] = _val174
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *PartitionNameToSpecResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *PartitionNameToSpecResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("partition_name_to_spec_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PartitionNameToSpecResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Success)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *PartitionNameToSpecResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *PartitionNameToSpecResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PartitionNameToSpecResult(%+v)", *p)
}

type AddIndexArgs struct {
	NewIndex_  *Index `thrift:"new_index,1" json:"new_index"`
	IndexTable *Table `thrift:"index_table,2" json:"index_table"`
}

func NewAddIndexArgs() *AddIndexArgs {
	return &AddIndexArgs{}
}

var AddIndexArgs_NewIndex__DEFAULT *Index

func (p *AddIndexArgs) GetNewIndex_() *Index {
	if !p.IsSetNewIndex_() {
		return AddIndexArgs_NewIndex__DEFAULT
	}
	return p.NewIndex_
}

var AddIndexArgs_IndexTable_DEFAULT *Table

func (p *AddIndexArgs) GetIndexTable() *Table {
	if !p.IsSetIndexTable() {
		return AddIndexArgs_IndexTable_DEFAULT
	}
	return p.IndexTable
}
func (p *AddIndexArgs) IsSetNewIndex_() bool {
	return p.NewIndex_ != nil
}

func (p *AddIndexArgs) IsSetIndexTable() bool {
	return p.IndexTable != nil
}

func (p *AddIndexArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AddIndexArgs) ReadField1(iprot thrift.TProtocol) error {
	p.NewIndex_ = &Index{}
	if err := p.NewIndex_.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NewIndex_, err)
	}
	return nil
}

func (p *AddIndexArgs) ReadField2(iprot thrift.TProtocol) error {
	p.IndexTable = &Table{}
	if err := p.IndexTable.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.IndexTable, err)
	}
	return nil
}

func (p *AddIndexArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("add_index_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AddIndexArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("new_index", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:new_index: %s", p, err)
	}
	if err := p.NewIndex_.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.NewIndex_, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:new_index: %s", p, err)
	}
	return err
}

func (p *AddIndexArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("index_table", thrift.STRUCT, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:index_table: %s", p, err)
	}
	if err := p.IndexTable.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.IndexTable, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:index_table: %s", p, err)
	}
	return err
}

func (p *AddIndexArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddIndexArgs(%+v)", *p)
}

type AddIndexResult struct {
	Success *Index                  `thrift:"success,0" json:"success"`
	O1      *InvalidObjectException `thrift:"o1,1" json:"o1"`
	O2      *AlreadyExistsException `thrift:"o2,2" json:"o2"`
	O3      *MetaException          `thrift:"o3,3" json:"o3"`
}

func NewAddIndexResult() *AddIndexResult {
	return &AddIndexResult{}
}

var AddIndexResult_Success_DEFAULT *Index

func (p *AddIndexResult) GetSuccess() *Index {
	if !p.IsSetSuccess() {
		return AddIndexResult_Success_DEFAULT
	}
	return p.Success
}

var AddIndexResult_O1_DEFAULT *InvalidObjectException

func (p *AddIndexResult) GetO1() *InvalidObjectException {
	if !p.IsSetO1() {
		return AddIndexResult_O1_DEFAULT
	}
	return p.O1
}

var AddIndexResult_O2_DEFAULT *AlreadyExistsException

func (p *AddIndexResult) GetO2() *AlreadyExistsException {
	if !p.IsSetO2() {
		return AddIndexResult_O2_DEFAULT
	}
	return p.O2
}

var AddIndexResult_O3_DEFAULT *MetaException

func (p *AddIndexResult) GetO3() *MetaException {
	if !p.IsSetO3() {
		return AddIndexResult_O3_DEFAULT
	}
	return p.O3
}
func (p *AddIndexResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AddIndexResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *AddIndexResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *AddIndexResult) IsSetO3() bool {
	return p.O3 != nil
}

func (p *AddIndexResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AddIndexResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Index{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *AddIndexResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &InvalidObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *AddIndexResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &AlreadyExistsException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *AddIndexResult) ReadField3(iprot thrift.TProtocol) error {
	p.O3 = &MetaException{}
	if err := p.O3.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O3, err)
	}
	return nil
}

func (p *AddIndexResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("add_index_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AddIndexResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *AddIndexResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *AddIndexResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *AddIndexResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetO3() {
		if err := oprot.WriteFieldBegin("o3", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:o3: %s", p, err)
		}
		if err := p.O3.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O3, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:o3: %s", p, err)
		}
	}
	return err
}

func (p *AddIndexResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddIndexResult(%+v)", *p)
}

type AlterIndexArgs struct {
	Dbname      string `thrift:"dbname,1" json:"dbname"`
	BaseTblName string `thrift:"base_tbl_name,2" json:"base_tbl_name"`
	IdxName     string `thrift:"idx_name,3" json:"idx_name"`
	NewIdx_     *Index `thrift:"new_idx,4" json:"new_idx"`
}

func NewAlterIndexArgs() *AlterIndexArgs {
	return &AlterIndexArgs{}
}

func (p *AlterIndexArgs) GetDbname() string {
	return p.Dbname
}

func (p *AlterIndexArgs) GetBaseTblName() string {
	return p.BaseTblName
}

func (p *AlterIndexArgs) GetIdxName() string {
	return p.IdxName
}

var AlterIndexArgs_NewIdx__DEFAULT *Index

func (p *AlterIndexArgs) GetNewIdx_() *Index {
	if !p.IsSetNewIdx_() {
		return AlterIndexArgs_NewIdx__DEFAULT
	}
	return p.NewIdx_
}
func (p *AlterIndexArgs) IsSetNewIdx_() bool {
	return p.NewIdx_ != nil
}

func (p *AlterIndexArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AlterIndexArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Dbname = v
	}
	return nil
}

func (p *AlterIndexArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.BaseTblName = v
	}
	return nil
}

func (p *AlterIndexArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.IdxName = v
	}
	return nil
}

func (p *AlterIndexArgs) ReadField4(iprot thrift.TProtocol) error {
	p.NewIdx_ = &Index{}
	if err := p.NewIdx_.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NewIdx_, err)
	}
	return nil
}

func (p *AlterIndexArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_index_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AlterIndexArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dbname", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:dbname: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Dbname)); err != nil {
		return fmt.Errorf("%T.dbname (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:dbname: %s", p, err)
	}
	return err
}

func (p *AlterIndexArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("base_tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:base_tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.BaseTblName)); err != nil {
		return fmt.Errorf("%T.base_tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:base_tbl_name: %s", p, err)
	}
	return err
}

func (p *AlterIndexArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("idx_name", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:idx_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.IdxName)); err != nil {
		return fmt.Errorf("%T.idx_name (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:idx_name: %s", p, err)
	}
	return err
}

func (p *AlterIndexArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("new_idx", thrift.STRUCT, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:new_idx: %s", p, err)
	}
	if err := p.NewIdx_.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.NewIdx_, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:new_idx: %s", p, err)
	}
	return err
}

func (p *AlterIndexArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AlterIndexArgs(%+v)", *p)
}

type AlterIndexResult struct {
	O1 *InvalidOperationException `thrift:"o1,1" json:"o1"`
	O2 *MetaException             `thrift:"o2,2" json:"o2"`
}

func NewAlterIndexResult() *AlterIndexResult {
	return &AlterIndexResult{}
}

var AlterIndexResult_O1_DEFAULT *InvalidOperationException

func (p *AlterIndexResult) GetO1() *InvalidOperationException {
	if !p.IsSetO1() {
		return AlterIndexResult_O1_DEFAULT
	}
	return p.O1
}

var AlterIndexResult_O2_DEFAULT *MetaException

func (p *AlterIndexResult) GetO2() *MetaException {
	if !p.IsSetO2() {
		return AlterIndexResult_O2_DEFAULT
	}
	return p.O2
}
func (p *AlterIndexResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *AlterIndexResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *AlterIndexResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AlterIndexResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &InvalidOperationException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *AlterIndexResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &MetaException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *AlterIndexResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("alter_index_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AlterIndexResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *AlterIndexResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *AlterIndexResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AlterIndexResult(%+v)", *p)
}

type DropIndexByNameArgs struct {
	DbName     string `thrift:"db_name,1" json:"db_name"`
	TblName    string `thrift:"tbl_name,2" json:"tbl_name"`
	IndexName  string `thrift:"index_name,3" json:"index_name"`
	DeleteData bool   `thrift:"deleteData,4" json:"deleteData"`
}

func NewDropIndexByNameArgs() *DropIndexByNameArgs {
	return &DropIndexByNameArgs{}
}

func (p *DropIndexByNameArgs) GetDbName() string {
	return p.DbName
}

func (p *DropIndexByNameArgs) GetTblName() string {
	return p.TblName
}

func (p *DropIndexByNameArgs) GetIndexName() string {
	return p.IndexName
}

func (p *DropIndexByNameArgs) GetDeleteData() bool {
	return p.DeleteData
}
func (p *DropIndexByNameArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DropIndexByNameArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *DropIndexByNameArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *DropIndexByNameArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.IndexName = v
	}
	return nil
}

func (p *DropIndexByNameArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.DeleteData = v
	}
	return nil
}

func (p *DropIndexByNameArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_index_by_name_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DropIndexByNameArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *DropIndexByNameArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *DropIndexByNameArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("index_name", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:index_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.IndexName)); err != nil {
		return fmt.Errorf("%T.index_name (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:index_name: %s", p, err)
	}
	return err
}

func (p *DropIndexByNameArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deleteData", thrift.BOOL, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:deleteData: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.DeleteData)); err != nil {
		return fmt.Errorf("%T.deleteData (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:deleteData: %s", p, err)
	}
	return err
}

func (p *DropIndexByNameArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropIndexByNameArgs(%+v)", *p)
}

type DropIndexByNameResult struct {
	Success *bool                  `thrift:"success,0" json:"success"`
	O1      *NoSuchObjectException `thrift:"o1,1" json:"o1"`
	O2      *MetaException         `thrift:"o2,2" json:"o2"`
}

func NewDropIndexByNameResult() *DropIndexByNameResult {
	return &DropIndexByNameResult{}
}

var DropIndexByNameResult_Success_DEFAULT bool

func (p *DropIndexByNameResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return DropIndexByNameResult_Success_DEFAULT
	}
	return *p.Success
}

var DropIndexByNameResult_O1_DEFAULT *NoSuchObjectException

func (p *DropIndexByNameResult) GetO1() *NoSuchObjectException {
	if !p.IsSetO1() {
		return DropIndexByNameResult_O1_DEFAULT
	}
	return p.O1
}

var DropIndexByNameResult_O2_DEFAULT *MetaException

func (p *DropIndexByNameResult) GetO2() *MetaException {
	if !p.IsSetO2() {
		return DropIndexByNameResult_O2_DEFAULT
	}
	return p.O2
}
func (p *DropIndexByNameResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DropIndexByNameResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *DropIndexByNameResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *DropIndexByNameResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DropIndexByNameResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *DropIndexByNameResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &NoSuchObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *DropIndexByNameResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &MetaException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *DropIndexByNameResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_index_by_name_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DropIndexByNameResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *DropIndexByNameResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *DropIndexByNameResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *DropIndexByNameResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropIndexByNameResult(%+v)", *p)
}

type GetIndexByNameArgs struct {
	DbName    string `thrift:"db_name,1" json:"db_name"`
	TblName   string `thrift:"tbl_name,2" json:"tbl_name"`
	IndexName string `thrift:"index_name,3" json:"index_name"`
}

func NewGetIndexByNameArgs() *GetIndexByNameArgs {
	return &GetIndexByNameArgs{}
}

func (p *GetIndexByNameArgs) GetDbName() string {
	return p.DbName
}

func (p *GetIndexByNameArgs) GetTblName() string {
	return p.TblName
}

func (p *GetIndexByNameArgs) GetIndexName() string {
	return p.IndexName
}
func (p *GetIndexByNameArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetIndexByNameArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *GetIndexByNameArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *GetIndexByNameArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.IndexName = v
	}
	return nil
}

func (p *GetIndexByNameArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_index_by_name_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetIndexByNameArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *GetIndexByNameArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *GetIndexByNameArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("index_name", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:index_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.IndexName)); err != nil {
		return fmt.Errorf("%T.index_name (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:index_name: %s", p, err)
	}
	return err
}

func (p *GetIndexByNameArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetIndexByNameArgs(%+v)", *p)
}

type GetIndexByNameResult struct {
	Success *Index                 `thrift:"success,0" json:"success"`
	O1      *MetaException         `thrift:"o1,1" json:"o1"`
	O2      *NoSuchObjectException `thrift:"o2,2" json:"o2"`
}

func NewGetIndexByNameResult() *GetIndexByNameResult {
	return &GetIndexByNameResult{}
}

var GetIndexByNameResult_Success_DEFAULT *Index

func (p *GetIndexByNameResult) GetSuccess() *Index {
	if !p.IsSetSuccess() {
		return GetIndexByNameResult_Success_DEFAULT
	}
	return p.Success
}

var GetIndexByNameResult_O1_DEFAULT *MetaException

func (p *GetIndexByNameResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return GetIndexByNameResult_O1_DEFAULT
	}
	return p.O1
}

var GetIndexByNameResult_O2_DEFAULT *NoSuchObjectException

func (p *GetIndexByNameResult) GetO2() *NoSuchObjectException {
	if !p.IsSetO2() {
		return GetIndexByNameResult_O2_DEFAULT
	}
	return p.O2
}
func (p *GetIndexByNameResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetIndexByNameResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetIndexByNameResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *GetIndexByNameResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetIndexByNameResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Index{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetIndexByNameResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetIndexByNameResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &NoSuchObjectException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *GetIndexByNameResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_index_by_name_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetIndexByNameResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetIndexByNameResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetIndexByNameResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetIndexByNameResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetIndexByNameResult(%+v)", *p)
}

type GetIndexesArgs struct {
	DbName     string `thrift:"db_name,1" json:"db_name"`
	TblName    string `thrift:"tbl_name,2" json:"tbl_name"`
	MaxIndexes int16  `thrift:"max_indexes,3" json:"max_indexes"`
}

func NewGetIndexesArgs() *GetIndexesArgs {
	return &GetIndexesArgs{
		MaxIndexes: -1,
	}
}

func (p *GetIndexesArgs) GetDbName() string {
	return p.DbName
}

func (p *GetIndexesArgs) GetTblName() string {
	return p.TblName
}

func (p *GetIndexesArgs) GetMaxIndexes() int16 {
	return p.MaxIndexes
}
func (p *GetIndexesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetIndexesArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *GetIndexesArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *GetIndexesArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.MaxIndexes = v
	}
	return nil
}

func (p *GetIndexesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_indexes_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetIndexesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *GetIndexesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *GetIndexesArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("max_indexes", thrift.I16, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:max_indexes: %s", p, err)
	}
	if err := oprot.WriteI16(int16(p.MaxIndexes)); err != nil {
		return fmt.Errorf("%T.max_indexes (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:max_indexes: %s", p, err)
	}
	return err
}

func (p *GetIndexesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetIndexesArgs(%+v)", *p)
}

type GetIndexesResult struct {
	Success []*Index               `thrift:"success,0" json:"success"`
	O1      *NoSuchObjectException `thrift:"o1,1" json:"o1"`
	O2      *MetaException         `thrift:"o2,2" json:"o2"`
}

func NewGetIndexesResult() *GetIndexesResult {
	return &GetIndexesResult{}
}

var GetIndexesResult_Success_DEFAULT []*Index

func (p *GetIndexesResult) GetSuccess() []*Index {
	return p.Success
}

var GetIndexesResult_O1_DEFAULT *NoSuchObjectException

func (p *GetIndexesResult) GetO1() *NoSuchObjectException {
	if !p.IsSetO1() {
		return GetIndexesResult_O1_DEFAULT
	}
	return p.O1
}

var GetIndexesResult_O2_DEFAULT *MetaException

func (p *GetIndexesResult) GetO2() *MetaException {
	if !p.IsSetO2() {
		return GetIndexesResult_O2_DEFAULT
	}
	return p.O2
}
func (p *GetIndexesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetIndexesResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetIndexesResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *GetIndexesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetIndexesResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Index, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem175 := &Index{}
		if err := _elem175.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem175, err)
		}
		p.Success = append(p.Success, _elem175)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetIndexesResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &NoSuchObjectException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetIndexesResult) ReadField2(iprot thrift.TProtocol) error {
	p.O2 = &MetaException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *GetIndexesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_indexes_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetIndexesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetIndexesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetIndexesResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetIndexesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetIndexesResult(%+v)", *p)
}

type GetIndexNamesArgs struct {
	DbName     string `thrift:"db_name,1" json:"db_name"`
	TblName    string `thrift:"tbl_name,2" json:"tbl_name"`
	MaxIndexes int16  `thrift:"max_indexes,3" json:"max_indexes"`
}

func NewGetIndexNamesArgs() *GetIndexNamesArgs {
	return &GetIndexNamesArgs{
		MaxIndexes: -1,
	}
}

func (p *GetIndexNamesArgs) GetDbName() string {
	return p.DbName
}

func (p *GetIndexNamesArgs) GetTblName() string {
	return p.TblName
}

func (p *GetIndexNamesArgs) GetMaxIndexes() int16 {
	return p.MaxIndexes
}
func (p *GetIndexNamesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetIndexNamesArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.DbName = v
	}
	return nil
}

func (p *GetIndexNamesArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TblName = v
	}
	return nil
}

func (p *GetIndexNamesArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.MaxIndexes = v
	}
	return nil
}

func (p *GetIndexNamesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_index_names_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetIndexNamesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("db_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:db_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DbName)); err != nil {
		return fmt.Errorf("%T.db_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:db_name: %s", p, err)
	}
	return err
}

func (p *GetIndexNamesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tbl_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tbl_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TblName)); err != nil {
		return fmt.Errorf("%T.tbl_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tbl_name: %s", p, err)
	}
	return err
}

func (p *GetIndexNamesArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("max_indexes", thrift.I16, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:max_indexes: %s", p, err)
	}
	if err := oprot.WriteI16(int16(p.MaxIndexes)); err != nil {
		return fmt.Errorf("%T.max_indexes (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:max_indexes: %s", p, err)
	}
	return err
}

func (p *GetIndexNamesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetIndexNamesArgs(%+v)", *p)
}

type GetIndexNamesResult struct {
	Success []string       `thrift:"success,0" json:"success"`
	O2      *MetaException `thrift:"o2,1" json:"o2"`
}

func NewGetIndexNamesResult() *GetIndexNamesResult {
	return &GetIndexNamesResult{}
}

var GetIndexNamesResult_Success_DEFAULT []string

func (p *GetIndexNamesResult) GetSuccess() []string {
	return p.Success
}

var GetIndexNamesResult_O2_DEFAULT *MetaException

func (p *GetIndexNamesResult) GetO2() *MetaException {
	if !p.IsSetO2() {
		return GetIndexNamesResult_O2_DEFAULT
	}
	return p.O2
}
func (p *GetIndexNamesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetIndexNamesResult) IsSetO2() bool {
	return p.O2 != nil
}

func (p *GetIndexNamesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetIndexNamesResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem176 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem176 = v
		}
		p.Success = append(p.Success, _elem176)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetIndexNamesResult) ReadField1(iprot thrift.TProtocol) error {
	p.O2 = &MetaException{}
	if err := p.O2.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O2, err)
	}
	return nil
}

func (p *GetIndexNamesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_index_names_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetIndexNamesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetIndexNamesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO2() {
		if err := oprot.WriteFieldBegin("o2", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o2: %s", p, err)
		}
		if err := p.O2.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O2, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o2: %s", p, err)
		}
	}
	return err
}

func (p *GetIndexNamesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetIndexNamesResult(%+v)", *p)
}

type CreateRoleArgs struct {
	Role *Role `thrift:"role,1" json:"role"`
}

func NewCreateRoleArgs() *CreateRoleArgs {
	return &CreateRoleArgs{}
}

var CreateRoleArgs_Role_DEFAULT *Role

func (p *CreateRoleArgs) GetRole() *Role {
	if !p.IsSetRole() {
		return CreateRoleArgs_Role_DEFAULT
	}
	return p.Role
}
func (p *CreateRoleArgs) IsSetRole() bool {
	return p.Role != nil
}

func (p *CreateRoleArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateRoleArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Role = &Role{}
	if err := p.Role.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Role, err)
	}
	return nil
}

func (p *CreateRoleArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_role_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateRoleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("role", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:role: %s", p, err)
	}
	if err := p.Role.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Role, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:role: %s", p, err)
	}
	return err
}

func (p *CreateRoleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateRoleArgs(%+v)", *p)
}

type CreateRoleResult struct {
	Success *bool          `thrift:"success,0" json:"success"`
	O1      *MetaException `thrift:"o1,1" json:"o1"`
}

func NewCreateRoleResult() *CreateRoleResult {
	return &CreateRoleResult{}
}

var CreateRoleResult_Success_DEFAULT bool

func (p *CreateRoleResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return CreateRoleResult_Success_DEFAULT
	}
	return *p.Success
}

var CreateRoleResult_O1_DEFAULT *MetaException

func (p *CreateRoleResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return CreateRoleResult_O1_DEFAULT
	}
	return p.O1
}
func (p *CreateRoleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateRoleResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *CreateRoleResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateRoleResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *CreateRoleResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *CreateRoleResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_role_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateRoleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *CreateRoleResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *CreateRoleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateRoleResult(%+v)", *p)
}

type DropRoleArgs struct {
	RoleName string `thrift:"role_name,1" json:"role_name"`
}

func NewDropRoleArgs() *DropRoleArgs {
	return &DropRoleArgs{}
}

func (p *DropRoleArgs) GetRoleName() string {
	return p.RoleName
}
func (p *DropRoleArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DropRoleArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.RoleName = v
	}
	return nil
}

func (p *DropRoleArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_role_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DropRoleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("role_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:role_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.RoleName)); err != nil {
		return fmt.Errorf("%T.role_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:role_name: %s", p, err)
	}
	return err
}

func (p *DropRoleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropRoleArgs(%+v)", *p)
}

type DropRoleResult struct {
	Success *bool          `thrift:"success,0" json:"success"`
	O1      *MetaException `thrift:"o1,1" json:"o1"`
}

func NewDropRoleResult() *DropRoleResult {
	return &DropRoleResult{}
}

var DropRoleResult_Success_DEFAULT bool

func (p *DropRoleResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return DropRoleResult_Success_DEFAULT
	}
	return *p.Success
}

var DropRoleResult_O1_DEFAULT *MetaException

func (p *DropRoleResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return DropRoleResult_O1_DEFAULT
	}
	return p.O1
}
func (p *DropRoleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DropRoleResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *DropRoleResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DropRoleResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *DropRoleResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *DropRoleResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("drop_role_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DropRoleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *DropRoleResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *DropRoleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DropRoleResult(%+v)", *p)
}

type GetRoleNamesArgs struct {
}

func NewGetRoleNamesArgs() *GetRoleNamesArgs {
	return &GetRoleNamesArgs{}
}

func (p *GetRoleNamesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetRoleNamesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_role_names_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetRoleNamesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRoleNamesArgs(%+v)", *p)
}

type GetRoleNamesResult struct {
	Success []string       `thrift:"success,0" json:"success"`
	O1      *MetaException `thrift:"o1,1" json:"o1"`
}

func NewGetRoleNamesResult() *GetRoleNamesResult {
	return &GetRoleNamesResult{}
}

var GetRoleNamesResult_Success_DEFAULT []string

func (p *GetRoleNamesResult) GetSuccess() []string {
	return p.Success
}

var GetRoleNamesResult_O1_DEFAULT *MetaException

func (p *GetRoleNamesResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return GetRoleNamesResult_O1_DEFAULT
	}
	return p.O1
}
func (p *GetRoleNamesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetRoleNamesResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetRoleNamesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetRoleNamesResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem177 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem177 = v
		}
		p.Success = append(p.Success, _elem177)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetRoleNamesResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetRoleNamesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_role_names_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetRoleNamesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetRoleNamesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetRoleNamesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRoleNamesResult(%+v)", *p)
}

type GrantRoleArgs struct {
	RoleName      string        `thrift:"role_name,1" json:"role_name"`
	PrincipalName string        `thrift:"principal_name,2" json:"principal_name"`
	PrincipalType PrincipalType `thrift:"principal_type,3" json:"principal_type"`
	Grantor       string        `thrift:"grantor,4" json:"grantor"`
	GrantorType   PrincipalType `thrift:"grantorType,5" json:"grantorType"`
	GrantOption   bool          `thrift:"grant_option,6" json:"grant_option"`
}

func NewGrantRoleArgs() *GrantRoleArgs {
	return &GrantRoleArgs{}
}

func (p *GrantRoleArgs) GetRoleName() string {
	return p.RoleName
}

func (p *GrantRoleArgs) GetPrincipalName() string {
	return p.PrincipalName
}

func (p *GrantRoleArgs) GetPrincipalType() PrincipalType {
	return p.PrincipalType
}

func (p *GrantRoleArgs) GetGrantor() string {
	return p.Grantor
}

func (p *GrantRoleArgs) GetGrantorType() PrincipalType {
	return p.GrantorType
}

func (p *GrantRoleArgs) GetGrantOption() bool {
	return p.GrantOption
}
func (p *GrantRoleArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GrantRoleArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.RoleName = v
	}
	return nil
}

func (p *GrantRoleArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.PrincipalName = v
	}
	return nil
}

func (p *GrantRoleArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		temp := PrincipalType(v)
		p.PrincipalType = temp
	}
	return nil
}

func (p *GrantRoleArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Grantor = v
	}
	return nil
}

func (p *GrantRoleArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		temp := PrincipalType(v)
		p.GrantorType = temp
	}
	return nil
}

func (p *GrantRoleArgs) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.GrantOption = v
	}
	return nil
}

func (p *GrantRoleArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("grant_role_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GrantRoleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("role_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:role_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.RoleName)); err != nil {
		return fmt.Errorf("%T.role_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:role_name: %s", p, err)
	}
	return err
}

func (p *GrantRoleArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("principal_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:principal_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PrincipalName)); err != nil {
		return fmt.Errorf("%T.principal_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:principal_name: %s", p, err)
	}
	return err
}

func (p *GrantRoleArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("principal_type", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:principal_type: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.PrincipalType)); err != nil {
		return fmt.Errorf("%T.principal_type (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:principal_type: %s", p, err)
	}
	return err
}

func (p *GrantRoleArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("grantor", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:grantor: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Grantor)); err != nil {
		return fmt.Errorf("%T.grantor (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:grantor: %s", p, err)
	}
	return err
}

func (p *GrantRoleArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("grantorType", thrift.I32, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:grantorType: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.GrantorType)); err != nil {
		return fmt.Errorf("%T.grantorType (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:grantorType: %s", p, err)
	}
	return err
}

func (p *GrantRoleArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("grant_option", thrift.BOOL, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:grant_option: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.GrantOption)); err != nil {
		return fmt.Errorf("%T.grant_option (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:grant_option: %s", p, err)
	}
	return err
}

func (p *GrantRoleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GrantRoleArgs(%+v)", *p)
}

type GrantRoleResult struct {
	Success *bool          `thrift:"success,0" json:"success"`
	O1      *MetaException `thrift:"o1,1" json:"o1"`
}

func NewGrantRoleResult() *GrantRoleResult {
	return &GrantRoleResult{}
}

var GrantRoleResult_Success_DEFAULT bool

func (p *GrantRoleResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return GrantRoleResult_Success_DEFAULT
	}
	return *p.Success
}

var GrantRoleResult_O1_DEFAULT *MetaException

func (p *GrantRoleResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return GrantRoleResult_O1_DEFAULT
	}
	return p.O1
}
func (p *GrantRoleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GrantRoleResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GrantRoleResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GrantRoleResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *GrantRoleResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GrantRoleResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("grant_role_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GrantRoleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GrantRoleResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GrantRoleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GrantRoleResult(%+v)", *p)
}

type RevokeRoleArgs struct {
	RoleName      string        `thrift:"role_name,1" json:"role_name"`
	PrincipalName string        `thrift:"principal_name,2" json:"principal_name"`
	PrincipalType PrincipalType `thrift:"principal_type,3" json:"principal_type"`
}

func NewRevokeRoleArgs() *RevokeRoleArgs {
	return &RevokeRoleArgs{}
}

func (p *RevokeRoleArgs) GetRoleName() string {
	return p.RoleName
}

func (p *RevokeRoleArgs) GetPrincipalName() string {
	return p.PrincipalName
}

func (p *RevokeRoleArgs) GetPrincipalType() PrincipalType {
	return p.PrincipalType
}
func (p *RevokeRoleArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RevokeRoleArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.RoleName = v
	}
	return nil
}

func (p *RevokeRoleArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.PrincipalName = v
	}
	return nil
}

func (p *RevokeRoleArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		temp := PrincipalType(v)
		p.PrincipalType = temp
	}
	return nil
}

func (p *RevokeRoleArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("revoke_role_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RevokeRoleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("role_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:role_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.RoleName)); err != nil {
		return fmt.Errorf("%T.role_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:role_name: %s", p, err)
	}
	return err
}

func (p *RevokeRoleArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("principal_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:principal_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PrincipalName)); err != nil {
		return fmt.Errorf("%T.principal_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:principal_name: %s", p, err)
	}
	return err
}

func (p *RevokeRoleArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("principal_type", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:principal_type: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.PrincipalType)); err != nil {
		return fmt.Errorf("%T.principal_type (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:principal_type: %s", p, err)
	}
	return err
}

func (p *RevokeRoleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RevokeRoleArgs(%+v)", *p)
}

type RevokeRoleResult struct {
	Success *bool          `thrift:"success,0" json:"success"`
	O1      *MetaException `thrift:"o1,1" json:"o1"`
}

func NewRevokeRoleResult() *RevokeRoleResult {
	return &RevokeRoleResult{}
}

var RevokeRoleResult_Success_DEFAULT bool

func (p *RevokeRoleResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return RevokeRoleResult_Success_DEFAULT
	}
	return *p.Success
}

var RevokeRoleResult_O1_DEFAULT *MetaException

func (p *RevokeRoleResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return RevokeRoleResult_O1_DEFAULT
	}
	return p.O1
}
func (p *RevokeRoleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RevokeRoleResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *RevokeRoleResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RevokeRoleResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *RevokeRoleResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *RevokeRoleResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("revoke_role_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RevokeRoleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *RevokeRoleResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *RevokeRoleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RevokeRoleResult(%+v)", *p)
}

type ListRolesArgs struct {
	PrincipalName string        `thrift:"principal_name,1" json:"principal_name"`
	PrincipalType PrincipalType `thrift:"principal_type,2" json:"principal_type"`
}

func NewListRolesArgs() *ListRolesArgs {
	return &ListRolesArgs{}
}

func (p *ListRolesArgs) GetPrincipalName() string {
	return p.PrincipalName
}

func (p *ListRolesArgs) GetPrincipalType() PrincipalType {
	return p.PrincipalType
}
func (p *ListRolesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListRolesArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.PrincipalName = v
	}
	return nil
}

func (p *ListRolesArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		temp := PrincipalType(v)
		p.PrincipalType = temp
	}
	return nil
}

func (p *ListRolesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("list_roles_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ListRolesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("principal_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:principal_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PrincipalName)); err != nil {
		return fmt.Errorf("%T.principal_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:principal_name: %s", p, err)
	}
	return err
}

func (p *ListRolesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("principal_type", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:principal_type: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.PrincipalType)); err != nil {
		return fmt.Errorf("%T.principal_type (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:principal_type: %s", p, err)
	}
	return err
}

func (p *ListRolesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListRolesArgs(%+v)", *p)
}

type ListRolesResult struct {
	Success []*Role        `thrift:"success,0" json:"success"`
	O1      *MetaException `thrift:"o1,1" json:"o1"`
}

func NewListRolesResult() *ListRolesResult {
	return &ListRolesResult{}
}

var ListRolesResult_Success_DEFAULT []*Role

func (p *ListRolesResult) GetSuccess() []*Role {
	return p.Success
}

var ListRolesResult_O1_DEFAULT *MetaException

func (p *ListRolesResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return ListRolesResult_O1_DEFAULT
	}
	return p.O1
}
func (p *ListRolesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListRolesResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ListRolesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListRolesResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Role, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem178 := &Role{}
		if err := _elem178.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem178, err)
		}
		p.Success = append(p.Success, _elem178)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *ListRolesResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *ListRolesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("list_roles_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ListRolesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *ListRolesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *ListRolesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListRolesResult(%+v)", *p)
}

type GetPrivilegeSetArgs struct {
	HiveObject *HiveObjectRef `thrift:"hiveObject,1" json:"hiveObject"`
	UserName   string         `thrift:"user_name,2" json:"user_name"`
	GroupNames []string       `thrift:"group_names,3" json:"group_names"`
}

func NewGetPrivilegeSetArgs() *GetPrivilegeSetArgs {
	return &GetPrivilegeSetArgs{}
}

var GetPrivilegeSetArgs_HiveObject_DEFAULT *HiveObjectRef

func (p *GetPrivilegeSetArgs) GetHiveObject() *HiveObjectRef {
	if !p.IsSetHiveObject() {
		return GetPrivilegeSetArgs_HiveObject_DEFAULT
	}
	return p.HiveObject
}

func (p *GetPrivilegeSetArgs) GetUserName() string {
	return p.UserName
}

func (p *GetPrivilegeSetArgs) GetGroupNames() []string {
	return p.GroupNames
}
func (p *GetPrivilegeSetArgs) IsSetHiveObject() bool {
	return p.HiveObject != nil
}

func (p *GetPrivilegeSetArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPrivilegeSetArgs) ReadField1(iprot thrift.TProtocol) error {
	p.HiveObject = &HiveObjectRef{}
	if err := p.HiveObject.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.HiveObject, err)
	}
	return nil
}

func (p *GetPrivilegeSetArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.UserName = v
	}
	return nil
}

func (p *GetPrivilegeSetArgs) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.GroupNames = tSlice
	for i := 0; i < size; i++ {
		var _elem179 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem179 = v
		}
		p.GroupNames = append(p.GroupNames, _elem179)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GetPrivilegeSetArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_privilege_set_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPrivilegeSetArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hiveObject", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:hiveObject: %s", p, err)
	}
	if err := p.HiveObject.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.HiveObject, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:hiveObject: %s", p, err)
	}
	return err
}

func (p *GetPrivilegeSetArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:user_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.UserName)); err != nil {
		return fmt.Errorf("%T.user_name (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:user_name: %s", p, err)
	}
	return err
}

func (p *GetPrivilegeSetArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("group_names", thrift.LIST, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:group_names: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.GroupNames)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.GroupNames {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:group_names: %s", p, err)
	}
	return err
}

func (p *GetPrivilegeSetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPrivilegeSetArgs(%+v)", *p)
}

type GetPrivilegeSetResult struct {
	Success *PrincipalPrivilegeSet `thrift:"success,0" json:"success"`
	O1      *MetaException         `thrift:"o1,1" json:"o1"`
}

func NewGetPrivilegeSetResult() *GetPrivilegeSetResult {
	return &GetPrivilegeSetResult{}
}

var GetPrivilegeSetResult_Success_DEFAULT *PrincipalPrivilegeSet

func (p *GetPrivilegeSetResult) GetSuccess() *PrincipalPrivilegeSet {
	if !p.IsSetSuccess() {
		return GetPrivilegeSetResult_Success_DEFAULT
	}
	return p.Success
}

var GetPrivilegeSetResult_O1_DEFAULT *MetaException

func (p *GetPrivilegeSetResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return GetPrivilegeSetResult_O1_DEFAULT
	}
	return p.O1
}
func (p *GetPrivilegeSetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetPrivilegeSetResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetPrivilegeSetResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetPrivilegeSetResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &PrincipalPrivilegeSet{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetPrivilegeSetResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetPrivilegeSetResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_privilege_set_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetPrivilegeSetResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetPrivilegeSetResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetPrivilegeSetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPrivilegeSetResult(%+v)", *p)
}

type ListPrivilegesArgs struct {
	PrincipalName string         `thrift:"principal_name,1" json:"principal_name"`
	PrincipalType PrincipalType  `thrift:"principal_type,2" json:"principal_type"`
	HiveObject    *HiveObjectRef `thrift:"hiveObject,3" json:"hiveObject"`
}

func NewListPrivilegesArgs() *ListPrivilegesArgs {
	return &ListPrivilegesArgs{}
}

func (p *ListPrivilegesArgs) GetPrincipalName() string {
	return p.PrincipalName
}

func (p *ListPrivilegesArgs) GetPrincipalType() PrincipalType {
	return p.PrincipalType
}

var ListPrivilegesArgs_HiveObject_DEFAULT *HiveObjectRef

func (p *ListPrivilegesArgs) GetHiveObject() *HiveObjectRef {
	if !p.IsSetHiveObject() {
		return ListPrivilegesArgs_HiveObject_DEFAULT
	}
	return p.HiveObject
}
func (p *ListPrivilegesArgs) IsSetHiveObject() bool {
	return p.HiveObject != nil
}

func (p *ListPrivilegesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListPrivilegesArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.PrincipalName = v
	}
	return nil
}

func (p *ListPrivilegesArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		temp := PrincipalType(v)
		p.PrincipalType = temp
	}
	return nil
}

func (p *ListPrivilegesArgs) ReadField3(iprot thrift.TProtocol) error {
	p.HiveObject = &HiveObjectRef{}
	if err := p.HiveObject.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.HiveObject, err)
	}
	return nil
}

func (p *ListPrivilegesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("list_privileges_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ListPrivilegesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("principal_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:principal_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.PrincipalName)); err != nil {
		return fmt.Errorf("%T.principal_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:principal_name: %s", p, err)
	}
	return err
}

func (p *ListPrivilegesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("principal_type", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:principal_type: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.PrincipalType)); err != nil {
		return fmt.Errorf("%T.principal_type (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:principal_type: %s", p, err)
	}
	return err
}

func (p *ListPrivilegesArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hiveObject", thrift.STRUCT, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:hiveObject: %s", p, err)
	}
	if err := p.HiveObject.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.HiveObject, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:hiveObject: %s", p, err)
	}
	return err
}

func (p *ListPrivilegesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListPrivilegesArgs(%+v)", *p)
}

type ListPrivilegesResult struct {
	Success []*HiveObjectPrivilege `thrift:"success,0" json:"success"`
	O1      *MetaException         `thrift:"o1,1" json:"o1"`
}

func NewListPrivilegesResult() *ListPrivilegesResult {
	return &ListPrivilegesResult{}
}

var ListPrivilegesResult_Success_DEFAULT []*HiveObjectPrivilege

func (p *ListPrivilegesResult) GetSuccess() []*HiveObjectPrivilege {
	return p.Success
}

var ListPrivilegesResult_O1_DEFAULT *MetaException

func (p *ListPrivilegesResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return ListPrivilegesResult_O1_DEFAULT
	}
	return p.O1
}
func (p *ListPrivilegesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListPrivilegesResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *ListPrivilegesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ListPrivilegesResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*HiveObjectPrivilege, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem180 := &HiveObjectPrivilege{}
		if err := _elem180.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem180, err)
		}
		p.Success = append(p.Success, _elem180)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *ListPrivilegesResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *ListPrivilegesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("list_privileges_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ListPrivilegesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v, err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *ListPrivilegesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *ListPrivilegesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListPrivilegesResult(%+v)", *p)
}

type GrantPrivilegesArgs struct {
	Privileges *PrivilegeBag `thrift:"privileges,1" json:"privileges"`
}

func NewGrantPrivilegesArgs() *GrantPrivilegesArgs {
	return &GrantPrivilegesArgs{}
}

var GrantPrivilegesArgs_Privileges_DEFAULT *PrivilegeBag

func (p *GrantPrivilegesArgs) GetPrivileges() *PrivilegeBag {
	if !p.IsSetPrivileges() {
		return GrantPrivilegesArgs_Privileges_DEFAULT
	}
	return p.Privileges
}
func (p *GrantPrivilegesArgs) IsSetPrivileges() bool {
	return p.Privileges != nil
}

func (p *GrantPrivilegesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GrantPrivilegesArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Privileges = &PrivilegeBag{}
	if err := p.Privileges.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Privileges, err)
	}
	return nil
}

func (p *GrantPrivilegesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("grant_privileges_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GrantPrivilegesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privileges", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:privileges: %s", p, err)
	}
	if err := p.Privileges.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Privileges, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:privileges: %s", p, err)
	}
	return err
}

func (p *GrantPrivilegesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GrantPrivilegesArgs(%+v)", *p)
}

type GrantPrivilegesResult struct {
	Success *bool          `thrift:"success,0" json:"success"`
	O1      *MetaException `thrift:"o1,1" json:"o1"`
}

func NewGrantPrivilegesResult() *GrantPrivilegesResult {
	return &GrantPrivilegesResult{}
}

var GrantPrivilegesResult_Success_DEFAULT bool

func (p *GrantPrivilegesResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return GrantPrivilegesResult_Success_DEFAULT
	}
	return *p.Success
}

var GrantPrivilegesResult_O1_DEFAULT *MetaException

func (p *GrantPrivilegesResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return GrantPrivilegesResult_O1_DEFAULT
	}
	return p.O1
}
func (p *GrantPrivilegesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GrantPrivilegesResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GrantPrivilegesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GrantPrivilegesResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *GrantPrivilegesResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GrantPrivilegesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("grant_privileges_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GrantPrivilegesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GrantPrivilegesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GrantPrivilegesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GrantPrivilegesResult(%+v)", *p)
}

type RevokePrivilegesArgs struct {
	Privileges *PrivilegeBag `thrift:"privileges,1" json:"privileges"`
}

func NewRevokePrivilegesArgs() *RevokePrivilegesArgs {
	return &RevokePrivilegesArgs{}
}

var RevokePrivilegesArgs_Privileges_DEFAULT *PrivilegeBag

func (p *RevokePrivilegesArgs) GetPrivileges() *PrivilegeBag {
	if !p.IsSetPrivileges() {
		return RevokePrivilegesArgs_Privileges_DEFAULT
	}
	return p.Privileges
}
func (p *RevokePrivilegesArgs) IsSetPrivileges() bool {
	return p.Privileges != nil
}

func (p *RevokePrivilegesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RevokePrivilegesArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Privileges = &PrivilegeBag{}
	if err := p.Privileges.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Privileges, err)
	}
	return nil
}

func (p *RevokePrivilegesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("revoke_privileges_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RevokePrivilegesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privileges", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:privileges: %s", p, err)
	}
	if err := p.Privileges.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Privileges, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:privileges: %s", p, err)
	}
	return err
}

func (p *RevokePrivilegesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RevokePrivilegesArgs(%+v)", *p)
}

type RevokePrivilegesResult struct {
	Success *bool          `thrift:"success,0" json:"success"`
	O1      *MetaException `thrift:"o1,1" json:"o1"`
}

func NewRevokePrivilegesResult() *RevokePrivilegesResult {
	return &RevokePrivilegesResult{}
}

var RevokePrivilegesResult_Success_DEFAULT bool

func (p *RevokePrivilegesResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return RevokePrivilegesResult_Success_DEFAULT
	}
	return *p.Success
}

var RevokePrivilegesResult_O1_DEFAULT *MetaException

func (p *RevokePrivilegesResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return RevokePrivilegesResult_O1_DEFAULT
	}
	return p.O1
}
func (p *RevokePrivilegesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RevokePrivilegesResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *RevokePrivilegesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RevokePrivilegesResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *RevokePrivilegesResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *RevokePrivilegesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("revoke_privileges_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RevokePrivilegesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *RevokePrivilegesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *RevokePrivilegesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RevokePrivilegesResult(%+v)", *p)
}

type GetDelegationTokenArgs struct {
	RenewerKerberosPrincipalName string `thrift:"renewer_kerberos_principal_name,1" json:"renewer_kerberos_principal_name"`
}

func NewGetDelegationTokenArgs() *GetDelegationTokenArgs {
	return &GetDelegationTokenArgs{}
}

func (p *GetDelegationTokenArgs) GetRenewerKerberosPrincipalName() string {
	return p.RenewerKerberosPrincipalName
}
func (p *GetDelegationTokenArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetDelegationTokenArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.RenewerKerberosPrincipalName = v
	}
	return nil
}

func (p *GetDelegationTokenArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_delegation_token_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetDelegationTokenArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("renewer_kerberos_principal_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:renewer_kerberos_principal_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.RenewerKerberosPrincipalName)); err != nil {
		return fmt.Errorf("%T.renewer_kerberos_principal_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:renewer_kerberos_principal_name: %s", p, err)
	}
	return err
}

func (p *GetDelegationTokenArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDelegationTokenArgs(%+v)", *p)
}

type GetDelegationTokenResult struct {
	Success *string        `thrift:"success,0" json:"success"`
	O1      *MetaException `thrift:"o1,1" json:"o1"`
}

func NewGetDelegationTokenResult() *GetDelegationTokenResult {
	return &GetDelegationTokenResult{}
}

var GetDelegationTokenResult_Success_DEFAULT string

func (p *GetDelegationTokenResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return GetDelegationTokenResult_Success_DEFAULT
	}
	return *p.Success
}

var GetDelegationTokenResult_O1_DEFAULT *MetaException

func (p *GetDelegationTokenResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return GetDelegationTokenResult_O1_DEFAULT
	}
	return p.O1
}
func (p *GetDelegationTokenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetDelegationTokenResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetDelegationTokenResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetDelegationTokenResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *GetDelegationTokenResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetDelegationTokenResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_delegation_token_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetDelegationTokenResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetDelegationTokenResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetDelegationTokenResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDelegationTokenResult(%+v)", *p)
}

type GetDelegationTokenWithSignatureArgs struct {
	RenewerKerberosPrincipalName string `thrift:"renewer_kerberos_principal_name,1" json:"renewer_kerberos_principal_name"`
	TokenSignature               string `thrift:"token_signature,2" json:"token_signature"`
}

func NewGetDelegationTokenWithSignatureArgs() *GetDelegationTokenWithSignatureArgs {
	return &GetDelegationTokenWithSignatureArgs{}
}

func (p *GetDelegationTokenWithSignatureArgs) GetRenewerKerberosPrincipalName() string {
	return p.RenewerKerberosPrincipalName
}

func (p *GetDelegationTokenWithSignatureArgs) GetTokenSignature() string {
	return p.TokenSignature
}
func (p *GetDelegationTokenWithSignatureArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetDelegationTokenWithSignatureArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.RenewerKerberosPrincipalName = v
	}
	return nil
}

func (p *GetDelegationTokenWithSignatureArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TokenSignature = v
	}
	return nil
}

func (p *GetDelegationTokenWithSignatureArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_delegation_token_with_signature_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetDelegationTokenWithSignatureArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("renewer_kerberos_principal_name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:renewer_kerberos_principal_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.RenewerKerberosPrincipalName)); err != nil {
		return fmt.Errorf("%T.renewer_kerberos_principal_name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:renewer_kerberos_principal_name: %s", p, err)
	}
	return err
}

func (p *GetDelegationTokenWithSignatureArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("token_signature", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:token_signature: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TokenSignature)); err != nil {
		return fmt.Errorf("%T.token_signature (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:token_signature: %s", p, err)
	}
	return err
}

func (p *GetDelegationTokenWithSignatureArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDelegationTokenWithSignatureArgs(%+v)", *p)
}

type GetDelegationTokenWithSignatureResult struct {
	Success *string        `thrift:"success,0" json:"success"`
	O1      *MetaException `thrift:"o1,1" json:"o1"`
}

func NewGetDelegationTokenWithSignatureResult() *GetDelegationTokenWithSignatureResult {
	return &GetDelegationTokenWithSignatureResult{}
}

var GetDelegationTokenWithSignatureResult_Success_DEFAULT string

func (p *GetDelegationTokenWithSignatureResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return GetDelegationTokenWithSignatureResult_Success_DEFAULT
	}
	return *p.Success
}

var GetDelegationTokenWithSignatureResult_O1_DEFAULT *MetaException

func (p *GetDelegationTokenWithSignatureResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return GetDelegationTokenWithSignatureResult_O1_DEFAULT
	}
	return p.O1
}
func (p *GetDelegationTokenWithSignatureResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetDelegationTokenWithSignatureResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *GetDelegationTokenWithSignatureResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetDelegationTokenWithSignatureResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *GetDelegationTokenWithSignatureResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *GetDelegationTokenWithSignatureResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_delegation_token_with_signature_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetDelegationTokenWithSignatureResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetDelegationTokenWithSignatureResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *GetDelegationTokenWithSignatureResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDelegationTokenWithSignatureResult(%+v)", *p)
}

type RenewDelegationTokenArgs struct {
	TokenStrForm string `thrift:"token_str_form,1" json:"token_str_form"`
}

func NewRenewDelegationTokenArgs() *RenewDelegationTokenArgs {
	return &RenewDelegationTokenArgs{}
}

func (p *RenewDelegationTokenArgs) GetTokenStrForm() string {
	return p.TokenStrForm
}
func (p *RenewDelegationTokenArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RenewDelegationTokenArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TokenStrForm = v
	}
	return nil
}

func (p *RenewDelegationTokenArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("renew_delegation_token_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RenewDelegationTokenArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("token_str_form", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:token_str_form: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TokenStrForm)); err != nil {
		return fmt.Errorf("%T.token_str_form (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:token_str_form: %s", p, err)
	}
	return err
}

func (p *RenewDelegationTokenArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RenewDelegationTokenArgs(%+v)", *p)
}

type RenewDelegationTokenResult struct {
	Success *int64         `thrift:"success,0" json:"success"`
	O1      *MetaException `thrift:"o1,1" json:"o1"`
}

func NewRenewDelegationTokenResult() *RenewDelegationTokenResult {
	return &RenewDelegationTokenResult{}
}

var RenewDelegationTokenResult_Success_DEFAULT int64

func (p *RenewDelegationTokenResult) GetSuccess() int64 {
	if !p.IsSetSuccess() {
		return RenewDelegationTokenResult_Success_DEFAULT
	}
	return *p.Success
}

var RenewDelegationTokenResult_O1_DEFAULT *MetaException

func (p *RenewDelegationTokenResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return RenewDelegationTokenResult_O1_DEFAULT
	}
	return p.O1
}
func (p *RenewDelegationTokenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RenewDelegationTokenResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *RenewDelegationTokenResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RenewDelegationTokenResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *RenewDelegationTokenResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *RenewDelegationTokenResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("renew_delegation_token_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RenewDelegationTokenResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *RenewDelegationTokenResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *RenewDelegationTokenResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RenewDelegationTokenResult(%+v)", *p)
}

type CancelDelegationTokenArgs struct {
	TokenStrForm string `thrift:"token_str_form,1" json:"token_str_form"`
}

func NewCancelDelegationTokenArgs() *CancelDelegationTokenArgs {
	return &CancelDelegationTokenArgs{}
}

func (p *CancelDelegationTokenArgs) GetTokenStrForm() string {
	return p.TokenStrForm
}
func (p *CancelDelegationTokenArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CancelDelegationTokenArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TokenStrForm = v
	}
	return nil
}

func (p *CancelDelegationTokenArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("cancel_delegation_token_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CancelDelegationTokenArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("token_str_form", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:token_str_form: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TokenStrForm)); err != nil {
		return fmt.Errorf("%T.token_str_form (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:token_str_form: %s", p, err)
	}
	return err
}

func (p *CancelDelegationTokenArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CancelDelegationTokenArgs(%+v)", *p)
}

type CancelDelegationTokenResult struct {
	O1 *MetaException `thrift:"o1,1" json:"o1"`
}

func NewCancelDelegationTokenResult() *CancelDelegationTokenResult {
	return &CancelDelegationTokenResult{}
}

var CancelDelegationTokenResult_O1_DEFAULT *MetaException

func (p *CancelDelegationTokenResult) GetO1() *MetaException {
	if !p.IsSetO1() {
		return CancelDelegationTokenResult_O1_DEFAULT
	}
	return p.O1
}
func (p *CancelDelegationTokenResult) IsSetO1() bool {
	return p.O1 != nil
}

func (p *CancelDelegationTokenResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CancelDelegationTokenResult) ReadField1(iprot thrift.TProtocol) error {
	p.O1 = &MetaException{}
	if err := p.O1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.O1, err)
	}
	return nil
}

func (p *CancelDelegationTokenResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("cancel_delegation_token_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CancelDelegationTokenResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetO1() {
		if err := oprot.WriteFieldBegin("o1", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:o1: %s", p, err)
		}
		if err := p.O1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.O1, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:o1: %s", p, err)
		}
	}
	return err
}

func (p *CancelDelegationTokenResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CancelDelegationTokenResult(%+v)", *p)
}
